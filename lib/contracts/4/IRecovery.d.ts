/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface IRecoveryInterface extends Interface {
  functions: {
    enterRecoveryMode: TypedFunctionDescription<{ encode([]: []): string }>;

    exitRecoveryMode: TypedFunctionDescription<{ encode([]: []): string }>;

    approveExitRecovery: TypedFunctionDescription<{ encode([]: []): string }>;

    isInRecoveryMode: TypedFunctionDescription<{ encode([]: []): string }>;

    setRecoveryRole: TypedFunctionDescription<{
      encode([_user]: [string]): string;
    }>;

    removeRecoveryRole: TypedFunctionDescription<{
      encode([_user]: [string]): string;
    }>;

    numRecoveryRoles: TypedFunctionDescription<{ encode([]: []): string }>;

    setStorageSlotRecovery: TypedFunctionDescription<{
      encode([_slot, _value]: [BigNumberish, Arrayish]): string;
    }>;

    checkNotAdditionalProtectedVariable: TypedFunctionDescription<{
      encode([_slot]: [BigNumberish]): string;
    }>;
  };

  events: {
    RecoveryRoleSet: TypedEventDescription<{
      encodeTopics([user, setTo]: [string | null, null]): string[];
    }>;
  };
}

export class IRecovery extends Contract {
  connect(signerOrProvider: Signer | Provider | string): IRecovery;
  attach(addressOrName: string): IRecovery;
  deployed(): Promise<IRecovery>;

  on(event: EventFilter | string, listener: Listener): IRecovery;
  once(event: EventFilter | string, listener: Listener): IRecovery;
  addListener(eventName: EventFilter | string, listener: Listener): IRecovery;
  removeAllListeners(eventName: EventFilter | string): IRecovery;
  removeListener(eventName: any, listener: Listener): IRecovery;

  interface: IRecoveryInterface;

  functions: {
    enterRecoveryMode(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    exitRecoveryMode(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    approveExitRecovery(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    isInRecoveryMode(): Promise<boolean>;

    setRecoveryRole(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    removeRecoveryRole(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    numRecoveryRoles(): Promise<BigNumber>;

    setStorageSlotRecovery(
      _slot: BigNumberish,
      _value: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    checkNotAdditionalProtectedVariable(_slot: BigNumberish): Promise<void>;
  };

  enterRecoveryMode(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  exitRecoveryMode(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  approveExitRecovery(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  isInRecoveryMode(): Promise<boolean>;

  setRecoveryRole(
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  removeRecoveryRole(
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  numRecoveryRoles(): Promise<BigNumber>;

  setStorageSlotRecovery(
    _slot: BigNumberish,
    _value: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  checkNotAdditionalProtectedVariable(_slot: BigNumberish): Promise<void>;

  filters: {
    RecoveryRoleSet(user: string | null, setTo: null): EventFilter;
  };

  estimate: {
    enterRecoveryMode(): Promise<BigNumber>;

    exitRecoveryMode(): Promise<BigNumber>;

    approveExitRecovery(): Promise<BigNumber>;

    isInRecoveryMode(): Promise<BigNumber>;

    setRecoveryRole(_user: string): Promise<BigNumber>;

    removeRecoveryRole(_user: string): Promise<BigNumber>;

    numRecoveryRoles(): Promise<BigNumber>;

    setStorageSlotRecovery(
      _slot: BigNumberish,
      _value: Arrayish
    ): Promise<BigNumber>;

    checkNotAdditionalProtectedVariable(
      _slot: BigNumberish
    ): Promise<BigNumber>;
  };
}
