/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface CoinMachineInterface extends utils.Interface {
  functions: {
    "authority()": FunctionFragment;
    "getColony()": FunctionFragment;
    "getDeprecated()": FunctionFragment;
    "owner()": FunctionFragment;
    "setAuthority(address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "identifier()": FunctionFragment;
    "version()": FunctionFragment;
    "install(address)": FunctionFragment;
    "finishUpgrade()": FunctionFragment;
    "deprecate(bool)": FunctionFragment;
    "uninstall()": FunctionFragment;
    "initialise(address,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "buyTokens(uint256)": FunctionFragment;
    "updatePeriod()": FunctionFragment;
    "getPeriodLength()": FunctionFragment;
    "getWindowSize()": FunctionFragment;
    "getTargetPerPeriod()": FunctionFragment;
    "getMaxPerPeriod()": FunctionFragment;
    "getTokensToSell()": FunctionFragment;
    "getCurrentPrice()": FunctionFragment;
    "getNumAvailable()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "authority"
      | "getColony"
      | "getDeprecated"
      | "owner"
      | "setAuthority"
      | "setOwner"
      | "identifier"
      | "version"
      | "install"
      | "finishUpgrade"
      | "deprecate"
      | "uninstall"
      | "initialise"
      | "buyTokens"
      | "updatePeriod"
      | "getPeriodLength"
      | "getWindowSize"
      | "getTargetPerPeriod"
      | "getMaxPerPeriod"
      | "getTokensToSell"
      | "getCurrentPrice"
      | "getNumAvailable"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(functionFragment: "getColony", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getDeprecated",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "identifier",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "install",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "finishUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deprecate",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: "uninstall", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialise",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPeriodLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWindowSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTargetPerPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxPerPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensToSell",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumAvailable",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getColony", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDeprecated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "identifier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "install", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finishUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deprecate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uninstall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialise", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPeriodLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWindowSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTargetPerPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxPerPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensToSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumAvailable",
    data: BytesLike
  ): Result;

  events: {
    "ExtensionInitialised()": EventFragment;
    "LogSetAuthority(address)": EventFragment;
    "LogSetOwner(address)": EventFragment;
    "PeriodUpdated(uint256,uint256)": EventFragment;
    "TokensBought(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExtensionInitialised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetAuthority"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PeriodUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensBought"): EventFragment;
}

export interface ExtensionInitialisedEventObject {}
export type ExtensionInitialisedEvent = TypedEvent<
  [],
  ExtensionInitialisedEventObject
>;

export type ExtensionInitialisedEventFilter =
  TypedEventFilter<ExtensionInitialisedEvent>;

export interface LogSetAuthorityEventObject {
  authority: string;
}
export type LogSetAuthorityEvent = TypedEvent<
  [string],
  LogSetAuthorityEventObject
>;

export type LogSetAuthorityEventFilter = TypedEventFilter<LogSetAuthorityEvent>;

export interface LogSetOwnerEventObject {
  owner: string;
}
export type LogSetOwnerEvent = TypedEvent<[string], LogSetOwnerEventObject>;

export type LogSetOwnerEventFilter = TypedEventFilter<LogSetOwnerEvent>;

export interface PeriodUpdatedEventObject {
  activePeriod: BigNumber;
  currentPeriod: BigNumber;
}
export type PeriodUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  PeriodUpdatedEventObject
>;

export type PeriodUpdatedEventFilter = TypedEventFilter<PeriodUpdatedEvent>;

export interface TokensBoughtEventObject {
  buyer: string;
  numTokens: BigNumber;
  totalCost: BigNumber;
}
export type TokensBoughtEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  TokensBoughtEventObject
>;

export type TokensBoughtEventFilter = TypedEventFilter<TokensBoughtEvent>;

export interface CoinMachine extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CoinMachineInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    authority(overrides?: CallOverrides): Promise<[string]>;

    getColony(overrides?: CallOverrides): Promise<[string]>;

    getDeprecated(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setAuthority(
      authority_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns the identifier of the extension
     */
    identifier(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the version of the extension
     */
    version(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Configures the extension
     * @param _colony The colony in which the extension holds permissions
     */
    install(
      _colony: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Called when upgrading the extension
     */
    finishUpgrade(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Called when deprecating (or undeprecating) the extension
     */
    deprecate(
      _deprecated: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Called when uninstalling the extension
     */
    uninstall(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Must be called before any sales can be made
     * @param _maxPerPeriod The maximum number of tokens that can be sold per period
     * @param _periodLength How long in seconds each period of the sale should last
     * @param _purchaseToken The token to receive payments in. Use 0x0 for ether
     * @param _startingPrice The sale price to start at, expressed in units of _purchaseToken per token being sold, as a WAD
     * @param _targetPerPeriod The number of tokens to aim to sell per period
     * @param _windowSize Characteristic number of periods that should be used for the moving average. In the long-term, 86% of the weighting will be in this window size. The higher the number, the slower the price will be to adjust
     */
    initialise(
      _purchaseToken: PromiseOrValue<string>,
      _periodLength: PromiseOrValue<BigNumberish>,
      _windowSize: PromiseOrValue<BigNumberish>,
      _targetPerPeriod: PromiseOrValue<BigNumberish>,
      _maxPerPeriod: PromiseOrValue<BigNumberish>,
      _tokensToSell: PromiseOrValue<BigNumberish>,
      _startingPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Purchase tokens from Coin Machine.
     * @param _numTokens The number of tokens to purchase
     */
    buyTokens(
      _numTokens: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Bring the token accounting current
     */
    updatePeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Get the length of the sale period
     */
    getPeriodLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Get the size of the averaging window
     */
    getWindowSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Get the target number of tokens to sell per period
     */
    getTargetPerPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Get the maximum number of tokens to sell per period
     */
    getMaxPerPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Get the total number of tokens remaining for sale
     */
    getTokensToSell(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Get the current price per token
     */
    getCurrentPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Get the number of remaining tokens for sale this period
     */
    getNumAvailable(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  authority(overrides?: CallOverrides): Promise<string>;

  getColony(overrides?: CallOverrides): Promise<string>;

  getDeprecated(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  setAuthority(
    authority_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    owner_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns the identifier of the extension
   */
  identifier(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the version of the extension
   */
  version(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Configures the extension
   * @param _colony The colony in which the extension holds permissions
   */
  install(
    _colony: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Called when upgrading the extension
   */
  finishUpgrade(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Called when deprecating (or undeprecating) the extension
   */
  deprecate(
    _deprecated: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Called when uninstalling the extension
   */
  uninstall(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Must be called before any sales can be made
   * @param _maxPerPeriod The maximum number of tokens that can be sold per period
   * @param _periodLength How long in seconds each period of the sale should last
   * @param _purchaseToken The token to receive payments in. Use 0x0 for ether
   * @param _startingPrice The sale price to start at, expressed in units of _purchaseToken per token being sold, as a WAD
   * @param _targetPerPeriod The number of tokens to aim to sell per period
   * @param _windowSize Characteristic number of periods that should be used for the moving average. In the long-term, 86% of the weighting will be in this window size. The higher the number, the slower the price will be to adjust
   */
  initialise(
    _purchaseToken: PromiseOrValue<string>,
    _periodLength: PromiseOrValue<BigNumberish>,
    _windowSize: PromiseOrValue<BigNumberish>,
    _targetPerPeriod: PromiseOrValue<BigNumberish>,
    _maxPerPeriod: PromiseOrValue<BigNumberish>,
    _tokensToSell: PromiseOrValue<BigNumberish>,
    _startingPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Purchase tokens from Coin Machine.
   * @param _numTokens The number of tokens to purchase
   */
  buyTokens(
    _numTokens: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Bring the token accounting current
   */
  updatePeriod(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Get the length of the sale period
   */
  getPeriodLength(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Get the size of the averaging window
   */
  getWindowSize(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Get the target number of tokens to sell per period
   */
  getTargetPerPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Get the maximum number of tokens to sell per period
   */
  getMaxPerPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Get the total number of tokens remaining for sale
   */
  getTokensToSell(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Get the current price per token
   */
  getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Get the number of remaining tokens for sale this period
   */
  getNumAvailable(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    authority(overrides?: CallOverrides): Promise<string>;

    getColony(overrides?: CallOverrides): Promise<string>;

    getDeprecated(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    setAuthority(
      authority_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns the identifier of the extension
     */
    identifier(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the version of the extension
     */
    version(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Configures the extension
     * @param _colony The colony in which the extension holds permissions
     */
    install(
      _colony: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Called when upgrading the extension
     */
    finishUpgrade(overrides?: CallOverrides): Promise<void>;

    /**
     * Called when deprecating (or undeprecating) the extension
     */
    deprecate(
      _deprecated: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Called when uninstalling the extension
     */
    uninstall(overrides?: CallOverrides): Promise<void>;

    /**
     * Must be called before any sales can be made
     * @param _maxPerPeriod The maximum number of tokens that can be sold per period
     * @param _periodLength How long in seconds each period of the sale should last
     * @param _purchaseToken The token to receive payments in. Use 0x0 for ether
     * @param _startingPrice The sale price to start at, expressed in units of _purchaseToken per token being sold, as a WAD
     * @param _targetPerPeriod The number of tokens to aim to sell per period
     * @param _windowSize Characteristic number of periods that should be used for the moving average. In the long-term, 86% of the weighting will be in this window size. The higher the number, the slower the price will be to adjust
     */
    initialise(
      _purchaseToken: PromiseOrValue<string>,
      _periodLength: PromiseOrValue<BigNumberish>,
      _windowSize: PromiseOrValue<BigNumberish>,
      _targetPerPeriod: PromiseOrValue<BigNumberish>,
      _maxPerPeriod: PromiseOrValue<BigNumberish>,
      _tokensToSell: PromiseOrValue<BigNumberish>,
      _startingPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Purchase tokens from Coin Machine.
     * @param _numTokens The number of tokens to purchase
     */
    buyTokens(
      _numTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Bring the token accounting current
     */
    updatePeriod(overrides?: CallOverrides): Promise<void>;

    /**
     * Get the length of the sale period
     */
    getPeriodLength(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the size of the averaging window
     */
    getWindowSize(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the target number of tokens to sell per period
     */
    getTargetPerPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the maximum number of tokens to sell per period
     */
    getMaxPerPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the total number of tokens remaining for sale
     */
    getTokensToSell(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the current price per token
     */
    getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the number of remaining tokens for sale this period
     */
    getNumAvailable(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ExtensionInitialised()"(): ExtensionInitialisedEventFilter;
    ExtensionInitialised(): ExtensionInitialisedEventFilter;

    "LogSetAuthority(address)"(
      authority?: PromiseOrValue<string> | null
    ): LogSetAuthorityEventFilter;
    LogSetAuthority(
      authority?: PromiseOrValue<string> | null
    ): LogSetAuthorityEventFilter;

    "LogSetOwner(address)"(
      owner?: PromiseOrValue<string> | null
    ): LogSetOwnerEventFilter;
    LogSetOwner(owner?: PromiseOrValue<string> | null): LogSetOwnerEventFilter;

    "PeriodUpdated(uint256,uint256)"(
      activePeriod?: null,
      currentPeriod?: null
    ): PeriodUpdatedEventFilter;
    PeriodUpdated(
      activePeriod?: null,
      currentPeriod?: null
    ): PeriodUpdatedEventFilter;

    "TokensBought(address,uint256,uint256)"(
      buyer?: null,
      numTokens?: null,
      totalCost?: null
    ): TokensBoughtEventFilter;
    TokensBought(
      buyer?: null,
      numTokens?: null,
      totalCost?: null
    ): TokensBoughtEventFilter;
  };

  estimateGas: {
    authority(overrides?: CallOverrides): Promise<BigNumber>;

    getColony(overrides?: CallOverrides): Promise<BigNumber>;

    getDeprecated(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setAuthority(
      authority_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOwner(
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Returns the identifier of the extension
     */
    identifier(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the version of the extension
     */
    version(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Configures the extension
     * @param _colony The colony in which the extension holds permissions
     */
    install(
      _colony: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Called when upgrading the extension
     */
    finishUpgrade(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Called when deprecating (or undeprecating) the extension
     */
    deprecate(
      _deprecated: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Called when uninstalling the extension
     */
    uninstall(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Must be called before any sales can be made
     * @param _maxPerPeriod The maximum number of tokens that can be sold per period
     * @param _periodLength How long in seconds each period of the sale should last
     * @param _purchaseToken The token to receive payments in. Use 0x0 for ether
     * @param _startingPrice The sale price to start at, expressed in units of _purchaseToken per token being sold, as a WAD
     * @param _targetPerPeriod The number of tokens to aim to sell per period
     * @param _windowSize Characteristic number of periods that should be used for the moving average. In the long-term, 86% of the weighting will be in this window size. The higher the number, the slower the price will be to adjust
     */
    initialise(
      _purchaseToken: PromiseOrValue<string>,
      _periodLength: PromiseOrValue<BigNumberish>,
      _windowSize: PromiseOrValue<BigNumberish>,
      _targetPerPeriod: PromiseOrValue<BigNumberish>,
      _maxPerPeriod: PromiseOrValue<BigNumberish>,
      _tokensToSell: PromiseOrValue<BigNumberish>,
      _startingPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Purchase tokens from Coin Machine.
     * @param _numTokens The number of tokens to purchase
     */
    buyTokens(
      _numTokens: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Bring the token accounting current
     */
    updatePeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Get the length of the sale period
     */
    getPeriodLength(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the size of the averaging window
     */
    getWindowSize(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the target number of tokens to sell per period
     */
    getTargetPerPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the maximum number of tokens to sell per period
     */
    getMaxPerPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the total number of tokens remaining for sale
     */
    getTokensToSell(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the current price per token
     */
    getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the number of remaining tokens for sale this period
     */
    getNumAvailable(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getColony(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDeprecated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAuthority(
      authority_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the identifier of the extension
     */
    identifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the version of the extension
     */
    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Configures the extension
     * @param _colony The colony in which the extension holds permissions
     */
    install(
      _colony: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Called when upgrading the extension
     */
    finishUpgrade(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Called when deprecating (or undeprecating) the extension
     */
    deprecate(
      _deprecated: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Called when uninstalling the extension
     */
    uninstall(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Must be called before any sales can be made
     * @param _maxPerPeriod The maximum number of tokens that can be sold per period
     * @param _periodLength How long in seconds each period of the sale should last
     * @param _purchaseToken The token to receive payments in. Use 0x0 for ether
     * @param _startingPrice The sale price to start at, expressed in units of _purchaseToken per token being sold, as a WAD
     * @param _targetPerPeriod The number of tokens to aim to sell per period
     * @param _windowSize Characteristic number of periods that should be used for the moving average. In the long-term, 86% of the weighting will be in this window size. The higher the number, the slower the price will be to adjust
     */
    initialise(
      _purchaseToken: PromiseOrValue<string>,
      _periodLength: PromiseOrValue<BigNumberish>,
      _windowSize: PromiseOrValue<BigNumberish>,
      _targetPerPeriod: PromiseOrValue<BigNumberish>,
      _maxPerPeriod: PromiseOrValue<BigNumberish>,
      _tokensToSell: PromiseOrValue<BigNumberish>,
      _startingPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Purchase tokens from Coin Machine.
     * @param _numTokens The number of tokens to purchase
     */
    buyTokens(
      _numTokens: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Bring the token accounting current
     */
    updatePeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Get the length of the sale period
     */
    getPeriodLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Get the size of the averaging window
     */
    getWindowSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Get the target number of tokens to sell per period
     */
    getTargetPerPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get the maximum number of tokens to sell per period
     */
    getMaxPerPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Get the total number of tokens remaining for sale
     */
    getTokensToSell(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Get the current price per token
     */
    getCurrentPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Get the number of remaining tokens for sale this period
     */
    getNumAvailable(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
