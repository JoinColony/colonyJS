/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface IEtherRouterInterface extends Interface {
  functions: {
    setResolver: TypedFunctionDescription<{
      encode([_resolver]: [string]): string;
    }>;

    setOwner: TypedFunctionDescription<{ encode([owner_]: [string]): string }>;

    setAuthority: TypedFunctionDescription<{
      encode([authority_]: [string]): string;
    }>;
  };

  events: {};
}

export class IEtherRouter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): IEtherRouter;
  attach(addressOrName: string): IEtherRouter;
  deployed(): Promise<IEtherRouter>;

  on(event: EventFilter | string, listener: Listener): IEtherRouter;
  once(event: EventFilter | string, listener: Listener): IEtherRouter;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): IEtherRouter;
  removeAllListeners(eventName: EventFilter | string): IEtherRouter;
  removeListener(eventName: any, listener: Listener): IEtherRouter;

  interface: IEtherRouterInterface;

  functions: {
    setResolver(
      _resolver: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setOwner(
      owner_: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setAuthority(
      authority_: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  setResolver(
    _resolver: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setOwner(
    owner_: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setAuthority(
    authority_: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    setResolver(_resolver: string): Promise<BigNumber>;

    setOwner(owner_: string): Promise<BigNumber>;

    setAuthority(authority_: string): Promise<BigNumber>;
  };
}
