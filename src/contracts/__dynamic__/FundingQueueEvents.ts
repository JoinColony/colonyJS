/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface FundingQueueEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "ExtensionInitialised()": EventFragment;
    "LogSetAuthority(address)": EventFragment;
    "LogSetOwner(address)": EventFragment;
    "ProposalBacked(uint256,uint256,address,uint256,uint256)": EventFragment;
    "ProposalCancelled(uint256)": EventFragment;
    "ProposalCompleted(uint256)": EventFragment;
    "ProposalCreated(uint256,uint256,uint256,address,uint256)": EventFragment;
    "ProposalPinged(uint256,uint256)": EventFragment;
    "ProposalStakeReclaimed(uint256)": EventFragment;
    "ProposalStaked(uint256,uint256)": EventFragment;
    "MetaTransactionExecuted(address,address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExtensionInitialised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetAuthority"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalBacked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalPinged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalStakeReclaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalStaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
}

export interface ExtensionInitialisedEventObject {}
export type ExtensionInitialisedEvent = TypedEvent<
  [],
  ExtensionInitialisedEventObject
>;

export type ExtensionInitialisedEventFilter =
  TypedEventFilter<ExtensionInitialisedEvent>;

export interface LogSetAuthorityEventObject {
  authority: string;
}
export type LogSetAuthorityEvent = TypedEvent<
  [string],
  LogSetAuthorityEventObject
>;

export type LogSetAuthorityEventFilter = TypedEventFilter<LogSetAuthorityEvent>;

export interface LogSetOwnerEventObject {
  owner: string;
}
export type LogSetOwnerEvent = TypedEvent<[string], LogSetOwnerEventObject>;

export type LogSetOwnerEventFilter = TypedEventFilter<LogSetOwnerEvent>;

export interface ProposalBackedEventObject {
  id: BigNumber;
  newPrevId: BigNumber;
  user: string;
  backing: BigNumber;
  prevBacking: BigNumber;
}
export type ProposalBackedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, BigNumber],
  ProposalBackedEventObject
>;

export type ProposalBackedEventFilter = TypedEventFilter<ProposalBackedEvent>;

export interface ProposalCancelledEventObject {
  id: BigNumber;
}
export type ProposalCancelledEvent = TypedEvent<
  [BigNumber],
  ProposalCancelledEventObject
>;

export type ProposalCancelledEventFilter =
  TypedEventFilter<ProposalCancelledEvent>;

export interface ProposalCompletedEventObject {
  id: BigNumber;
}
export type ProposalCompletedEvent = TypedEvent<
  [BigNumber],
  ProposalCompletedEventObject
>;

export type ProposalCompletedEventFilter =
  TypedEventFilter<ProposalCompletedEvent>;

export interface ProposalCreatedEventObject {
  id: BigNumber;
  fromPot: BigNumber;
  toPot: BigNumber;
  token: string;
  amount: BigNumber;
}
export type ProposalCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, BigNumber],
  ProposalCreatedEventObject
>;

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;

export interface ProposalPingedEventObject {
  id: BigNumber;
  amount: BigNumber;
}
export type ProposalPingedEvent = TypedEvent<
  [BigNumber, BigNumber],
  ProposalPingedEventObject
>;

export type ProposalPingedEventFilter = TypedEventFilter<ProposalPingedEvent>;

export interface ProposalStakeReclaimedEventObject {
  id: BigNumber;
}
export type ProposalStakeReclaimedEvent = TypedEvent<
  [BigNumber],
  ProposalStakeReclaimedEventObject
>;

export type ProposalStakeReclaimedEventFilter =
  TypedEventFilter<ProposalStakeReclaimedEvent>;

export interface ProposalStakedEventObject {
  id: BigNumber;
  domainTotalRep: BigNumber;
}
export type ProposalStakedEvent = TypedEvent<
  [BigNumber, BigNumber],
  ProposalStakedEventObject
>;

export type ProposalStakedEventFilter = TypedEventFilter<ProposalStakedEvent>;

export interface MetaTransactionExecutedEventObject {
  user: string;
  relayerAddress: string;
  functionSignature: string;
}
export type MetaTransactionExecutedEvent = TypedEvent<
  [string, string, string],
  MetaTransactionExecutedEventObject
>;

export type MetaTransactionExecutedEventFilter =
  TypedEventFilter<MetaTransactionExecutedEvent>;

export interface FundingQueueEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FundingQueueEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "ExtensionInitialised()"(): ExtensionInitialisedEventFilter;
    ExtensionInitialised(): ExtensionInitialisedEventFilter;

    "LogSetAuthority(address)"(
      authority?: PromiseOrValue<string> | null
    ): LogSetAuthorityEventFilter;
    LogSetAuthority(
      authority?: PromiseOrValue<string> | null
    ): LogSetAuthorityEventFilter;

    "LogSetOwner(address)"(
      owner?: PromiseOrValue<string> | null
    ): LogSetOwnerEventFilter;
    LogSetOwner(owner?: PromiseOrValue<string> | null): LogSetOwnerEventFilter;

    "ProposalBacked(uint256,uint256,address,uint256,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      newPrevId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      backing?: null,
      prevBacking?: null
    ): ProposalBackedEventFilter;
    ProposalBacked(
      id?: PromiseOrValue<BigNumberish> | null,
      newPrevId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      backing?: null,
      prevBacking?: null
    ): ProposalBackedEventFilter;

    "ProposalCancelled(uint256)"(
      id?: PromiseOrValue<BigNumberish> | null
    ): ProposalCancelledEventFilter;
    ProposalCancelled(
      id?: PromiseOrValue<BigNumberish> | null
    ): ProposalCancelledEventFilter;

    "ProposalCompleted(uint256)"(
      id?: PromiseOrValue<BigNumberish> | null
    ): ProposalCompletedEventFilter;
    ProposalCompleted(
      id?: PromiseOrValue<BigNumberish> | null
    ): ProposalCompletedEventFilter;

    "ProposalCreated(uint256,uint256,uint256,address,uint256)"(
      id?: null,
      fromPot?: PromiseOrValue<BigNumberish> | null,
      toPot?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): ProposalCreatedEventFilter;
    ProposalCreated(
      id?: null,
      fromPot?: PromiseOrValue<BigNumberish> | null,
      toPot?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): ProposalCreatedEventFilter;

    "ProposalPinged(uint256,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): ProposalPingedEventFilter;
    ProposalPinged(
      id?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): ProposalPingedEventFilter;

    "ProposalStakeReclaimed(uint256)"(
      id?: PromiseOrValue<BigNumberish> | null
    ): ProposalStakeReclaimedEventFilter;
    ProposalStakeReclaimed(
      id?: PromiseOrValue<BigNumberish> | null
    ): ProposalStakeReclaimedEventFilter;

    "ProposalStaked(uint256,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      domainTotalRep?: null
    ): ProposalStakedEventFilter;
    ProposalStaked(
      id?: PromiseOrValue<BigNumberish> | null,
      domainTotalRep?: null
    ): ProposalStakedEventFilter;

    "MetaTransactionExecuted(address,address,bytes)"(
      user?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;
    MetaTransactionExecuted(
      user?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
