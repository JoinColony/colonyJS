/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface TokenSupplierEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "ExtensionInitialised()": EventFragment;
    "LogSetAuthority(address)": EventFragment;
    "LogSetOwner(address)": EventFragment;
    "TokenIssuanceRateSet(uint256)": EventFragment;
    "TokenSupplyCeilingSet(uint256)": EventFragment;
    "TokensIssued(uint256)": EventFragment;
    "MetaTransactionExecuted(address,address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExtensionInitialised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetAuthority"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenIssuanceRateSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenSupplyCeilingSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensIssued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
}

export interface ExtensionInitialisedEventObject {}
export type ExtensionInitialisedEvent = TypedEvent<
  [],
  ExtensionInitialisedEventObject
>;

export type ExtensionInitialisedEventFilter =
  TypedEventFilter<ExtensionInitialisedEvent>;

export interface LogSetAuthorityEventObject {
  authority: string;
}
export type LogSetAuthorityEvent = TypedEvent<
  [string],
  LogSetAuthorityEventObject
>;

export type LogSetAuthorityEventFilter = TypedEventFilter<LogSetAuthorityEvent>;

export interface LogSetOwnerEventObject {
  owner: string;
}
export type LogSetOwnerEvent = TypedEvent<[string], LogSetOwnerEventObject>;

export type LogSetOwnerEventFilter = TypedEventFilter<LogSetOwnerEvent>;

export interface TokenIssuanceRateSetEventObject {
  tokenIssuanceRate: BigNumber;
}
export type TokenIssuanceRateSetEvent = TypedEvent<
  [BigNumber],
  TokenIssuanceRateSetEventObject
>;

export type TokenIssuanceRateSetEventFilter =
  TypedEventFilter<TokenIssuanceRateSetEvent>;

export interface TokenSupplyCeilingSetEventObject {
  tokenSupplyCeiling: BigNumber;
}
export type TokenSupplyCeilingSetEvent = TypedEvent<
  [BigNumber],
  TokenSupplyCeilingSetEventObject
>;

export type TokenSupplyCeilingSetEventFilter =
  TypedEventFilter<TokenSupplyCeilingSetEvent>;

export interface TokensIssuedEventObject {
  numTokens: BigNumber;
}
export type TokensIssuedEvent = TypedEvent<
  [BigNumber],
  TokensIssuedEventObject
>;

export type TokensIssuedEventFilter = TypedEventFilter<TokensIssuedEvent>;

export interface MetaTransactionExecutedEventObject {
  user: string;
  relayerAddress: string;
  functionSignature: string;
}
export type MetaTransactionExecutedEvent = TypedEvent<
  [string, string, string],
  MetaTransactionExecutedEventObject
>;

export type MetaTransactionExecutedEventFilter =
  TypedEventFilter<MetaTransactionExecutedEvent>;

export interface TokenSupplierEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenSupplierEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "ExtensionInitialised()"(): ExtensionInitialisedEventFilter;
    ExtensionInitialised(): ExtensionInitialisedEventFilter;

    "LogSetAuthority(address)"(
      authority?: PromiseOrValue<string> | null
    ): LogSetAuthorityEventFilter;
    LogSetAuthority(
      authority?: PromiseOrValue<string> | null
    ): LogSetAuthorityEventFilter;

    "LogSetOwner(address)"(
      owner?: PromiseOrValue<string> | null
    ): LogSetOwnerEventFilter;
    LogSetOwner(owner?: PromiseOrValue<string> | null): LogSetOwnerEventFilter;

    "TokenIssuanceRateSet(uint256)"(
      tokenIssuanceRate?: null
    ): TokenIssuanceRateSetEventFilter;
    TokenIssuanceRateSet(
      tokenIssuanceRate?: null
    ): TokenIssuanceRateSetEventFilter;

    "TokenSupplyCeilingSet(uint256)"(
      tokenSupplyCeiling?: null
    ): TokenSupplyCeilingSetEventFilter;
    TokenSupplyCeilingSet(
      tokenSupplyCeiling?: null
    ): TokenSupplyCeilingSetEventFilter;

    "TokensIssued(uint256)"(numTokens?: null): TokensIssuedEventFilter;
    TokensIssued(numTokens?: null): TokensIssuedEventFilter;

    "MetaTransactionExecuted(address,address,bytes)"(
      user?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;
    MetaTransactionExecuted(
      user?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
