/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface IColonyInterface extends Interface {
  functions: {
    addDomain: TypedFunctionDescription<{
      encode([_permissionDomainId, _childSkillIndex, _parentDomainId]: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    addLocalSkill: TypedFunctionDescription<{ encode([]: []): string }>;

    annotateTransaction: TypedFunctionDescription<{
      encode([_txHash, _metadata]: [Arrayish, string]): string;
    }>;

    approveExitRecovery: TypedFunctionDescription<{ encode([]: []): string }>;

    approveStake: TypedFunctionDescription<{
      encode([_approvee, _domainId, _amount]: [
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    authority: TypedFunctionDescription<{ encode([]: []): string }>;

    bootstrapColony: TypedFunctionDescription<{
      encode([_users, _amount]: [string[], BigNumberish[]]): string;
    }>;

    burnTokens: TypedFunctionDescription<{
      encode([token, amount]: [string, BigNumberish]): string;
    }>;

    cancelExpenditure: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    cancelExpenditureViaArbitration: TypedFunctionDescription<{
      encode([_permissionDomainId, _childSkillIndex, _id]: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    checkNotAdditionalProtectedVariable: TypedFunctionDescription<{
      encode([_slot]: [BigNumberish]): string;
    }>;

    claimColonyFunds: TypedFunctionDescription<{
      encode([_token]: [string]): string;
    }>;

    claimExpenditurePayout: TypedFunctionDescription<{
      encode([_id, _slot, _token]: [
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    claimRewardPayout: TypedFunctionDescription<{
      encode([_payoutId, _squareRoots, key, value, branchMask, siblings]: [
        BigNumberish,
        BigNumberish[],
        Arrayish,
        Arrayish,
        BigNumberish,
        Arrayish[]
      ]): string;
    }>;

    deobligateStake: TypedFunctionDescription<{
      encode([_user, _domainId, _amount]: [
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    deprecateDomain: TypedFunctionDescription<{
      encode([_permissionDomainId, _childSkillIndex, _domainId, _deprecated]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        boolean
      ]): string;
    }>;

    deprecateExtension: TypedFunctionDescription<{
      encode([extensionId, deprecated]: [Arrayish, boolean]): string;
    }>;

    deprecateLocalSkill: TypedFunctionDescription<{
      encode([localSkillId, deprecated]: [BigNumberish, boolean]): string;
    }>;

    editColony: TypedFunctionDescription<{
      encode([_metadata]: [string]): string;
    }>;

    editColonyByDelta: TypedFunctionDescription<{
      encode([_metadataDelta]: [string]): string;
    }>;

    editDomain: TypedFunctionDescription<{
      encode([_permissionDomainId, _childSkillIndex, _domainId, _metadata]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    emitDomainReputationPenalty: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _domainId,
        _user,
        _amount,
      ]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string,
        BigNumberish
      ]): string;
    }>;

    emitDomainReputationReward: TypedFunctionDescription<{
      encode([_domainId, _user, _amount]: [
        BigNumberish,
        string,
        BigNumberish
      ]): string;
    }>;

    emitSkillReputationPenalty: TypedFunctionDescription<{
      encode([_skillId, _user, _amount]: [
        BigNumberish,
        string,
        BigNumberish
      ]): string;
    }>;

    emitSkillReputationReward: TypedFunctionDescription<{
      encode([_skillId, _user, _amount]: [
        BigNumberish,
        string,
        BigNumberish
      ]): string;
    }>;

    enterRecoveryMode: TypedFunctionDescription<{ encode([]: []): string }>;

    executeMetaTransaction: TypedFunctionDescription<{
      encode([userAddress, payload, sigR, sigS, sigV]: [
        string,
        Arrayish,
        Arrayish,
        Arrayish,
        BigNumberish
      ]): string;
    }>;

    exitRecoveryMode: TypedFunctionDescription<{ encode([]: []): string }>;

    finalizeExpenditure: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    finalizeExpenditureViaArbitration: TypedFunctionDescription<{
      encode([_permissionDomainId, _childSkillIndex, _id]: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    finalizeRewardPayout: TypedFunctionDescription<{
      encode([_payoutId]: [BigNumberish]): string;
    }>;

    finishUpgrade: TypedFunctionDescription<{ encode([]: []): string }>;

    getApproval: TypedFunctionDescription<{
      encode([_user, _obligator, _domainId]: [
        string,
        string,
        BigNumberish
      ]): string;
    }>;

    getCapabilityRoles: TypedFunctionDescription<{
      encode([_sig]: [Arrayish]): string;
    }>;

    getColonyNetwork: TypedFunctionDescription<{ encode([]: []): string }>;

    getDomain: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    getDomainCount: TypedFunctionDescription<{ encode([]: []): string }>;

    getDomainFromFundingPot: TypedFunctionDescription<{
      encode([_fundingPotId]: [BigNumberish]): string;
    }>;

    getExpenditure: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    getExpenditureCount: TypedFunctionDescription<{ encode([]: []): string }>;

    getExpenditureSlot: TypedFunctionDescription<{
      encode([_id, _slot]: [BigNumberish, BigNumberish]): string;
    }>;

    getExpenditureSlotPayout: TypedFunctionDescription<{
      encode([_id, _slot, _token]: [
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    getFundingPot: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    getFundingPotBalance: TypedFunctionDescription<{
      encode([_potId, _token]: [BigNumberish, string]): string;
    }>;

    getFundingPotCount: TypedFunctionDescription<{ encode([]: []): string }>;

    getFundingPotPayout: TypedFunctionDescription<{
      encode([_potId, _token]: [BigNumberish, string]): string;
    }>;

    getMetatransactionNonce: TypedFunctionDescription<{
      encode([userAddress]: [string]): string;
    }>;

    getNonRewardPotsTotal: TypedFunctionDescription<{
      encode([_token]: [string]): string;
    }>;

    getObligation: TypedFunctionDescription<{
      encode([_user, _obligator, _domainId]: [
        string,
        string,
        BigNumberish
      ]): string;
    }>;

    getPayment: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    getPaymentCount: TypedFunctionDescription<{ encode([]: []): string }>;

    getRewardInverse: TypedFunctionDescription<{ encode([]: []): string }>;

    getRewardPayoutInfo: TypedFunctionDescription<{
      encode([_payoutId]: [BigNumberish]): string;
    }>;

    getRootLocalSkill: TypedFunctionDescription<{ encode([]: []): string }>;

    getTask: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    getTaskChangeNonce: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    getTaskCount: TypedFunctionDescription<{ encode([]: []): string }>;

    getTaskRole: TypedFunctionDescription<{
      encode([_id, _role]: [BigNumberish, BigNumberish]): string;
    }>;

    getTaskWorkRatingSecret: TypedFunctionDescription<{
      encode([_id, _role]: [BigNumberish, BigNumberish]): string;
    }>;

    getTaskWorkRatingSecretsInfo: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    getToken: TypedFunctionDescription<{ encode([]: []): string }>;

    getTokenApproval: TypedFunctionDescription<{
      encode([token, spender]: [string, string]): string;
    }>;

    getTotalTokenApproval: TypedFunctionDescription<{
      encode([token]: [string]): string;
    }>;

    getUserRoles: TypedFunctionDescription<{
      encode([_user, _domain]: [string, BigNumberish]): string;
    }>;

    hasInheritedUserRole: TypedFunctionDescription<{
      encode([_user, _domainId, _role, _childSkillIndex, _childDomainId]: [
        string,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    hasUserRole: TypedFunctionDescription<{
      encode([_user, _domainId, _role]: [
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    initialiseColony: TypedFunctionDescription<{
      encode([_colonyNetworkAddress, _token]: [string, string]): string;
    }>;

    initialiseRootLocalSkill: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    installExtension: TypedFunctionDescription<{
      encode([extensionId, version]: [Arrayish, BigNumberish]): string;
    }>;

    isInRecoveryMode: TypedFunctionDescription<{ encode([]: []): string }>;

    lockExpenditure: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    lockToken: TypedFunctionDescription<{ encode([]: []): string }>;

    makeArbitraryTransaction: TypedFunctionDescription<{
      encode([_to, _action]: [string, Arrayish]): string;
    }>;

    makeArbitraryTransactions: TypedFunctionDescription<{
      encode([_targets, _actions, _strict]: [
        string[],
        Arrayish[],
        boolean
      ]): string;
    }>;

    makeExpenditure: TypedFunctionDescription<{
      encode([_permissionDomainId, _childSkillIndex, _domainId]: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    makeSingleArbitraryTransaction: TypedFunctionDescription<{
      encode([_target, _action]: [string, Arrayish]): string;
    }>;

    mintTokens: TypedFunctionDescription<{
      encode([_wad]: [BigNumberish]): string;
    }>;

    mintTokensFor: TypedFunctionDescription<{
      encode([_guy, _wad]: [string, BigNumberish]): string;
    }>;

    moveFundsBetweenPots: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _domainId,
        _fromChildSkillIndex,
        _toChildSkillIndex,
        _fromPot,
        _toPot,
        _amount,
        _token,
      ]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    multicall: TypedFunctionDescription<{
      encode([data]: [Arrayish[]]): string;
    }>;

    numRecoveryRoles: TypedFunctionDescription<{ encode([]: []): string }>;

    obligateStake: TypedFunctionDescription<{
      encode([_user, _domainId, _amount]: [
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    registerColonyLabel: TypedFunctionDescription<{
      encode([colonyName, orbitdb]: [string, string]): string;
    }>;

    removeRecoveryRole: TypedFunctionDescription<{
      encode([_user]: [string]): string;
    }>;

    setAdministrationRole: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _user,
        _domainId,
        _setTo,
      ]: [BigNumberish, BigNumberish, string, BigNumberish, boolean]): string;
    }>;

    setArbitrationRole: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _user,
        _domainId,
        _setTo,
      ]: [BigNumberish, BigNumberish, string, BigNumberish, boolean]): string;
    }>;

    setArchitectureRole: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _user,
        _domainId,
        _setTo,
      ]: [BigNumberish, BigNumberish, string, BigNumberish, boolean]): string;
    }>;

    setDefaultGlobalClaimDelay: TypedFunctionDescription<{
      encode([_globalClaimDelay]: [BigNumberish]): string;
    }>;

    setExpenditureClaimDelay: TypedFunctionDescription<{
      encode([_id, _slot, _claimDelay]: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    setExpenditureClaimDelays: TypedFunctionDescription<{
      encode([_id, _slots, _claimDelays]: [
        BigNumberish,
        BigNumberish[],
        BigNumberish[]
      ]): string;
    }>;

    setExpenditureMetadata: TypedFunctionDescription<{
      encode([_permissionDomainId, _childSkillIndex, _id, _metadata]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    setExpenditurePayout: TypedFunctionDescription<{
      encode([_id, _slot, _token, _amount]: [
        BigNumberish,
        BigNumberish,
        string,
        BigNumberish
      ]): string;
    }>;

    setExpenditurePayoutModifiers: TypedFunctionDescription<{
      encode([_id, _slots, _payoutModifiers]: [
        BigNumberish,
        BigNumberish[],
        BigNumberish[]
      ]): string;
    }>;

    setExpenditurePayouts: TypedFunctionDescription<{
      encode([_id, _slots, _token, _amounts]: [
        BigNumberish,
        BigNumberish[],
        string,
        BigNumberish[]
      ]): string;
    }>;

    setExpenditureRecipient: TypedFunctionDescription<{
      encode([_id, _slot, _recipient]: [
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    setExpenditureRecipients: TypedFunctionDescription<{
      encode([_id, _slots, _recipients]: [
        BigNumberish,
        BigNumberish[],
        string[]
      ]): string;
    }>;

    setExpenditureSkill: TypedFunctionDescription<{
      encode([_id, _slot, _skillId]: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    setExpenditureSkills: TypedFunctionDescription<{
      encode([_id, _slots, _skillIds]: [
        BigNumberish,
        BigNumberish[],
        BigNumberish[]
      ]): string;
    }>;

    setExpenditureState: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _id,
        _storageSlot,
        _mask,
        _keys,
        _value,
      ]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        boolean[],
        Arrayish[],
        Arrayish
      ]): string;
    }>;

    setExpenditureValues: TypedFunctionDescription<{
      encode([
        _id,
        _recipientSlots,
        _recipients,
        _skillIdSlots,
        _skillIds,
        _claimDelaySlots,
        _claimDelays,
        _payoutModifierSlots,
        _payoutModifiers,
        _payoutTokens,
        _payoutSlots,
        _payoutValues,
      ]: [
        BigNumberish,
        BigNumberish[],
        string[],
        BigNumberish[],
        BigNumberish[],
        BigNumberish[],
        BigNumberish[],
        BigNumberish[],
        BigNumberish[],
        string[],
        BigNumberish[][],
        BigNumberish[][]
      ]): string;
    }>;

    setFundingRole: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _user,
        _domainId,
        _setTo,
      ]: [BigNumberish, BigNumberish, string, BigNumberish, boolean]): string;
    }>;

    setRecoveryRole: TypedFunctionDescription<{
      encode([_user]: [string]): string;
    }>;

    setRewardInverse: TypedFunctionDescription<{
      encode([_rewardInverse]: [BigNumberish]): string;
    }>;

    setRootRole: TypedFunctionDescription<{
      encode([_user, _setTo]: [string, boolean]): string;
    }>;

    setStorageSlotRecovery: TypedFunctionDescription<{
      encode([_slot, _value]: [BigNumberish, Arrayish]): string;
    }>;

    setUserRoles: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _user,
        _domainId,
        _roles,
      ]: [BigNumberish, BigNumberish, string, BigNumberish, Arrayish]): string;
    }>;

    startNextRewardPayout: TypedFunctionDescription<{
      encode([_token, key, value, branchMask, siblings]: [
        string,
        Arrayish,
        Arrayish,
        BigNumberish,
        Arrayish[]
      ]): string;
    }>;

    transferExpenditure: TypedFunctionDescription<{
      encode([_id, _newOwner]: [BigNumberish, string]): string;
    }>;

    transferExpenditureViaArbitration: TypedFunctionDescription<{
      encode([_permissionDomainId, _childSkillIndex, _id, _newOwner]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    transferStake: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _obligator,
        _user,
        _domainId,
        _amount,
        _recipient,
      ]: [
        BigNumberish,
        BigNumberish,
        string,
        string,
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    uninstallExtension: TypedFunctionDescription<{
      encode([extensionId]: [Arrayish]): string;
    }>;

    unlockToken: TypedFunctionDescription<{ encode([]: []): string }>;

    unlockTokenForUser: TypedFunctionDescription<{
      encode([user, lockId]: [string, BigNumberish]): string;
    }>;

    updateApprovalAmount: TypedFunctionDescription<{
      encode([token, spender]: [string, string]): string;
    }>;

    updateColonyOrbitDB: TypedFunctionDescription<{
      encode([orbitdb]: [string]): string;
    }>;

    upgrade: TypedFunctionDescription<{
      encode([_newVersion]: [BigNumberish]): string;
    }>;

    upgradeExtension: TypedFunctionDescription<{
      encode([extensionId, newVersion]: [Arrayish, BigNumberish]): string;
    }>;

    userCanSetRoles: TypedFunctionDescription<{
      encode([_user, _domainId, _childSkillIndex, _childDomainId]: [
        string,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    verifyReputationProof: TypedFunctionDescription<{
      encode([key, value, branchMask, siblings]: [
        Arrayish,
        Arrayish,
        BigNumberish,
        Arrayish[]
      ]): string;
    }>;

    version: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    Annotation: TypedEventDescription<{
      encodeTopics([agent, txHash, metadata]: [
        string | null,
        Arrayish | null,
        null
      ]): string[];
    }>;

    ArbitraryReputationUpdate: TypedEventDescription<{
      encodeTopics([agent, user, skillId, amount]: [
        null,
        null,
        null,
        null
      ]): string[];
    }>;

    ArbitraryTransaction: TypedEventDescription<{
      encodeTopics([target, data, success]: [null, null, null]): string[];
    }>;

    ColonyBootstrapped: TypedEventDescription<{
      encodeTopics([agent, users, amounts]: [null, null, null]): string[];
    }>;

    ColonyFundsClaimed: TypedEventDescription<{
      encodeTopics([agent, token, fee, payoutRemainder]: [
        null,
        null,
        null,
        null
      ]): string[];
    }>;

    ColonyFundsMovedBetweenFundingPots: TypedEventDescription<{
      encodeTopics([agent, fromPot, toPot, amount, token]: [
        null,
        BigNumberish | null,
        BigNumberish | null,
        null,
        null
      ]): string[];
    }>;

    ColonyInitialised: TypedEventDescription<{
      encodeTopics([agent, colonyNetwork, token]: [null, null, null]): string[];
    }>;

    ColonyMetadata: TypedEventDescription<{
      encodeTopics([agent, metadata]: [null, null]): string[];
    }>;

    ColonyMetadataDelta: TypedEventDescription<{
      encodeTopics([agent, metadata]: [null, null]): string[];
    }>;

    ColonyRewardInverseSet: TypedEventDescription<{
      encodeTopics([agent, rewardInverse]: [null, null]): string[];
    }>;

    ColonyRoleSet: TypedEventDescription<{
      encodeTopics([agent, user, domainId, role, setTo]: [
        null,
        string | null,
        BigNumberish | null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    ColonyUpgraded: TypedEventDescription<{
      encodeTopics([agent, oldVersion, newVersion]: [
        null,
        null,
        null
      ]): string[];
    }>;

    DomainAdded: TypedEventDescription<{
      encodeTopics([agent, domainId]: [null, null]): string[];
    }>;

    DomainDeprecated: TypedEventDescription<{
      encodeTopics([agent, domainId, deprecated]: [
        null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    DomainMetadata: TypedEventDescription<{
      encodeTopics([agent, domainId, metadata]: [
        null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    ExpenditureAdded: TypedEventDescription<{
      encodeTopics([agent, expenditureId]: [null, null]): string[];
    }>;

    ExpenditureCancelled: TypedEventDescription<{
      encodeTopics([agent, expenditureId]: [
        null,
        BigNumberish | null
      ]): string[];
    }>;

    ExpenditureClaimDelaySet: TypedEventDescription<{
      encodeTopics([agent, expenditureId, slot, claimDelay]: [
        null,
        BigNumberish | null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    ExpenditureFinalized: TypedEventDescription<{
      encodeTopics([agent, expenditureId]: [
        null,
        BigNumberish | null
      ]): string[];
    }>;

    ExpenditureGlobalClaimDelaySet: TypedEventDescription<{
      encodeTopics([agent, globalClaimDelay]: [null, null]): string[];
    }>;

    ExpenditureLocked: TypedEventDescription<{
      encodeTopics([agent, expenditureId]: [
        null,
        BigNumberish | null
      ]): string[];
    }>;

    ExpenditureMetadataSet: TypedEventDescription<{
      encodeTopics([agent, expenditureId, metadata]: [
        null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    ExpenditurePayoutModifierSet: TypedEventDescription<{
      encodeTopics([agent, expenditureId, slot, payoutModifier]: [
        null,
        BigNumberish | null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    ExpenditurePayoutSet: TypedEventDescription<{
      encodeTopics([agent, expenditureId, slot, token, amount]: [
        null,
        BigNumberish | null,
        BigNumberish | null,
        string | null,
        null
      ]): string[];
    }>;

    ExpenditureRecipientSet: TypedEventDescription<{
      encodeTopics([agent, expenditureId, slot, recipient]: [
        null,
        BigNumberish | null,
        BigNumberish | null,
        string | null
      ]): string[];
    }>;

    ExpenditureSkillSet: TypedEventDescription<{
      encodeTopics([agent, expenditureId, slot, skillId]: [
        null,
        BigNumberish | null,
        BigNumberish | null,
        BigNumberish | null
      ]): string[];
    }>;

    ExpenditureStateChanged: TypedEventDescription<{
      encodeTopics([agent, expenditureId, storageSlot, mask, keys, value]: [
        null,
        BigNumberish | null,
        BigNumberish | null,
        null,
        null,
        null
      ]): string[];
    }>;

    ExpenditureTransferred: TypedEventDescription<{
      encodeTopics([agent, expenditureId, owner]: [
        null,
        BigNumberish | null,
        string | null
      ]): string[];
    }>;

    FundingPotAdded: TypedEventDescription<{
      encodeTopics([fundingPotId]: [null]): string[];
    }>;

    LocalSkillAdded: TypedEventDescription<{
      encodeTopics([agent, localSkillId]: [null, null]): string[];
    }>;

    LocalSkillDeprecated: TypedEventDescription<{
      encodeTopics([agent, localSkillId, deprecated]: [
        null,
        null,
        null
      ]): string[];
    }>;

    MetaTransactionExecuted: TypedEventDescription<{
      encodeTopics([userAddress, relayerAddress, payload]: [
        null,
        null,
        null
      ]): string[];
    }>;

    PaymentAdded: TypedEventDescription<{
      encodeTopics([agent, paymentId]: [null, null]): string[];
    }>;

    PaymentFinalized: TypedEventDescription<{
      encodeTopics([agent, paymentId]: [null, BigNumberish | null]): string[];
    }>;

    PaymentPayoutSet: TypedEventDescription<{
      encodeTopics([agent, paymentId, token, amount]: [
        null,
        BigNumberish | null,
        null,
        null
      ]): string[];
    }>;

    PaymentRecipientSet: TypedEventDescription<{
      encodeTopics([agent, paymentId, recipient]: [
        null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    PaymentSkillSet: TypedEventDescription<{
      encodeTopics([agent, paymentId, skillId]: [
        null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    PayoutClaimed: TypedEventDescription<{
      encodeTopics([agent, fundingPotId, token, amount]: [
        null,
        BigNumberish | null,
        null,
        null
      ]): string[];
    }>;

    RecoveryModeEntered: TypedEventDescription<{
      encodeTopics([user]: [null]): string[];
    }>;

    RecoveryModeExitApproved: TypedEventDescription<{
      encodeTopics([user]: [null]): string[];
    }>;

    RecoveryModeExited: TypedEventDescription<{
      encodeTopics([user]: [null]): string[];
    }>;

    RecoveryRoleSet: TypedEventDescription<{
      encodeTopics([user, setTo]: [string | null, null]): string[];
    }>;

    RecoveryStorageSlotSet: TypedEventDescription<{
      encodeTopics([user, slot, fromValue, toValue]: [
        null,
        null,
        null,
        null
      ]): string[];
    }>;

    RewardPayoutClaimed: TypedEventDescription<{
      encodeTopics([rewardPayoutId, user, fee, rewardRemainder]: [
        null,
        null,
        null,
        null
      ]): string[];
    }>;

    RewardPayoutCycleEnded: TypedEventDescription<{
      encodeTopics([agent, rewardPayoutId]: [null, null]): string[];
    }>;

    RewardPayoutCycleStarted: TypedEventDescription<{
      encodeTopics([agent, rewardPayoutId]: [null, null]): string[];
    }>;

    TaskAdded: TypedEventDescription<{
      encodeTopics([agent, taskId]: [null, null]): string[];
    }>;

    TaskBriefSet: TypedEventDescription<{
      encodeTopics([taskId, specificationHash]: [
        BigNumberish | null,
        null
      ]): string[];
    }>;

    TaskCanceled: TypedEventDescription<{
      encodeTopics([taskId]: [BigNumberish | null]): string[];
    }>;

    TaskChangedViaSignatures: TypedEventDescription<{
      encodeTopics([reviewerAddresses]: [null]): string[];
    }>;

    TaskCompleted: TypedEventDescription<{
      encodeTopics([agent, taskId]: [null, BigNumberish | null]): string[];
    }>;

    TaskDeliverableSubmitted: TypedEventDescription<{
      encodeTopics([agent, taskId, deliverableHash]: [
        null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    TaskDueDateSet: TypedEventDescription<{
      encodeTopics([taskId, dueDate]: [BigNumberish | null, null]): string[];
    }>;

    TaskFinalized: TypedEventDescription<{
      encodeTopics([agent, taskId]: [null, BigNumberish | null]): string[];
    }>;

    TaskPayoutSet: TypedEventDescription<{
      encodeTopics([taskId, role, token, amount]: [
        BigNumberish | null,
        null,
        null,
        null
      ]): string[];
    }>;

    TaskRoleUserSet: TypedEventDescription<{
      encodeTopics([taskId, role, user]: [
        BigNumberish | null,
        null,
        string | null
      ]): string[];
    }>;

    TaskSkillSet: TypedEventDescription<{
      encodeTopics([taskId, skillId]: [
        BigNumberish | null,
        BigNumberish | null
      ]): string[];
    }>;

    TaskWorkRatingRevealed: TypedEventDescription<{
      encodeTopics([agent, taskId, role, rating]: [
        null,
        BigNumberish | null,
        null,
        null
      ]): string[];
    }>;

    TokenUnlocked: TypedEventDescription<{
      encodeTopics([agent]: [null]): string[];
    }>;

    TokensBurned: TypedEventDescription<{
      encodeTopics([agent, token, amount]: [null, null, null]): string[];
    }>;

    TokensMinted: TypedEventDescription<{
      encodeTopics([agent, who, amount]: [null, null, null]): string[];
    }>;
  };
}

export class IColony extends Contract {
  connect(signerOrProvider: Signer | Provider | string): IColony;
  attach(addressOrName: string): IColony;
  deployed(): Promise<IColony>;

  on(event: EventFilter | string, listener: Listener): IColony;
  once(event: EventFilter | string, listener: Listener): IColony;
  addListener(eventName: EventFilter | string, listener: Listener): IColony;
  removeAllListeners(eventName: EventFilter | string): IColony;
  removeListener(eventName: any, listener: Listener): IColony;

  interface: IColonyInterface;

  functions: {
    addDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _parentDomainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "addDomain(uint256,uint256,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _parentDomainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "addDomain(uint256,uint256,uint256,string)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _parentDomainId: BigNumberish,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    addLocalSkill(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "addLocalSkill()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    annotateTransaction(
      _txHash: Arrayish,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "annotateTransaction(bytes32,string)"(
      _txHash: Arrayish,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    approveExitRecovery(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "approveExitRecovery()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    approveStake(
      _approvee: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "approveStake(address,uint256,uint256)"(
      _approvee: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    authority(overrides?: TransactionOverrides): Promise<string>;

    "authority()"(overrides?: TransactionOverrides): Promise<string>;

    bootstrapColony(
      _users: string[],
      _amount: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "bootstrapColony(address[],int256[])"(
      _users: string[],
      _amount: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    burnTokens(
      token: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "burnTokens(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    cancelExpenditure(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "cancelExpenditure(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    cancelExpenditureViaArbitration(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "cancelExpenditureViaArbitration(uint256,uint256,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    checkNotAdditionalProtectedVariable(
      _slot: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<void>;

    "checkNotAdditionalProtectedVariable(uint256)"(
      _slot: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<void>;

    claimColonyFunds(
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "claimColonyFunds(address)"(
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    claimExpenditurePayout(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "claimExpenditurePayout(uint256,uint256,address)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    claimRewardPayout(
      _payoutId: BigNumberish,
      _squareRoots: BigNumberish[],
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "claimRewardPayout(uint256,uint256[7],bytes,bytes,uint256,bytes32[])"(
      _payoutId: BigNumberish,
      _squareRoots: BigNumberish[],
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    deobligateStake(
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "deobligateStake(address,uint256,uint256)"(
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    deprecateDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _deprecated: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "deprecateDomain(uint256,uint256,uint256,bool)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _deprecated: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    deprecateExtension(
      extensionId: Arrayish,
      deprecated: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "deprecateExtension(bytes32,bool)"(
      extensionId: Arrayish,
      deprecated: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    deprecateLocalSkill(
      localSkillId: BigNumberish,
      deprecated: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "deprecateLocalSkill(uint256,bool)"(
      localSkillId: BigNumberish,
      deprecated: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    editColony(
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "editColony(string)"(
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    editColonyByDelta(
      _metadataDelta: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "editColonyByDelta(string)"(
      _metadataDelta: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    editDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "editDomain(uint256,uint256,uint256,string)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    emitDomainReputationPenalty(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "emitDomainReputationPenalty(uint256,uint256,uint256,address,int256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    emitDomainReputationReward(
      _domainId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "emitDomainReputationReward(uint256,address,int256)"(
      _domainId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    emitSkillReputationPenalty(
      _skillId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "emitSkillReputationPenalty(uint256,address,int256)"(
      _skillId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    emitSkillReputationReward(
      _skillId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "emitSkillReputationReward(uint256,address,int256)"(
      _skillId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    enterRecoveryMode(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "enterRecoveryMode()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    executeMetaTransaction(
      userAddress: string,
      payload: Arrayish,
      sigR: Arrayish,
      sigS: Arrayish,
      sigV: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(
      userAddress: string,
      payload: Arrayish,
      sigR: Arrayish,
      sigS: Arrayish,
      sigV: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    exitRecoveryMode(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "exitRecoveryMode()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    finalizeExpenditure(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "finalizeExpenditure(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    finalizeExpenditureViaArbitration(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "finalizeExpenditureViaArbitration(uint256,uint256,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    finalizeRewardPayout(
      _payoutId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "finalizeRewardPayout(uint256)"(
      _payoutId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    finishUpgrade(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "finishUpgrade()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getApproval(
      _user: string,
      _obligator: string,
      _domainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getApproval(address,address,uint256)"(
      _user: string,
      _obligator: string,
      _domainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getCapabilityRoles(
      _sig: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "getCapabilityRoles(bytes4)"(
      _sig: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    getColonyNetwork(overrides?: TransactionOverrides): Promise<string>;

    "getColonyNetwork()"(overrides?: TransactionOverrides): Promise<string>;

    getDomain(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [BigNumber, BigNumber] & { skillId: BigNumber; fundingPotId: BigNumber }
    >;

    "getDomain(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [BigNumber, BigNumber] & { skillId: BigNumber; fundingPotId: BigNumber }
    >;

    getDomainCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getDomainCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getDomainFromFundingPot(
      _fundingPotId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getDomainFromFundingPot(uint256)"(
      _fundingPotId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getExpenditure(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [number, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        status: number;
        owner: string;
        fundingPotId: BigNumber;
        domainId: BigNumber;
        finalizedTimestamp: BigNumber;
        globalClaimDelay: BigNumber;
      }
    >;

    "getExpenditure(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [number, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        status: number;
        owner: string;
        fundingPotId: BigNumber;
        domainId: BigNumber;
        finalizedTimestamp: BigNumber;
        globalClaimDelay: BigNumber;
      }
    >;

    getExpenditureCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getExpenditureCount()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getExpenditureSlot(
      _id: BigNumberish,
      _slot: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber[]] & {
        recipient: string;
        claimDelay: BigNumber;
        payoutModifier: BigNumber;
        skills: BigNumber[];
      }
    >;

    "getExpenditureSlot(uint256,uint256)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber[]] & {
        recipient: string;
        claimDelay: BigNumber;
        payoutModifier: BigNumber;
        skills: BigNumber[];
      }
    >;

    getExpenditureSlotPayout(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getExpenditureSlotPayout(uint256,uint256,address)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getFundingPot(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        associatedType: number;
        associatedTypeId: BigNumber;
        payoutsWeCannotMake: BigNumber;
      }
    >;

    "getFundingPot(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        associatedType: number;
        associatedTypeId: BigNumber;
        payoutsWeCannotMake: BigNumber;
      }
    >;

    getFundingPotBalance(
      _potId: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getFundingPotBalance(uint256,address)"(
      _potId: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getFundingPotCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getFundingPotCount()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getFundingPotPayout(
      _potId: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getFundingPotPayout(uint256,address)"(
      _potId: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getMetatransactionNonce(
      userAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getMetatransactionNonce(address)"(
      userAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getNonRewardPotsTotal(
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getNonRewardPotsTotal(address)"(
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getObligation(
      _user: string,
      _obligator: string,
      _domainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getObligation(address,address,uint256)"(
      _user: string,
      _obligator: string,
      _domainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getPayment(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [string, boolean, BigNumber, BigNumber, BigNumber[]] & {
        recipient: string;
        finalized: boolean;
        fundingPotId: BigNumber;
        domainId: BigNumber;
        skills: BigNumber[];
      }
    >;

    "getPayment(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [string, boolean, BigNumber, BigNumber, BigNumber[]] & {
        recipient: string;
        finalized: boolean;
        fundingPotId: BigNumber;
        domainId: BigNumber;
        skills: BigNumber[];
      }
    >;

    getPaymentCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getPaymentCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getRewardInverse(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getRewardInverse()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getRewardPayoutInfo(
      _payoutId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        reputationState: string;
        colonyWideReputation: BigNumber;
        totalTokens: BigNumber;
        amount: BigNumber;
        tokenAddress: string;
        blockTimestamp: BigNumber;
        amountRemaining: BigNumber;
        finalized: boolean;
      }
    >;

    "getRewardPayoutInfo(uint256)"(
      _payoutId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        reputationState: string;
        colonyWideReputation: BigNumber;
        totalTokens: BigNumber;
        amount: BigNumber;
        tokenAddress: string;
        blockTimestamp: BigNumber;
        amountRemaining: BigNumber;
        finalized: boolean;
      }
    >;

    getRootLocalSkill(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getRootLocalSkill()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getTask(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[]
      ] & {
        specificationHash: string;
        deliverableHash: string;
        status: number;
        dueDate: BigNumber;
        fundingPotId: BigNumber;
        completionTimestamp: BigNumber;
        domainId: BigNumber;
        skillIds: BigNumber[];
      }
    >;

    "getTask(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[]
      ] & {
        specificationHash: string;
        deliverableHash: string;
        status: number;
        dueDate: BigNumber;
        fundingPotId: BigNumber;
        completionTimestamp: BigNumber;
        domainId: BigNumber;
        skillIds: BigNumber[];
      }
    >;

    getTaskChangeNonce(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getTaskChangeNonce(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getTaskCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getTaskCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getTaskRole(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [string, boolean, number] & {
        user: string;
        rateFail: boolean;
        rating: number;
      }
    >;

    "getTaskRole(uint256,uint8)"(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [string, boolean, number] & {
        user: string;
        rateFail: boolean;
        rating: number;
      }
    >;

    getTaskWorkRatingSecret(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "getTaskWorkRatingSecret(uint256,uint8)"(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    getTaskWorkRatingSecretsInfo(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        nSecrets: BigNumber;
        lastSubmittedAt: BigNumber;
      }
    >;

    "getTaskWorkRatingSecretsInfo(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        nSecrets: BigNumber;
        lastSubmittedAt: BigNumber;
      }
    >;

    getToken(overrides?: TransactionOverrides): Promise<string>;

    "getToken()"(overrides?: TransactionOverrides): Promise<string>;

    getTokenApproval(
      token: string,
      spender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getTokenApproval(address,address)"(
      token: string,
      spender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getTotalTokenApproval(
      token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getTotalTokenApproval(address)"(
      token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getUserRoles(
      _user: string,
      _domain: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "getUserRoles(address,uint256)"(
      _user: string,
      _domain: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    hasInheritedUserRole(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      _childSkillIndex: BigNumberish,
      _childDomainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "hasInheritedUserRole(address,uint256,uint8,uint256,uint256)"(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      _childSkillIndex: BigNumberish,
      _childDomainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    hasUserRole(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "hasUserRole(address,uint256,uint8)"(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    initialiseColony(
      _colonyNetworkAddress: string,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "initialiseColony(address,address)"(
      _colonyNetworkAddress: string,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    initialiseRootLocalSkill(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "initialiseRootLocalSkill()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    installExtension(
      extensionId: Arrayish,
      version: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "installExtension(bytes32,uint256)"(
      extensionId: Arrayish,
      version: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    isInRecoveryMode(overrides?: TransactionOverrides): Promise<boolean>;

    "isInRecoveryMode()"(overrides?: TransactionOverrides): Promise<boolean>;

    lockExpenditure(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "lockExpenditure(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    lockToken(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    "lockToken()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    makeArbitraryTransaction(
      _to: string,
      _action: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "makeArbitraryTransaction(address,bytes)"(
      _to: string,
      _action: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    makeArbitraryTransactions(
      _targets: string[],
      _actions: Arrayish[],
      _strict: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "makeArbitraryTransactions(address[],bytes[],bool)"(
      _targets: string[],
      _actions: Arrayish[],
      _strict: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    makeExpenditure(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "makeExpenditure(uint256,uint256,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    makeSingleArbitraryTransaction(
      _target: string,
      _action: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "makeSingleArbitraryTransaction(address,bytes)"(
      _target: string,
      _action: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    mintTokens(
      _wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "mintTokens(uint256)"(
      _wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    mintTokensFor(
      _guy: string,
      _wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "mintTokensFor(address,uint256)"(
      _guy: string,
      _wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    moveFundsBetweenPots(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _fromPot: BigNumberish,
      _toPot: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _fromPot: BigNumberish,
      _toPot: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,address)"(
      _permissionDomainId: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _fromPot: BigNumberish,
      _toPot: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    multicall(
      data: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "multicall(bytes[])"(
      data: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    numRecoveryRoles(overrides?: TransactionOverrides): Promise<BigNumber>;

    "numRecoveryRoles()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    obligateStake(
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "obligateStake(address,uint256,uint256)"(
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    owner(overrides?: TransactionOverrides): Promise<string>;

    "owner()"(overrides?: TransactionOverrides): Promise<string>;

    registerColonyLabel(
      colonyName: string,
      orbitdb: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "registerColonyLabel(string,string)"(
      colonyName: string,
      orbitdb: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    removeRecoveryRole(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "removeRecoveryRole(address)"(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setAdministrationRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setAdministrationRole(uint256,uint256,address,uint256,bool)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setArbitrationRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setArbitrationRole(uint256,uint256,address,uint256,bool)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setArchitectureRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setArchitectureRole(uint256,uint256,address,uint256,bool)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setDefaultGlobalClaimDelay(
      _globalClaimDelay: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setDefaultGlobalClaimDelay(uint256)"(
      _globalClaimDelay: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setExpenditureClaimDelay(
      _id: BigNumberish,
      _slot: BigNumberish,
      _claimDelay: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setExpenditureClaimDelay(uint256,uint256,uint256)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      _claimDelay: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setExpenditureClaimDelays(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _claimDelays: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setExpenditureClaimDelays(uint256,uint256[],uint256[])"(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _claimDelays: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setExpenditureMetadata(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setExpenditureMetadata(uint256,uint256,uint256,string)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setExpenditureMetadata(uint256,string)"(
      _id: BigNumberish,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setExpenditurePayout(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setExpenditurePayout(uint256,uint256,address,uint256)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setExpenditurePayout(uint256,uint256,uint256,uint256,address,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setExpenditurePayoutModifiers(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _payoutModifiers: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setExpenditurePayoutModifiers(uint256,uint256[],int256[])"(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _payoutModifiers: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setExpenditurePayouts(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _token: string,
      _amounts: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setExpenditurePayouts(uint256,uint256[],address,uint256[])"(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _token: string,
      _amounts: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setExpenditureRecipient(
      _id: BigNumberish,
      _slot: BigNumberish,
      _recipient: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setExpenditureRecipient(uint256,uint256,address)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      _recipient: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setExpenditureRecipients(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _recipients: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setExpenditureRecipients(uint256,uint256[],address[])"(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _recipients: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setExpenditureSkill(
      _id: BigNumberish,
      _slot: BigNumberish,
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setExpenditureSkill(uint256,uint256,uint256)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setExpenditureSkills(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _skillIds: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setExpenditureSkills(uint256,uint256[],uint256[])"(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _skillIds: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setExpenditureState(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _storageSlot: BigNumberish,
      _mask: boolean[],
      _keys: Arrayish[],
      _value: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setExpenditureState(uint256,uint256,uint256,uint256,bool[],bytes32[],bytes32)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _storageSlot: BigNumberish,
      _mask: boolean[],
      _keys: Arrayish[],
      _value: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setExpenditureValues(
      _id: BigNumberish,
      _recipientSlots: BigNumberish[],
      _recipients: string[],
      _skillIdSlots: BigNumberish[],
      _skillIds: BigNumberish[],
      _claimDelaySlots: BigNumberish[],
      _claimDelays: BigNumberish[],
      _payoutModifierSlots: BigNumberish[],
      _payoutModifiers: BigNumberish[],
      _payoutTokens: string[],
      _payoutSlots: BigNumberish[][],
      _payoutValues: BigNumberish[][],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setExpenditureValues(uint256,uint256[],address[],uint256[],uint256[],uint256[],uint256[],uint256[],int256[],address[],uint256[][],uint256[][])"(
      _id: BigNumberish,
      _recipientSlots: BigNumberish[],
      _recipients: string[],
      _skillIdSlots: BigNumberish[],
      _skillIds: BigNumberish[],
      _claimDelaySlots: BigNumberish[],
      _claimDelays: BigNumberish[],
      _payoutModifierSlots: BigNumberish[],
      _payoutModifiers: BigNumberish[],
      _payoutTokens: string[],
      _payoutSlots: BigNumberish[][],
      _payoutValues: BigNumberish[][],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setFundingRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setFundingRole(uint256,uint256,address,uint256,bool)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setRecoveryRole(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setRecoveryRole(address)"(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setRewardInverse(
      _rewardInverse: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setRewardInverse(uint256)"(
      _rewardInverse: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setRootRole(
      _user: string,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setRootRole(address,bool)"(
      _user: string,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setStorageSlotRecovery(
      _slot: BigNumberish,
      _value: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setStorageSlotRecovery(uint256,bytes32)"(
      _slot: BigNumberish,
      _value: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setUserRoles(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _roles: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setUserRoles(uint256,uint256,address,uint256,bytes32)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _roles: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    startNextRewardPayout(
      _token: string,
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "startNextRewardPayout(address,bytes,bytes,uint256,bytes32[])"(
      _token: string,
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferExpenditure(
      _id: BigNumberish,
      _newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "transferExpenditure(uint256,address)"(
      _id: BigNumberish,
      _newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferExpenditureViaArbitration(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "transferExpenditureViaArbitration(uint256,uint256,uint256,address)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferStake(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _obligator: string,
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      _recipient: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "transferStake(uint256,uint256,address,address,uint256,uint256,address)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _obligator: string,
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      _recipient: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    uninstallExtension(
      extensionId: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "uninstallExtension(bytes32)"(
      extensionId: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    unlockToken(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    "unlockToken()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    unlockTokenForUser(
      user: string,
      lockId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "unlockTokenForUser(address,uint256)"(
      user: string,
      lockId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    updateApprovalAmount(
      token: string,
      spender: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "updateApprovalAmount(address,address)"(
      token: string,
      spender: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    updateColonyOrbitDB(
      orbitdb: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "updateColonyOrbitDB(string)"(
      orbitdb: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    upgrade(
      _newVersion: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "upgrade(uint256)"(
      _newVersion: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    upgradeExtension(
      extensionId: Arrayish,
      newVersion: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "upgradeExtension(bytes32,uint256)"(
      extensionId: Arrayish,
      newVersion: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    userCanSetRoles(
      _user: string,
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _childDomainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "userCanSetRoles(address,uint256,uint256,uint256)"(
      _user: string,
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _childDomainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    verifyReputationProof(
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "verifyReputationProof(bytes,bytes,uint256,bytes32[])"(
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    version(overrides?: TransactionOverrides): Promise<BigNumber>;

    "version()"(overrides?: TransactionOverrides): Promise<BigNumber>;
  };

  addDomain(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _parentDomainId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "addDomain(uint256,uint256,uint256)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _parentDomainId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "addDomain(uint256,uint256,uint256,string)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _parentDomainId: BigNumberish,
    _metadata: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  addLocalSkill(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  "addLocalSkill()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  annotateTransaction(
    _txHash: Arrayish,
    _metadata: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "annotateTransaction(bytes32,string)"(
    _txHash: Arrayish,
    _metadata: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  approveExitRecovery(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "approveExitRecovery()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  approveStake(
    _approvee: string,
    _domainId: BigNumberish,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "approveStake(address,uint256,uint256)"(
    _approvee: string,
    _domainId: BigNumberish,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  authority(overrides?: TransactionOverrides): Promise<string>;

  "authority()"(overrides?: TransactionOverrides): Promise<string>;

  bootstrapColony(
    _users: string[],
    _amount: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "bootstrapColony(address[],int256[])"(
    _users: string[],
    _amount: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  burnTokens(
    token: string,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "burnTokens(address,uint256)"(
    token: string,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  cancelExpenditure(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "cancelExpenditure(uint256)"(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  cancelExpenditureViaArbitration(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "cancelExpenditureViaArbitration(uint256,uint256,uint256)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  checkNotAdditionalProtectedVariable(
    _slot: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<void>;

  "checkNotAdditionalProtectedVariable(uint256)"(
    _slot: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<void>;

  claimColonyFunds(
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "claimColonyFunds(address)"(
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  claimExpenditurePayout(
    _id: BigNumberish,
    _slot: BigNumberish,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "claimExpenditurePayout(uint256,uint256,address)"(
    _id: BigNumberish,
    _slot: BigNumberish,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  claimRewardPayout(
    _payoutId: BigNumberish,
    _squareRoots: BigNumberish[],
    key: Arrayish,
    value: Arrayish,
    branchMask: BigNumberish,
    siblings: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "claimRewardPayout(uint256,uint256[7],bytes,bytes,uint256,bytes32[])"(
    _payoutId: BigNumberish,
    _squareRoots: BigNumberish[],
    key: Arrayish,
    value: Arrayish,
    branchMask: BigNumberish,
    siblings: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  deobligateStake(
    _user: string,
    _domainId: BigNumberish,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "deobligateStake(address,uint256,uint256)"(
    _user: string,
    _domainId: BigNumberish,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  deprecateDomain(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _domainId: BigNumberish,
    _deprecated: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "deprecateDomain(uint256,uint256,uint256,bool)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _domainId: BigNumberish,
    _deprecated: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  deprecateExtension(
    extensionId: Arrayish,
    deprecated: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "deprecateExtension(bytes32,bool)"(
    extensionId: Arrayish,
    deprecated: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  deprecateLocalSkill(
    localSkillId: BigNumberish,
    deprecated: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "deprecateLocalSkill(uint256,bool)"(
    localSkillId: BigNumberish,
    deprecated: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  editColony(
    _metadata: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "editColony(string)"(
    _metadata: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  editColonyByDelta(
    _metadataDelta: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "editColonyByDelta(string)"(
    _metadataDelta: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  editDomain(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _domainId: BigNumberish,
    _metadata: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "editDomain(uint256,uint256,uint256,string)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _domainId: BigNumberish,
    _metadata: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  emitDomainReputationPenalty(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _domainId: BigNumberish,
    _user: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "emitDomainReputationPenalty(uint256,uint256,uint256,address,int256)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _domainId: BigNumberish,
    _user: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  emitDomainReputationReward(
    _domainId: BigNumberish,
    _user: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "emitDomainReputationReward(uint256,address,int256)"(
    _domainId: BigNumberish,
    _user: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  emitSkillReputationPenalty(
    _skillId: BigNumberish,
    _user: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "emitSkillReputationPenalty(uint256,address,int256)"(
    _skillId: BigNumberish,
    _user: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  emitSkillReputationReward(
    _skillId: BigNumberish,
    _user: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "emitSkillReputationReward(uint256,address,int256)"(
    _skillId: BigNumberish,
    _user: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  enterRecoveryMode(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "enterRecoveryMode()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  executeMetaTransaction(
    userAddress: string,
    payload: Arrayish,
    sigR: Arrayish,
    sigS: Arrayish,
    sigV: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(
    userAddress: string,
    payload: Arrayish,
    sigR: Arrayish,
    sigS: Arrayish,
    sigV: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  exitRecoveryMode(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "exitRecoveryMode()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  finalizeExpenditure(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "finalizeExpenditure(uint256)"(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  finalizeExpenditureViaArbitration(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "finalizeExpenditureViaArbitration(uint256,uint256,uint256)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  finalizeRewardPayout(
    _payoutId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "finalizeRewardPayout(uint256)"(
    _payoutId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  finishUpgrade(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  "finishUpgrade()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getApproval(
    _user: string,
    _obligator: string,
    _domainId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getApproval(address,address,uint256)"(
    _user: string,
    _obligator: string,
    _domainId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getCapabilityRoles(
    _sig: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "getCapabilityRoles(bytes4)"(
    _sig: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  getColonyNetwork(overrides?: TransactionOverrides): Promise<string>;

  "getColonyNetwork()"(overrides?: TransactionOverrides): Promise<string>;

  getDomain(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [BigNumber, BigNumber] & { skillId: BigNumber; fundingPotId: BigNumber }
  >;

  "getDomain(uint256)"(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [BigNumber, BigNumber] & { skillId: BigNumber; fundingPotId: BigNumber }
  >;

  getDomainCount(overrides?: TransactionOverrides): Promise<BigNumber>;

  "getDomainCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  getDomainFromFundingPot(
    _fundingPotId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getDomainFromFundingPot(uint256)"(
    _fundingPotId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getExpenditure(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [number, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      status: number;
      owner: string;
      fundingPotId: BigNumber;
      domainId: BigNumber;
      finalizedTimestamp: BigNumber;
      globalClaimDelay: BigNumber;
    }
  >;

  "getExpenditure(uint256)"(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [number, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      status: number;
      owner: string;
      fundingPotId: BigNumber;
      domainId: BigNumber;
      finalizedTimestamp: BigNumber;
      globalClaimDelay: BigNumber;
    }
  >;

  getExpenditureCount(overrides?: TransactionOverrides): Promise<BigNumber>;

  "getExpenditureCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  getExpenditureSlot(
    _id: BigNumberish,
    _slot: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber[]] & {
      recipient: string;
      claimDelay: BigNumber;
      payoutModifier: BigNumber;
      skills: BigNumber[];
    }
  >;

  "getExpenditureSlot(uint256,uint256)"(
    _id: BigNumberish,
    _slot: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber[]] & {
      recipient: string;
      claimDelay: BigNumber;
      payoutModifier: BigNumber;
      skills: BigNumber[];
    }
  >;

  getExpenditureSlotPayout(
    _id: BigNumberish,
    _slot: BigNumberish,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getExpenditureSlotPayout(uint256,uint256,address)"(
    _id: BigNumberish,
    _slot: BigNumberish,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getFundingPot(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [number, BigNumber, BigNumber] & {
      associatedType: number;
      associatedTypeId: BigNumber;
      payoutsWeCannotMake: BigNumber;
    }
  >;

  "getFundingPot(uint256)"(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [number, BigNumber, BigNumber] & {
      associatedType: number;
      associatedTypeId: BigNumber;
      payoutsWeCannotMake: BigNumber;
    }
  >;

  getFundingPotBalance(
    _potId: BigNumberish,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getFundingPotBalance(uint256,address)"(
    _potId: BigNumberish,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getFundingPotCount(overrides?: TransactionOverrides): Promise<BigNumber>;

  "getFundingPotCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  getFundingPotPayout(
    _potId: BigNumberish,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getFundingPotPayout(uint256,address)"(
    _potId: BigNumberish,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getMetatransactionNonce(
    userAddress: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getMetatransactionNonce(address)"(
    userAddress: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getNonRewardPotsTotal(
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getNonRewardPotsTotal(address)"(
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getObligation(
    _user: string,
    _obligator: string,
    _domainId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getObligation(address,address,uint256)"(
    _user: string,
    _obligator: string,
    _domainId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getPayment(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [string, boolean, BigNumber, BigNumber, BigNumber[]] & {
      recipient: string;
      finalized: boolean;
      fundingPotId: BigNumber;
      domainId: BigNumber;
      skills: BigNumber[];
    }
  >;

  "getPayment(uint256)"(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [string, boolean, BigNumber, BigNumber, BigNumber[]] & {
      recipient: string;
      finalized: boolean;
      fundingPotId: BigNumber;
      domainId: BigNumber;
      skills: BigNumber[];
    }
  >;

  getPaymentCount(overrides?: TransactionOverrides): Promise<BigNumber>;

  "getPaymentCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  getRewardInverse(overrides?: TransactionOverrides): Promise<BigNumber>;

  "getRewardInverse()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  getRewardPayoutInfo(
    _payoutId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      reputationState: string;
      colonyWideReputation: BigNumber;
      totalTokens: BigNumber;
      amount: BigNumber;
      tokenAddress: string;
      blockTimestamp: BigNumber;
      amountRemaining: BigNumber;
      finalized: boolean;
    }
  >;

  "getRewardPayoutInfo(uint256)"(
    _payoutId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      reputationState: string;
      colonyWideReputation: BigNumber;
      totalTokens: BigNumber;
      amount: BigNumber;
      tokenAddress: string;
      blockTimestamp: BigNumber;
      amountRemaining: BigNumber;
      finalized: boolean;
    }
  >;

  getRootLocalSkill(overrides?: TransactionOverrides): Promise<BigNumber>;

  "getRootLocalSkill()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  getTask(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [
      string,
      string,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber[]
    ] & {
      specificationHash: string;
      deliverableHash: string;
      status: number;
      dueDate: BigNumber;
      fundingPotId: BigNumber;
      completionTimestamp: BigNumber;
      domainId: BigNumber;
      skillIds: BigNumber[];
    }
  >;

  "getTask(uint256)"(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [
      string,
      string,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber[]
    ] & {
      specificationHash: string;
      deliverableHash: string;
      status: number;
      dueDate: BigNumber;
      fundingPotId: BigNumber;
      completionTimestamp: BigNumber;
      domainId: BigNumber;
      skillIds: BigNumber[];
    }
  >;

  getTaskChangeNonce(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getTaskChangeNonce(uint256)"(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getTaskCount(overrides?: TransactionOverrides): Promise<BigNumber>;

  "getTaskCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  getTaskRole(
    _id: BigNumberish,
    _role: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [string, boolean, number] & {
      user: string;
      rateFail: boolean;
      rating: number;
    }
  >;

  "getTaskRole(uint256,uint8)"(
    _id: BigNumberish,
    _role: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [string, boolean, number] & {
      user: string;
      rateFail: boolean;
      rating: number;
    }
  >;

  getTaskWorkRatingSecret(
    _id: BigNumberish,
    _role: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "getTaskWorkRatingSecret(uint256,uint8)"(
    _id: BigNumberish,
    _role: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  getTaskWorkRatingSecretsInfo(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [BigNumber, BigNumber] & { nSecrets: BigNumber; lastSubmittedAt: BigNumber }
  >;

  "getTaskWorkRatingSecretsInfo(uint256)"(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [BigNumber, BigNumber] & { nSecrets: BigNumber; lastSubmittedAt: BigNumber }
  >;

  getToken(overrides?: TransactionOverrides): Promise<string>;

  "getToken()"(overrides?: TransactionOverrides): Promise<string>;

  getTokenApproval(
    token: string,
    spender: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getTokenApproval(address,address)"(
    token: string,
    spender: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getTotalTokenApproval(
    token: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getTotalTokenApproval(address)"(
    token: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getUserRoles(
    _user: string,
    _domain: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "getUserRoles(address,uint256)"(
    _user: string,
    _domain: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  hasInheritedUserRole(
    _user: string,
    _domainId: BigNumberish,
    _role: BigNumberish,
    _childSkillIndex: BigNumberish,
    _childDomainId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "hasInheritedUserRole(address,uint256,uint8,uint256,uint256)"(
    _user: string,
    _domainId: BigNumberish,
    _role: BigNumberish,
    _childSkillIndex: BigNumberish,
    _childDomainId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  hasUserRole(
    _user: string,
    _domainId: BigNumberish,
    _role: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "hasUserRole(address,uint256,uint8)"(
    _user: string,
    _domainId: BigNumberish,
    _role: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  initialiseColony(
    _colonyNetworkAddress: string,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "initialiseColony(address,address)"(
    _colonyNetworkAddress: string,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  initialiseRootLocalSkill(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "initialiseRootLocalSkill()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  installExtension(
    extensionId: Arrayish,
    version: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "installExtension(bytes32,uint256)"(
    extensionId: Arrayish,
    version: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  isInRecoveryMode(overrides?: TransactionOverrides): Promise<boolean>;

  "isInRecoveryMode()"(overrides?: TransactionOverrides): Promise<boolean>;

  lockExpenditure(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "lockExpenditure(uint256)"(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  lockToken(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  "lockToken()"(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  makeArbitraryTransaction(
    _to: string,
    _action: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "makeArbitraryTransaction(address,bytes)"(
    _to: string,
    _action: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  makeArbitraryTransactions(
    _targets: string[],
    _actions: Arrayish[],
    _strict: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "makeArbitraryTransactions(address[],bytes[],bool)"(
    _targets: string[],
    _actions: Arrayish[],
    _strict: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  makeExpenditure(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _domainId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "makeExpenditure(uint256,uint256,uint256)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _domainId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  makeSingleArbitraryTransaction(
    _target: string,
    _action: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "makeSingleArbitraryTransaction(address,bytes)"(
    _target: string,
    _action: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  mintTokens(
    _wad: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "mintTokens(uint256)"(
    _wad: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  mintTokensFor(
    _guy: string,
    _wad: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "mintTokensFor(address,uint256)"(
    _guy: string,
    _wad: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  moveFundsBetweenPots(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _domainId: BigNumberish,
    _fromChildSkillIndex: BigNumberish,
    _toChildSkillIndex: BigNumberish,
    _fromPot: BigNumberish,
    _toPot: BigNumberish,
    _amount: BigNumberish,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _domainId: BigNumberish,
    _fromChildSkillIndex: BigNumberish,
    _toChildSkillIndex: BigNumberish,
    _fromPot: BigNumberish,
    _toPot: BigNumberish,
    _amount: BigNumberish,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,address)"(
    _permissionDomainId: BigNumberish,
    _fromChildSkillIndex: BigNumberish,
    _toChildSkillIndex: BigNumberish,
    _fromPot: BigNumberish,
    _toPot: BigNumberish,
    _amount: BigNumberish,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  multicall(
    data: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "multicall(bytes[])"(
    data: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  numRecoveryRoles(overrides?: TransactionOverrides): Promise<BigNumber>;

  "numRecoveryRoles()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  obligateStake(
    _user: string,
    _domainId: BigNumberish,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "obligateStake(address,uint256,uint256)"(
    _user: string,
    _domainId: BigNumberish,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  owner(overrides?: TransactionOverrides): Promise<string>;

  "owner()"(overrides?: TransactionOverrides): Promise<string>;

  registerColonyLabel(
    colonyName: string,
    orbitdb: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "registerColonyLabel(string,string)"(
    colonyName: string,
    orbitdb: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  removeRecoveryRole(
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "removeRecoveryRole(address)"(
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setAdministrationRole(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setAdministrationRole(uint256,uint256,address,uint256,bool)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setArbitrationRole(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setArbitrationRole(uint256,uint256,address,uint256,bool)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setArchitectureRole(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setArchitectureRole(uint256,uint256,address,uint256,bool)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setDefaultGlobalClaimDelay(
    _globalClaimDelay: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setDefaultGlobalClaimDelay(uint256)"(
    _globalClaimDelay: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setExpenditureClaimDelay(
    _id: BigNumberish,
    _slot: BigNumberish,
    _claimDelay: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setExpenditureClaimDelay(uint256,uint256,uint256)"(
    _id: BigNumberish,
    _slot: BigNumberish,
    _claimDelay: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setExpenditureClaimDelays(
    _id: BigNumberish,
    _slots: BigNumberish[],
    _claimDelays: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setExpenditureClaimDelays(uint256,uint256[],uint256[])"(
    _id: BigNumberish,
    _slots: BigNumberish[],
    _claimDelays: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setExpenditureMetadata(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _metadata: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setExpenditureMetadata(uint256,uint256,uint256,string)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _metadata: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setExpenditureMetadata(uint256,string)"(
    _id: BigNumberish,
    _metadata: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setExpenditurePayout(
    _id: BigNumberish,
    _slot: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setExpenditurePayout(uint256,uint256,address,uint256)"(
    _id: BigNumberish,
    _slot: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setExpenditurePayout(uint256,uint256,uint256,uint256,address,uint256)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _slot: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setExpenditurePayoutModifiers(
    _id: BigNumberish,
    _slots: BigNumberish[],
    _payoutModifiers: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setExpenditurePayoutModifiers(uint256,uint256[],int256[])"(
    _id: BigNumberish,
    _slots: BigNumberish[],
    _payoutModifiers: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setExpenditurePayouts(
    _id: BigNumberish,
    _slots: BigNumberish[],
    _token: string,
    _amounts: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setExpenditurePayouts(uint256,uint256[],address,uint256[])"(
    _id: BigNumberish,
    _slots: BigNumberish[],
    _token: string,
    _amounts: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setExpenditureRecipient(
    _id: BigNumberish,
    _slot: BigNumberish,
    _recipient: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setExpenditureRecipient(uint256,uint256,address)"(
    _id: BigNumberish,
    _slot: BigNumberish,
    _recipient: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setExpenditureRecipients(
    _id: BigNumberish,
    _slots: BigNumberish[],
    _recipients: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setExpenditureRecipients(uint256,uint256[],address[])"(
    _id: BigNumberish,
    _slots: BigNumberish[],
    _recipients: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setExpenditureSkill(
    _id: BigNumberish,
    _slot: BigNumberish,
    _skillId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setExpenditureSkill(uint256,uint256,uint256)"(
    _id: BigNumberish,
    _slot: BigNumberish,
    _skillId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setExpenditureSkills(
    _id: BigNumberish,
    _slots: BigNumberish[],
    _skillIds: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setExpenditureSkills(uint256,uint256[],uint256[])"(
    _id: BigNumberish,
    _slots: BigNumberish[],
    _skillIds: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setExpenditureState(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _storageSlot: BigNumberish,
    _mask: boolean[],
    _keys: Arrayish[],
    _value: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setExpenditureState(uint256,uint256,uint256,uint256,bool[],bytes32[],bytes32)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _storageSlot: BigNumberish,
    _mask: boolean[],
    _keys: Arrayish[],
    _value: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setExpenditureValues(
    _id: BigNumberish,
    _recipientSlots: BigNumberish[],
    _recipients: string[],
    _skillIdSlots: BigNumberish[],
    _skillIds: BigNumberish[],
    _claimDelaySlots: BigNumberish[],
    _claimDelays: BigNumberish[],
    _payoutModifierSlots: BigNumberish[],
    _payoutModifiers: BigNumberish[],
    _payoutTokens: string[],
    _payoutSlots: BigNumberish[][],
    _payoutValues: BigNumberish[][],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setExpenditureValues(uint256,uint256[],address[],uint256[],uint256[],uint256[],uint256[],uint256[],int256[],address[],uint256[][],uint256[][])"(
    _id: BigNumberish,
    _recipientSlots: BigNumberish[],
    _recipients: string[],
    _skillIdSlots: BigNumberish[],
    _skillIds: BigNumberish[],
    _claimDelaySlots: BigNumberish[],
    _claimDelays: BigNumberish[],
    _payoutModifierSlots: BigNumberish[],
    _payoutModifiers: BigNumberish[],
    _payoutTokens: string[],
    _payoutSlots: BigNumberish[][],
    _payoutValues: BigNumberish[][],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setFundingRole(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setFundingRole(uint256,uint256,address,uint256,bool)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setRecoveryRole(
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setRecoveryRole(address)"(
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setRewardInverse(
    _rewardInverse: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setRewardInverse(uint256)"(
    _rewardInverse: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setRootRole(
    _user: string,
    _setTo: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setRootRole(address,bool)"(
    _user: string,
    _setTo: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setStorageSlotRecovery(
    _slot: BigNumberish,
    _value: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setStorageSlotRecovery(uint256,bytes32)"(
    _slot: BigNumberish,
    _value: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setUserRoles(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _roles: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setUserRoles(uint256,uint256,address,uint256,bytes32)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _roles: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  startNextRewardPayout(
    _token: string,
    key: Arrayish,
    value: Arrayish,
    branchMask: BigNumberish,
    siblings: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "startNextRewardPayout(address,bytes,bytes,uint256,bytes32[])"(
    _token: string,
    key: Arrayish,
    value: Arrayish,
    branchMask: BigNumberish,
    siblings: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferExpenditure(
    _id: BigNumberish,
    _newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "transferExpenditure(uint256,address)"(
    _id: BigNumberish,
    _newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferExpenditureViaArbitration(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "transferExpenditureViaArbitration(uint256,uint256,uint256,address)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferStake(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _obligator: string,
    _user: string,
    _domainId: BigNumberish,
    _amount: BigNumberish,
    _recipient: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "transferStake(uint256,uint256,address,address,uint256,uint256,address)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _obligator: string,
    _user: string,
    _domainId: BigNumberish,
    _amount: BigNumberish,
    _recipient: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  uninstallExtension(
    extensionId: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "uninstallExtension(bytes32)"(
    extensionId: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  unlockToken(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  "unlockToken()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  unlockTokenForUser(
    user: string,
    lockId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "unlockTokenForUser(address,uint256)"(
    user: string,
    lockId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  updateApprovalAmount(
    token: string,
    spender: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "updateApprovalAmount(address,address)"(
    token: string,
    spender: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  updateColonyOrbitDB(
    orbitdb: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "updateColonyOrbitDB(string)"(
    orbitdb: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  upgrade(
    _newVersion: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "upgrade(uint256)"(
    _newVersion: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  upgradeExtension(
    extensionId: Arrayish,
    newVersion: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "upgradeExtension(bytes32,uint256)"(
    extensionId: Arrayish,
    newVersion: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  userCanSetRoles(
    _user: string,
    _domainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _childDomainId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "userCanSetRoles(address,uint256,uint256,uint256)"(
    _user: string,
    _domainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _childDomainId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  verifyReputationProof(
    key: Arrayish,
    value: Arrayish,
    branchMask: BigNumberish,
    siblings: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "verifyReputationProof(bytes,bytes,uint256,bytes32[])"(
    key: Arrayish,
    value: Arrayish,
    branchMask: BigNumberish,
    siblings: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  version(overrides?: TransactionOverrides): Promise<BigNumber>;

  "version()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  filters: {
    Annotation(
      agent: string | null,
      txHash: Arrayish | null,
      metadata: null
    ): EventFilter;

    ArbitraryReputationUpdate(
      agent: null,
      user: null,
      skillId: null,
      amount: null
    ): EventFilter;

    ArbitraryTransaction(target: null, data: null, success: null): EventFilter;

    ColonyBootstrapped(agent: null, users: null, amounts: null): EventFilter;

    ColonyFundsClaimed(
      agent: null,
      token: null,
      fee: null,
      payoutRemainder: null
    ): EventFilter;

    ColonyFundsMovedBetweenFundingPots(
      agent: null,
      fromPot: BigNumberish | null,
      toPot: BigNumberish | null,
      amount: null,
      token: null
    ): EventFilter;

    ColonyInitialised(
      agent: null,
      colonyNetwork: null,
      token: null
    ): EventFilter;

    ColonyMetadata(agent: null, metadata: null): EventFilter;

    ColonyMetadataDelta(agent: null, metadata: null): EventFilter;

    ColonyRewardInverseSet(agent: null, rewardInverse: null): EventFilter;

    ColonyRoleSet(
      agent: null,
      user: string | null,
      domainId: BigNumberish | null,
      role: BigNumberish | null,
      setTo: null
    ): EventFilter;

    ColonyUpgraded(
      agent: null,
      oldVersion: null,
      newVersion: null
    ): EventFilter;

    DomainAdded(agent: null, domainId: null): EventFilter;

    DomainDeprecated(
      agent: null,
      domainId: BigNumberish | null,
      deprecated: null
    ): EventFilter;

    DomainMetadata(
      agent: null,
      domainId: BigNumberish | null,
      metadata: null
    ): EventFilter;

    ExpenditureAdded(agent: null, expenditureId: null): EventFilter;

    ExpenditureCancelled(
      agent: null,
      expenditureId: BigNumberish | null
    ): EventFilter;

    ExpenditureClaimDelaySet(
      agent: null,
      expenditureId: BigNumberish | null,
      slot: BigNumberish | null,
      claimDelay: null
    ): EventFilter;

    ExpenditureFinalized(
      agent: null,
      expenditureId: BigNumberish | null
    ): EventFilter;

    ExpenditureGlobalClaimDelaySet(
      agent: null,
      globalClaimDelay: null
    ): EventFilter;

    ExpenditureLocked(
      agent: null,
      expenditureId: BigNumberish | null
    ): EventFilter;

    ExpenditureMetadataSet(
      agent: null,
      expenditureId: BigNumberish | null,
      metadata: null
    ): EventFilter;

    ExpenditurePayoutModifierSet(
      agent: null,
      expenditureId: BigNumberish | null,
      slot: BigNumberish | null,
      payoutModifier: null
    ): EventFilter;

    ExpenditurePayoutSet(
      agent: null,
      expenditureId: BigNumberish | null,
      slot: BigNumberish | null,
      token: string | null,
      amount: null
    ): EventFilter;

    ExpenditureRecipientSet(
      agent: null,
      expenditureId: BigNumberish | null,
      slot: BigNumberish | null,
      recipient: string | null
    ): EventFilter;

    ExpenditureSkillSet(
      agent: null,
      expenditureId: BigNumberish | null,
      slot: BigNumberish | null,
      skillId: BigNumberish | null
    ): EventFilter;

    ExpenditureStateChanged(
      agent: null,
      expenditureId: BigNumberish | null,
      storageSlot: BigNumberish | null,
      mask: null,
      keys: null,
      value: null
    ): EventFilter;

    ExpenditureTransferred(
      agent: null,
      expenditureId: BigNumberish | null,
      owner: string | null
    ): EventFilter;

    FundingPotAdded(fundingPotId: null): EventFilter;

    LocalSkillAdded(agent: null, localSkillId: null): EventFilter;

    LocalSkillDeprecated(
      agent: null,
      localSkillId: null,
      deprecated: null
    ): EventFilter;

    MetaTransactionExecuted(
      userAddress: null,
      relayerAddress: null,
      payload: null
    ): EventFilter;

    PaymentAdded(agent: null, paymentId: null): EventFilter;

    PaymentFinalized(agent: null, paymentId: BigNumberish | null): EventFilter;

    PaymentPayoutSet(
      agent: null,
      paymentId: BigNumberish | null,
      token: null,
      amount: null
    ): EventFilter;

    PaymentRecipientSet(
      agent: null,
      paymentId: BigNumberish | null,
      recipient: null
    ): EventFilter;

    PaymentSkillSet(
      agent: null,
      paymentId: BigNumberish | null,
      skillId: null
    ): EventFilter;

    PayoutClaimed(
      agent: null,
      fundingPotId: BigNumberish | null,
      token: null,
      amount: null
    ): EventFilter;

    RecoveryModeEntered(user: null): EventFilter;

    RecoveryModeExitApproved(user: null): EventFilter;

    RecoveryModeExited(user: null): EventFilter;

    RecoveryRoleSet(user: string | null, setTo: null): EventFilter;

    RecoveryStorageSlotSet(
      user: null,
      slot: null,
      fromValue: null,
      toValue: null
    ): EventFilter;

    RewardPayoutClaimed(
      rewardPayoutId: null,
      user: null,
      fee: null,
      rewardRemainder: null
    ): EventFilter;

    RewardPayoutCycleEnded(agent: null, rewardPayoutId: null): EventFilter;

    RewardPayoutCycleStarted(agent: null, rewardPayoutId: null): EventFilter;

    TaskAdded(agent: null, taskId: null): EventFilter;

    TaskBriefSet(
      taskId: BigNumberish | null,
      specificationHash: null
    ): EventFilter;

    TaskCanceled(taskId: BigNumberish | null): EventFilter;

    TaskChangedViaSignatures(reviewerAddresses: null): EventFilter;

    TaskCompleted(agent: null, taskId: BigNumberish | null): EventFilter;

    TaskDeliverableSubmitted(
      agent: null,
      taskId: BigNumberish | null,
      deliverableHash: null
    ): EventFilter;

    TaskDueDateSet(taskId: BigNumberish | null, dueDate: null): EventFilter;

    TaskFinalized(agent: null, taskId: BigNumberish | null): EventFilter;

    TaskPayoutSet(
      taskId: BigNumberish | null,
      role: null,
      token: null,
      amount: null
    ): EventFilter;

    TaskRoleUserSet(
      taskId: BigNumberish | null,
      role: null,
      user: string | null
    ): EventFilter;

    TaskSkillSet(
      taskId: BigNumberish | null,
      skillId: BigNumberish | null
    ): EventFilter;

    TaskWorkRatingRevealed(
      agent: null,
      taskId: BigNumberish | null,
      role: null,
      rating: null
    ): EventFilter;

    TokenUnlocked(agent: null): EventFilter;

    TokensBurned(agent: null, token: null, amount: null): EventFilter;

    TokensMinted(agent: null, who: null, amount: null): EventFilter;
  };

  estimate: {
    addDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _parentDomainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "addDomain(uint256,uint256,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _parentDomainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "addDomain(uint256,uint256,uint256,string)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _parentDomainId: BigNumberish,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    addLocalSkill(overrides?: TransactionOverrides): Promise<BigNumber>;

    "addLocalSkill()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    annotateTransaction(
      _txHash: Arrayish,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "annotateTransaction(bytes32,string)"(
      _txHash: Arrayish,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    approveExitRecovery(overrides?: TransactionOverrides): Promise<BigNumber>;

    "approveExitRecovery()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    approveStake(
      _approvee: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "approveStake(address,uint256,uint256)"(
      _approvee: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    authority(overrides?: TransactionOverrides): Promise<BigNumber>;

    "authority()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    bootstrapColony(
      _users: string[],
      _amount: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "bootstrapColony(address[],int256[])"(
      _users: string[],
      _amount: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    burnTokens(
      token: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "burnTokens(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    cancelExpenditure(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "cancelExpenditure(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    cancelExpenditureViaArbitration(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "cancelExpenditureViaArbitration(uint256,uint256,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    checkNotAdditionalProtectedVariable(
      _slot: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "checkNotAdditionalProtectedVariable(uint256)"(
      _slot: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    claimColonyFunds(
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "claimColonyFunds(address)"(
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    claimExpenditurePayout(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "claimExpenditurePayout(uint256,uint256,address)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    claimRewardPayout(
      _payoutId: BigNumberish,
      _squareRoots: BigNumberish[],
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "claimRewardPayout(uint256,uint256[7],bytes,bytes,uint256,bytes32[])"(
      _payoutId: BigNumberish,
      _squareRoots: BigNumberish[],
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    deobligateStake(
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "deobligateStake(address,uint256,uint256)"(
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    deprecateDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _deprecated: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "deprecateDomain(uint256,uint256,uint256,bool)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _deprecated: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    deprecateExtension(
      extensionId: Arrayish,
      deprecated: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "deprecateExtension(bytes32,bool)"(
      extensionId: Arrayish,
      deprecated: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    deprecateLocalSkill(
      localSkillId: BigNumberish,
      deprecated: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "deprecateLocalSkill(uint256,bool)"(
      localSkillId: BigNumberish,
      deprecated: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    editColony(
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "editColony(string)"(
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    editColonyByDelta(
      _metadataDelta: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "editColonyByDelta(string)"(
      _metadataDelta: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    editDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "editDomain(uint256,uint256,uint256,string)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    emitDomainReputationPenalty(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "emitDomainReputationPenalty(uint256,uint256,uint256,address,int256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    emitDomainReputationReward(
      _domainId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "emitDomainReputationReward(uint256,address,int256)"(
      _domainId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    emitSkillReputationPenalty(
      _skillId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "emitSkillReputationPenalty(uint256,address,int256)"(
      _skillId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    emitSkillReputationReward(
      _skillId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "emitSkillReputationReward(uint256,address,int256)"(
      _skillId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    enterRecoveryMode(overrides?: TransactionOverrides): Promise<BigNumber>;

    "enterRecoveryMode()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    executeMetaTransaction(
      userAddress: string,
      payload: Arrayish,
      sigR: Arrayish,
      sigS: Arrayish,
      sigV: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(
      userAddress: string,
      payload: Arrayish,
      sigR: Arrayish,
      sigS: Arrayish,
      sigV: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    exitRecoveryMode(overrides?: TransactionOverrides): Promise<BigNumber>;

    "exitRecoveryMode()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    finalizeExpenditure(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "finalizeExpenditure(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    finalizeExpenditureViaArbitration(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "finalizeExpenditureViaArbitration(uint256,uint256,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    finalizeRewardPayout(
      _payoutId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "finalizeRewardPayout(uint256)"(
      _payoutId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    finishUpgrade(overrides?: TransactionOverrides): Promise<BigNumber>;

    "finishUpgrade()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getApproval(
      _user: string,
      _obligator: string,
      _domainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getApproval(address,address,uint256)"(
      _user: string,
      _obligator: string,
      _domainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getCapabilityRoles(
      _sig: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getCapabilityRoles(bytes4)"(
      _sig: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getColonyNetwork(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getColonyNetwork()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getDomain(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getDomain(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getDomainCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getDomainCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getDomainFromFundingPot(
      _fundingPotId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getDomainFromFundingPot(uint256)"(
      _fundingPotId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getExpenditure(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getExpenditure(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getExpenditureCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getExpenditureCount()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getExpenditureSlot(
      _id: BigNumberish,
      _slot: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getExpenditureSlot(uint256,uint256)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getExpenditureSlotPayout(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getExpenditureSlotPayout(uint256,uint256,address)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getFundingPot(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getFundingPot(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getFundingPotBalance(
      _potId: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getFundingPotBalance(uint256,address)"(
      _potId: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getFundingPotCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getFundingPotCount()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getFundingPotPayout(
      _potId: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getFundingPotPayout(uint256,address)"(
      _potId: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getMetatransactionNonce(
      userAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getMetatransactionNonce(address)"(
      userAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getNonRewardPotsTotal(
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getNonRewardPotsTotal(address)"(
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getObligation(
      _user: string,
      _obligator: string,
      _domainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getObligation(address,address,uint256)"(
      _user: string,
      _obligator: string,
      _domainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getPayment(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getPayment(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getPaymentCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getPaymentCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getRewardInverse(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getRewardInverse()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getRewardPayoutInfo(
      _payoutId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getRewardPayoutInfo(uint256)"(
      _payoutId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getRootLocalSkill(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getRootLocalSkill()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getTask(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getTask(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getTaskChangeNonce(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getTaskChangeNonce(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getTaskCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getTaskCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getTaskRole(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getTaskRole(uint256,uint8)"(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getTaskWorkRatingSecret(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getTaskWorkRatingSecret(uint256,uint8)"(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getTaskWorkRatingSecretsInfo(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getTaskWorkRatingSecretsInfo(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getToken(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getToken()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getTokenApproval(
      token: string,
      spender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getTokenApproval(address,address)"(
      token: string,
      spender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getTotalTokenApproval(
      token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getTotalTokenApproval(address)"(
      token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getUserRoles(
      _user: string,
      _domain: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getUserRoles(address,uint256)"(
      _user: string,
      _domain: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    hasInheritedUserRole(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      _childSkillIndex: BigNumberish,
      _childDomainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "hasInheritedUserRole(address,uint256,uint8,uint256,uint256)"(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      _childSkillIndex: BigNumberish,
      _childDomainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    hasUserRole(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "hasUserRole(address,uint256,uint8)"(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    initialiseColony(
      _colonyNetworkAddress: string,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "initialiseColony(address,address)"(
      _colonyNetworkAddress: string,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    initialiseRootLocalSkill(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "initialiseRootLocalSkill()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    installExtension(
      extensionId: Arrayish,
      version: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "installExtension(bytes32,uint256)"(
      extensionId: Arrayish,
      version: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    isInRecoveryMode(overrides?: TransactionOverrides): Promise<BigNumber>;

    "isInRecoveryMode()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    lockExpenditure(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "lockExpenditure(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    lockToken(overrides?: TransactionOverrides): Promise<BigNumber>;

    "lockToken()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    makeArbitraryTransaction(
      _to: string,
      _action: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "makeArbitraryTransaction(address,bytes)"(
      _to: string,
      _action: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    makeArbitraryTransactions(
      _targets: string[],
      _actions: Arrayish[],
      _strict: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "makeArbitraryTransactions(address[],bytes[],bool)"(
      _targets: string[],
      _actions: Arrayish[],
      _strict: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    makeExpenditure(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "makeExpenditure(uint256,uint256,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    makeSingleArbitraryTransaction(
      _target: string,
      _action: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "makeSingleArbitraryTransaction(address,bytes)"(
      _target: string,
      _action: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    mintTokens(
      _wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "mintTokens(uint256)"(
      _wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    mintTokensFor(
      _guy: string,
      _wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "mintTokensFor(address,uint256)"(
      _guy: string,
      _wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    moveFundsBetweenPots(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _fromPot: BigNumberish,
      _toPot: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _fromPot: BigNumberish,
      _toPot: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,address)"(
      _permissionDomainId: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _fromPot: BigNumberish,
      _toPot: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    multicall(
      data: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "multicall(bytes[])"(
      data: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    numRecoveryRoles(overrides?: TransactionOverrides): Promise<BigNumber>;

    "numRecoveryRoles()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    obligateStake(
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "obligateStake(address,uint256,uint256)"(
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    owner(overrides?: TransactionOverrides): Promise<BigNumber>;

    "owner()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    registerColonyLabel(
      colonyName: string,
      orbitdb: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "registerColonyLabel(string,string)"(
      colonyName: string,
      orbitdb: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    removeRecoveryRole(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "removeRecoveryRole(address)"(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setAdministrationRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setAdministrationRole(uint256,uint256,address,uint256,bool)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setArbitrationRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setArbitrationRole(uint256,uint256,address,uint256,bool)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setArchitectureRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setArchitectureRole(uint256,uint256,address,uint256,bool)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setDefaultGlobalClaimDelay(
      _globalClaimDelay: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setDefaultGlobalClaimDelay(uint256)"(
      _globalClaimDelay: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setExpenditureClaimDelay(
      _id: BigNumberish,
      _slot: BigNumberish,
      _claimDelay: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setExpenditureClaimDelay(uint256,uint256,uint256)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      _claimDelay: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setExpenditureClaimDelays(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _claimDelays: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setExpenditureClaimDelays(uint256,uint256[],uint256[])"(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _claimDelays: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setExpenditureMetadata(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setExpenditureMetadata(uint256,uint256,uint256,string)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setExpenditureMetadata(uint256,string)"(
      _id: BigNumberish,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setExpenditurePayout(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setExpenditurePayout(uint256,uint256,address,uint256)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setExpenditurePayout(uint256,uint256,uint256,uint256,address,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setExpenditurePayoutModifiers(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _payoutModifiers: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setExpenditurePayoutModifiers(uint256,uint256[],int256[])"(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _payoutModifiers: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setExpenditurePayouts(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _token: string,
      _amounts: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setExpenditurePayouts(uint256,uint256[],address,uint256[])"(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _token: string,
      _amounts: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setExpenditureRecipient(
      _id: BigNumberish,
      _slot: BigNumberish,
      _recipient: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setExpenditureRecipient(uint256,uint256,address)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      _recipient: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setExpenditureRecipients(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _recipients: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setExpenditureRecipients(uint256,uint256[],address[])"(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _recipients: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setExpenditureSkill(
      _id: BigNumberish,
      _slot: BigNumberish,
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setExpenditureSkill(uint256,uint256,uint256)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setExpenditureSkills(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _skillIds: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setExpenditureSkills(uint256,uint256[],uint256[])"(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _skillIds: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setExpenditureState(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _storageSlot: BigNumberish,
      _mask: boolean[],
      _keys: Arrayish[],
      _value: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setExpenditureState(uint256,uint256,uint256,uint256,bool[],bytes32[],bytes32)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _storageSlot: BigNumberish,
      _mask: boolean[],
      _keys: Arrayish[],
      _value: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setExpenditureValues(
      _id: BigNumberish,
      _recipientSlots: BigNumberish[],
      _recipients: string[],
      _skillIdSlots: BigNumberish[],
      _skillIds: BigNumberish[],
      _claimDelaySlots: BigNumberish[],
      _claimDelays: BigNumberish[],
      _payoutModifierSlots: BigNumberish[],
      _payoutModifiers: BigNumberish[],
      _payoutTokens: string[],
      _payoutSlots: BigNumberish[][],
      _payoutValues: BigNumberish[][],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setExpenditureValues(uint256,uint256[],address[],uint256[],uint256[],uint256[],uint256[],uint256[],int256[],address[],uint256[][],uint256[][])"(
      _id: BigNumberish,
      _recipientSlots: BigNumberish[],
      _recipients: string[],
      _skillIdSlots: BigNumberish[],
      _skillIds: BigNumberish[],
      _claimDelaySlots: BigNumberish[],
      _claimDelays: BigNumberish[],
      _payoutModifierSlots: BigNumberish[],
      _payoutModifiers: BigNumberish[],
      _payoutTokens: string[],
      _payoutSlots: BigNumberish[][],
      _payoutValues: BigNumberish[][],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setFundingRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setFundingRole(uint256,uint256,address,uint256,bool)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setRecoveryRole(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setRecoveryRole(address)"(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setRewardInverse(
      _rewardInverse: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setRewardInverse(uint256)"(
      _rewardInverse: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setRootRole(
      _user: string,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setRootRole(address,bool)"(
      _user: string,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setStorageSlotRecovery(
      _slot: BigNumberish,
      _value: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setStorageSlotRecovery(uint256,bytes32)"(
      _slot: BigNumberish,
      _value: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setUserRoles(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _roles: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setUserRoles(uint256,uint256,address,uint256,bytes32)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _roles: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    startNextRewardPayout(
      _token: string,
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "startNextRewardPayout(address,bytes,bytes,uint256,bytes32[])"(
      _token: string,
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    transferExpenditure(
      _id: BigNumberish,
      _newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "transferExpenditure(uint256,address)"(
      _id: BigNumberish,
      _newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    transferExpenditureViaArbitration(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "transferExpenditureViaArbitration(uint256,uint256,uint256,address)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    transferStake(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _obligator: string,
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      _recipient: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "transferStake(uint256,uint256,address,address,uint256,uint256,address)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _obligator: string,
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      _recipient: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    uninstallExtension(
      extensionId: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "uninstallExtension(bytes32)"(
      extensionId: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    unlockToken(overrides?: TransactionOverrides): Promise<BigNumber>;

    "unlockToken()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    unlockTokenForUser(
      user: string,
      lockId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "unlockTokenForUser(address,uint256)"(
      user: string,
      lockId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    updateApprovalAmount(
      token: string,
      spender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "updateApprovalAmount(address,address)"(
      token: string,
      spender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    updateColonyOrbitDB(
      orbitdb: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "updateColonyOrbitDB(string)"(
      orbitdb: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    upgrade(
      _newVersion: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "upgrade(uint256)"(
      _newVersion: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    upgradeExtension(
      extensionId: Arrayish,
      newVersion: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "upgradeExtension(bytes32,uint256)"(
      extensionId: Arrayish,
      newVersion: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    userCanSetRoles(
      _user: string,
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _childDomainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "userCanSetRoles(address,uint256,uint256,uint256)"(
      _user: string,
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _childDomainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    verifyReputationProof(
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "verifyReputationProof(bytes,bytes,uint256,bytes32[])"(
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    version(overrides?: TransactionOverrides): Promise<BigNumber>;

    "version()"(overrides?: TransactionOverrides): Promise<BigNumber>;
  };
}
