/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface IColonyNetworkInterface extends Interface {
  functions: {
    addColonyVersion: TypedFunctionDescription<{
      encode([_version, _resolver]: [BigNumberish, string]): string;
    }>;

    addExtensionToNetwork: TypedFunctionDescription<{
      encode([_extensionId, _resolver]: [Arrayish, string]): string;
    }>;

    addPendingReputationUpdate: TypedFunctionDescription<{
      encode([_chainId, _colony]: [BigNumberish, string]): string;
    }>;

    addPendingSkill: TypedFunctionDescription<{
      encode([_skillId]: [BigNumberish]): string;
    }>;

    addReputationUpdateLogFromBridge: TypedFunctionDescription<{
      encode([_colony, _user, _amount, _skillId, _updateNumber]: [
        string,
        string,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    addSkill: TypedFunctionDescription<{
      encode([_parentSkillId]: [BigNumberish]): string;
    }>;

    addSkillFromBridge: TypedFunctionDescription<{
      encode([_parentSkillId, _skillCount]: [
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    addr: TypedFunctionDescription<{ encode([_node]: [Arrayish]): string }>;

    appendReputationUpdateLog: TypedFunctionDescription<{
      encode([_user, _amount, _skillId]: [
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    approveExitRecovery: TypedFunctionDescription<{ encode([]: []): string }>;

    bridgeCurrentRootHash: TypedFunctionDescription<{
      encode([chainId]: [BigNumberish]): string;
    }>;

    bridgePendingReputationUpdate: TypedFunctionDescription<{
      encode([_colony, _updateNumber]: [string, BigNumberish]): string;
    }>;

    bridgeSkillIfNotMiningChain: TypedFunctionDescription<{
      encode([skillId]: [BigNumberish]): string;
    }>;

    burnUnneededRewards: TypedFunctionDescription<{
      encode([_amount]: [BigNumberish]): string;
    }>;

    calculateMinerWeight: TypedFunctionDescription<{
      encode([_timeStaked, _submissonIndex]: [
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    checkNotAdditionalProtectedVariable: TypedFunctionDescription<{
      encode([_slot]: [BigNumberish]): string;
    }>;

    claimMiningReward: TypedFunctionDescription<{
      encode([_recipient]: [string]): string;
    }>;

    createColony: TypedFunctionDescription<{
      encode([_tokenAddress]: [string]): string;
    }>;

    createColonyForFrontend: TypedFunctionDescription<{
      encode([
        _tokenAddress,
        _name,
        _symbol,
        _decimals,
        _version,
        _colonyName,
        _metadata,
      ]: [
        string,
        string,
        string,
        BigNumberish,
        BigNumberish,
        string,
        string
      ]): string;
    }>;

    createMetaColony: TypedFunctionDescription<{
      encode([_tokenAddress]: [string]): string;
    }>;

    deployTokenAuthority: TypedFunctionDescription<{
      encode([_token, _colony, _allowedToTransfer]: [
        string,
        string,
        string[]
      ]): string;
    }>;

    deployTokenViaNetwork: TypedFunctionDescription<{
      encode([_name, _symbol, _decimals]: [
        string,
        string,
        BigNumberish
      ]): string;
    }>;

    deprecateExtension: TypedFunctionDescription<{
      encode([_extensionId, _deprecated]: [Arrayish, boolean]): string;
    }>;

    deprecateSkill: TypedFunctionDescription<{
      encode([_skillId]: [BigNumberish]): string;
    }>;

    enterRecoveryMode: TypedFunctionDescription<{ encode([]: []): string }>;

    executeMetaTransaction: TypedFunctionDescription<{
      encode([userAddress, payload, sigR, sigS, sigV]: [
        string,
        Arrayish,
        Arrayish,
        Arrayish,
        BigNumberish
      ]): string;
    }>;

    exitRecoveryMode: TypedFunctionDescription<{ encode([]: []): string }>;

    getBridgedReputationUpdateCount: TypedFunctionDescription<{
      encode([_chainId, _colony]: [BigNumberish, string]): string;
    }>;

    getBridgedSkillCounts: TypedFunctionDescription<{
      encode([_chainId]: [BigNumberish]): string;
    }>;

    getChildSkillId: TypedFunctionDescription<{
      encode([_skillId, _childSkillIndex]: [
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    getColony: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    getColonyBridgeAddress: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    getColonyCount: TypedFunctionDescription<{ encode([]: []): string }>;

    getColonyCreationSalt: TypedFunctionDescription<{ encode([]: []): string }>;

    getColonyVersionResolver: TypedFunctionDescription<{
      encode([_version]: [BigNumberish]): string;
    }>;

    getCurrentColonyVersion: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    getENSRegistrar: TypedFunctionDescription<{ encode([]: []): string }>;

    getExtensionInstallation: TypedFunctionDescription<{
      encode([_extensionId, _colony]: [Arrayish, string]): string;
    }>;

    getExtensionResolver: TypedFunctionDescription<{
      encode([_extensionId, _version]: [Arrayish, BigNumberish]): string;
    }>;

    getFeeInverse: TypedFunctionDescription<{ encode([]: []): string }>;

    getMetaColony: TypedFunctionDescription<{ encode([]: []): string }>;

    getMetatransactionNonce: TypedFunctionDescription<{
      encode([userAddress]: [string]): string;
    }>;

    getMiningChainId: TypedFunctionDescription<{ encode([]: []): string }>;

    getMiningDelegator: TypedFunctionDescription<{
      encode([_delegate]: [string]): string;
    }>;

    getMiningResolver: TypedFunctionDescription<{ encode([]: []): string }>;

    getMiningStake: TypedFunctionDescription<{
      encode([_user]: [string]): string;
    }>;

    getParentSkillId: TypedFunctionDescription<{
      encode([_skillId, _parentSkillIndex]: [
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    getPayoutWhitelist: TypedFunctionDescription<{
      encode([_token]: [string]): string;
    }>;

    getPendingReputationUpdate: TypedFunctionDescription<{
      encode([_chainId, _colony, _updateNumber]: [
        BigNumberish,
        string,
        BigNumberish
      ]): string;
    }>;

    getPendingSkillAddition: TypedFunctionDescription<{
      encode([_chainId, _skillCount]: [BigNumberish, BigNumberish]): string;
    }>;

    getProfileDBAddress: TypedFunctionDescription<{
      encode([_node]: [Arrayish]): string;
    }>;

    getReplacementReputationUpdateLogEntry: TypedFunctionDescription<{
      encode([_reputationMiningCycle, _id]: [string, BigNumberish]): string;
    }>;

    getReplacementReputationUpdateLogsExist: TypedFunctionDescription<{
      encode([_reputationMiningCycle]: [string]): string;
    }>;

    getReputationMiningCycle: TypedFunctionDescription<{
      encode([_active]: [boolean]): string;
    }>;

    getReputationMiningCycleReward: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    getReputationMiningSkillId: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    getReputationRootHash: TypedFunctionDescription<{ encode([]: []): string }>;

    getReputationRootHashNLeaves: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    getReputationRootHashNNodes: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    getSkill: TypedFunctionDescription<{
      encode([_skillId]: [BigNumberish]): string;
    }>;

    getSkillCount: TypedFunctionDescription<{ encode([]: []): string }>;

    getTokenLocking: TypedFunctionDescription<{ encode([]: []): string }>;

    initialise: TypedFunctionDescription<{
      encode([_resolver, _version]: [string, BigNumberish]): string;
    }>;

    initialiseReputationMining: TypedFunctionDescription<{
      encode([miningChainId, newHash, newNLeaves]: [
        BigNumberish,
        Arrayish,
        BigNumberish
      ]): string;
    }>;

    initialiseRootLocalSkill: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    installExtension: TypedFunctionDescription<{
      encode([_extensionId, _version]: [Arrayish, BigNumberish]): string;
    }>;

    isColony: TypedFunctionDescription<{ encode([_colony]: [string]): string }>;

    isInRecoveryMode: TypedFunctionDescription<{ encode([]: []): string }>;

    lookupRegisteredENSDomain: TypedFunctionDescription<{
      encode([_addr]: [string]): string;
    }>;

    multicall: TypedFunctionDescription<{
      encode([data]: [Arrayish[]]): string;
    }>;

    numRecoveryRoles: TypedFunctionDescription<{ encode([]: []): string }>;

    punishStakers: TypedFunctionDescription<{
      encode([_stakers, _amount]: [string[], BigNumberish]): string;
    }>;

    registerColonyLabel: TypedFunctionDescription<{
      encode([_colonyName, _orbitdb]: [string, string]): string;
    }>;

    registerUserLabel: TypedFunctionDescription<{
      encode([_username, _orbitdb]: [string, string]): string;
    }>;

    removeRecoveryRole: TypedFunctionDescription<{
      encode([_user]: [string]): string;
    }>;

    reward: TypedFunctionDescription<{
      encode([_recipient, _amount]: [string, BigNumberish]): string;
    }>;

    setColonyBridgeAddress: TypedFunctionDescription<{
      encode([_bridgeAddress]: [string]): string;
    }>;

    setFeeInverse: TypedFunctionDescription<{
      encode([_feeInverse]: [BigNumberish]): string;
    }>;

    setMiningDelegate: TypedFunctionDescription<{
      encode([_delegate, _allowed]: [string, boolean]): string;
    }>;

    setMiningResolver: TypedFunctionDescription<{
      encode([_miningResolverAddress]: [string]): string;
    }>;

    setPayoutWhitelist: TypedFunctionDescription<{
      encode([_token, _status]: [string, boolean]): string;
    }>;

    setRecoveryRole: TypedFunctionDescription<{
      encode([_user]: [string]): string;
    }>;

    setReplacementReputationUpdateLogEntry: TypedFunctionDescription<{
      encode([
        _reputationMiningCycle,
        _id,
        _user,
        _amount,
        _skillId,
        _colony,
        _nUpdates,
        _nPreviousUpdates,
      ]: [
        string,
        BigNumberish,
        string,
        BigNumberish,
        BigNumberish,
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    setReputationMiningCycleReward: TypedFunctionDescription<{
      encode([_amount]: [BigNumberish]): string;
    }>;

    setReputationRootHash: TypedFunctionDescription<{
      encode([_newHash, _newNLeaves, _stakers]: [
        Arrayish,
        BigNumberish,
        string[]
      ]): string;
    }>;

    setReputationRootHashFromBridge: TypedFunctionDescription<{
      encode([newHash, newNLeaves, nonce]: [
        Arrayish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    setStorageSlotRecovery: TypedFunctionDescription<{
      encode([_slot, _value]: [BigNumberish, Arrayish]): string;
    }>;

    setTokenLocking: TypedFunctionDescription<{
      encode([_tokenLockingAddress]: [string]): string;
    }>;

    setupRegistrar: TypedFunctionDescription<{
      encode([_ens, _rootNode]: [string, Arrayish]): string;
    }>;

    stakeForMining: TypedFunctionDescription<{
      encode([_amount]: [BigNumberish]): string;
    }>;

    startNextCycle: TypedFunctionDescription<{ encode([]: []): string }>;

    startTokenAuction: TypedFunctionDescription<{
      encode([_token]: [string]): string;
    }>;

    supportsInterface: TypedFunctionDescription<{
      encode([_interfaceID]: [Arrayish]): string;
    }>;

    uninstallExtension: TypedFunctionDescription<{
      encode([_extensionId]: [Arrayish]): string;
    }>;

    unstakeForMining: TypedFunctionDescription<{
      encode([_amount]: [BigNumberish]): string;
    }>;

    updateColonyOrbitDB: TypedFunctionDescription<{
      encode([_orbitdb]: [string]): string;
    }>;

    updateUserOrbitDB: TypedFunctionDescription<{
      encode([_orbitdb]: [string]): string;
    }>;

    upgradeExtension: TypedFunctionDescription<{
      encode([_extensionId, _newVersion]: [Arrayish, BigNumberish]): string;
    }>;
  };

  events: {
    AuctionCreated: TypedEventDescription<{
      encodeTopics([auction, token, quantity]: [null, null, null]): string[];
    }>;

    BridgeSet: TypedEventDescription<{
      encodeTopics([bridgeAddress]: [null]): string[];
    }>;

    ColonyAdded: TypedEventDescription<{
      encodeTopics([colonyId, colonyAddress, token]: [
        BigNumberish | null,
        string | null,
        null
      ]): string[];
    }>;

    ColonyLabelRegistered: TypedEventDescription<{
      encodeTopics([colony, label]: [string | null, null]): string[];
    }>;

    ColonyNetworkInitialised: TypedEventDescription<{
      encodeTopics([resolver]: [null]): string[];
    }>;

    ColonyVersionAdded: TypedEventDescription<{
      encodeTopics([version, resolver]: [null, null]): string[];
    }>;

    ExtensionAddedToNetwork: TypedEventDescription<{
      encodeTopics([extensionId, version]: [Arrayish | null, null]): string[];
    }>;

    ExtensionDeprecated: TypedEventDescription<{
      encodeTopics([extensionId, colony, deprecated]: [
        Arrayish | null,
        string | null,
        null
      ]): string[];
    }>;

    ExtensionInstalled: TypedEventDescription<{
      encodeTopics([extensionId, colony, version]: [
        Arrayish | null,
        string | null,
        null
      ]): string[];
    }>;

    ExtensionUninstalled: TypedEventDescription<{
      encodeTopics([extensionId, colony]: [
        Arrayish | null,
        string | null
      ]): string[];
    }>;

    ExtensionUpgraded: TypedEventDescription<{
      encodeTopics([extensionId, colony, version]: [
        Arrayish | null,
        string | null,
        null
      ]): string[];
    }>;

    MetaColonyCreated: TypedEventDescription<{
      encodeTopics([metaColony, token, rootSkillId]: [
        null,
        null,
        null
      ]): string[];
    }>;

    MetaTransactionExecuted: TypedEventDescription<{
      encodeTopics([userAddress, relayerAddress, payload]: [
        null,
        null,
        null
      ]): string[];
    }>;

    MiningCycleResolverSet: TypedEventDescription<{
      encodeTopics([miningCycleResolver]: [null]): string[];
    }>;

    NetworkFeeInverseSet: TypedEventDescription<{
      encodeTopics([feeInverse]: [null]): string[];
    }>;

    RecoveryModeEntered: TypedEventDescription<{
      encodeTopics([user]: [null]): string[];
    }>;

    RecoveryModeExitApproved: TypedEventDescription<{
      encodeTopics([user]: [null]): string[];
    }>;

    RecoveryModeExited: TypedEventDescription<{
      encodeTopics([user]: [null]): string[];
    }>;

    RecoveryRoleSet: TypedEventDescription<{
      encodeTopics([user, setTo]: [string | null, null]): string[];
    }>;

    RecoveryStorageSlotSet: TypedEventDescription<{
      encodeTopics([user, slot, fromValue, toValue]: [
        null,
        null,
        null,
        null
      ]): string[];
    }>;

    RegistrarInitialised: TypedEventDescription<{
      encodeTopics([ens, rootNode]: [null, null]): string[];
    }>;

    ReputationMinerPenalised: TypedEventDescription<{
      encodeTopics([miner, tokensLost]: [null, null]): string[];
    }>;

    ReputationMiningCycleComplete: TypedEventDescription<{
      encodeTopics([hash, nLeaves]: [null, null]): string[];
    }>;

    ReputationMiningInitialised: TypedEventDescription<{
      encodeTopics([inactiveReputationMiningCycle]: [null]): string[];
    }>;

    ReputationMiningRewardSet: TypedEventDescription<{
      encodeTopics([amount]: [null]): string[];
    }>;

    ReputationRootHashSet: TypedEventDescription<{
      encodeTopics([newHash, newNLeaves, stakers, reward]: [
        null,
        null,
        null,
        null
      ]): string[];
    }>;

    ReputationUpdateAddedFromBridge: TypedEventDescription<{
      encodeTopics([chainId, colony, updateNumber]: [
        null,
        null,
        null
      ]): string[];
    }>;

    ReputationUpdateSentToBridge: TypedEventDescription<{
      encodeTopics([colony, count]: [null, null]): string[];
    }>;

    ReputationUpdateStored: TypedEventDescription<{
      encodeTopics([colony, count]: [null, null]): string[];
    }>;

    ReputationUpdateStoredFromBridge: TypedEventDescription<{
      encodeTopics([chainId, colony, updateNumber]: [
        null,
        null,
        null
      ]): string[];
    }>;

    SkillAdded: TypedEventDescription<{
      encodeTopics([skillId, parentSkillId]: [null, null]): string[];
    }>;

    SkillAddedFromBridge: TypedEventDescription<{
      encodeTopics([skillId]: [null]): string[];
    }>;

    SkillCreationStored: TypedEventDescription<{
      encodeTopics([skillId]: [null]): string[];
    }>;

    SkillStoredFromBridge: TypedEventDescription<{
      encodeTopics([skillId]: [null]): string[];
    }>;

    TokenAuthorityDeployed: TypedEventDescription<{
      encodeTopics([tokenAuthorityAddress]: [null]): string[];
    }>;

    TokenDeployed: TypedEventDescription<{
      encodeTopics([tokenAddress]: [null]): string[];
    }>;

    TokenLockingAddressSet: TypedEventDescription<{
      encodeTopics([tokenLocking]: [null]): string[];
    }>;

    TokenWhitelisted: TypedEventDescription<{
      encodeTopics([token, status]: [null, null]): string[];
    }>;

    UserLabelRegistered: TypedEventDescription<{
      encodeTopics([user, label]: [string | null, null]): string[];
    }>;
  };
}

export class IColonyNetwork extends Contract {
  connect(signerOrProvider: Signer | Provider | string): IColonyNetwork;
  attach(addressOrName: string): IColonyNetwork;
  deployed(): Promise<IColonyNetwork>;

  on(event: EventFilter | string, listener: Listener): IColonyNetwork;
  once(event: EventFilter | string, listener: Listener): IColonyNetwork;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): IColonyNetwork;
  removeAllListeners(eventName: EventFilter | string): IColonyNetwork;
  removeListener(eventName: any, listener: Listener): IColonyNetwork;

  interface: IColonyNetworkInterface;

  functions: {
    addColonyVersion(
      _version: BigNumberish,
      _resolver: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "addColonyVersion(uint256,address)"(
      _version: BigNumberish,
      _resolver: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    addExtensionToNetwork(
      _extensionId: Arrayish,
      _resolver: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "addExtensionToNetwork(bytes32,address)"(
      _extensionId: Arrayish,
      _resolver: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    addPendingReputationUpdate(
      _chainId: BigNumberish,
      _colony: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "addPendingReputationUpdate(uint256,address)"(
      _chainId: BigNumberish,
      _colony: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    addPendingSkill(
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "addPendingSkill(uint256)"(
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    addReputationUpdateLogFromBridge(
      _colony: string,
      _user: string,
      _amount: BigNumberish,
      _skillId: BigNumberish,
      _updateNumber: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "addReputationUpdateLogFromBridge(address,address,int256,uint256,uint256)"(
      _colony: string,
      _user: string,
      _amount: BigNumberish,
      _skillId: BigNumberish,
      _updateNumber: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    addSkill(
      _parentSkillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "addSkill(uint256)"(
      _parentSkillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    addSkillFromBridge(
      _parentSkillId: BigNumberish,
      _skillCount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "addSkillFromBridge(uint256,uint256)"(
      _parentSkillId: BigNumberish,
      _skillCount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    addr(_node: Arrayish, overrides?: TransactionOverrides): Promise<string>;

    "addr(bytes32)"(
      _node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    appendReputationUpdateLog(
      _user: string,
      _amount: BigNumberish,
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "appendReputationUpdateLog(address,int256,uint256)"(
      _user: string,
      _amount: BigNumberish,
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    approveExitRecovery(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "approveExitRecovery()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    bridgeCurrentRootHash(
      chainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "bridgeCurrentRootHash(uint256)"(
      chainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    bridgePendingReputationUpdate(
      _colony: string,
      _updateNumber: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "bridgePendingReputationUpdate(address,uint256)"(
      _colony: string,
      _updateNumber: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    bridgeSkillIfNotMiningChain(
      skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "bridgeSkillIfNotMiningChain(uint256)"(
      skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    burnUnneededRewards(
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "burnUnneededRewards(uint256)"(
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    calculateMinerWeight(
      _timeStaked: BigNumberish,
      _submissonIndex: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "calculateMinerWeight(uint256,uint256)"(
      _timeStaked: BigNumberish,
      _submissonIndex: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    checkNotAdditionalProtectedVariable(
      _slot: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<void>;

    "checkNotAdditionalProtectedVariable(uint256)"(
      _slot: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<void>;

    claimMiningReward(
      _recipient: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "claimMiningReward(address)"(
      _recipient: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    createColony(
      _tokenAddress: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "createColony(address)"(
      _tokenAddress: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "createColony(address,uint256,string,string)"(
      _tokenAddress: string,
      _version: BigNumberish,
      _colonyName: string,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "createColony(address,uint256,string)"(
      _tokenAddress: string,
      _version: BigNumberish,
      _colonyName: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "createColony(address,uint256,string,string,bool)"(
      _tokenAddress: string,
      _version: BigNumberish,
      _colonyName: string,
      _orbitdb: string,
      _useExtensionManager: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    createColonyForFrontend(
      _tokenAddress: string,
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      _version: BigNumberish,
      _colonyName: string,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "createColonyForFrontend(address,string,string,uint8,uint256,string,string)"(
      _tokenAddress: string,
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      _version: BigNumberish,
      _colonyName: string,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    createMetaColony(
      _tokenAddress: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "createMetaColony(address)"(
      _tokenAddress: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    deployTokenAuthority(
      _token: string,
      _colony: string,
      _allowedToTransfer: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "deployTokenAuthority(address,address,address[])"(
      _token: string,
      _colony: string,
      _allowedToTransfer: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    deployTokenViaNetwork(
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "deployTokenViaNetwork(string,string,uint8)"(
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    deprecateExtension(
      _extensionId: Arrayish,
      _deprecated: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "deprecateExtension(bytes32,bool)"(
      _extensionId: Arrayish,
      _deprecated: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    deprecateSkill(
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "deprecateSkill(uint256)"(
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "deprecateSkill(uint256,bool)"(
      _skillId: BigNumberish,
      _deprecated: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    enterRecoveryMode(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "enterRecoveryMode()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    executeMetaTransaction(
      userAddress: string,
      payload: Arrayish,
      sigR: Arrayish,
      sigS: Arrayish,
      sigV: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(
      userAddress: string,
      payload: Arrayish,
      sigR: Arrayish,
      sigS: Arrayish,
      sigV: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    exitRecoveryMode(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "exitRecoveryMode()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getBridgedReputationUpdateCount(
      _chainId: BigNumberish,
      _colony: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getBridgedReputationUpdateCount(uint256,address)"(
      _chainId: BigNumberish,
      _colony: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getBridgedSkillCounts(
      _chainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getBridgedSkillCounts(uint256)"(
      _chainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getChildSkillId(
      _skillId: BigNumberish,
      _childSkillIndex: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getChildSkillId(uint256,uint256)"(
      _skillId: BigNumberish,
      _childSkillIndex: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getColony(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "getColony(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    getColonyBridgeAddress(overrides?: TransactionOverrides): Promise<string>;

    "getColonyBridgeAddress()"(
      overrides?: TransactionOverrides
    ): Promise<string>;

    getColonyCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getColonyCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getColonyCreationSalt(overrides?: TransactionOverrides): Promise<string>;

    "getColonyCreationSalt()"(
      overrides?: TransactionOverrides
    ): Promise<string>;

    getColonyVersionResolver(
      _version: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "getColonyVersionResolver(uint256)"(
      _version: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    getCurrentColonyVersion(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getCurrentColonyVersion()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getENSRegistrar(overrides?: TransactionOverrides): Promise<string>;

    "getENSRegistrar()"(overrides?: TransactionOverrides): Promise<string>;

    getExtensionInstallation(
      _extensionId: Arrayish,
      _colony: string,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "getExtensionInstallation(bytes32,address)"(
      _extensionId: Arrayish,
      _colony: string,
      overrides?: TransactionOverrides
    ): Promise<string>;

    getExtensionResolver(
      _extensionId: Arrayish,
      _version: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "getExtensionResolver(bytes32,uint256)"(
      _extensionId: Arrayish,
      _version: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    getFeeInverse(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getFeeInverse()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getMetaColony(overrides?: TransactionOverrides): Promise<string>;

    "getMetaColony()"(overrides?: TransactionOverrides): Promise<string>;

    getMetatransactionNonce(
      userAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getMetatransactionNonce(address)"(
      userAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getMiningChainId(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getMiningChainId()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getMiningDelegator(
      _delegate: string,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "getMiningDelegator(address)"(
      _delegate: string,
      overrides?: TransactionOverrides
    ): Promise<string>;

    getMiningResolver(overrides?: TransactionOverrides): Promise<string>;

    "getMiningResolver()"(overrides?: TransactionOverrides): Promise<string>;

    getMiningStake(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; timestamp: BigNumber }
    >;

    "getMiningStake(address)"(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; timestamp: BigNumber }
    >;

    getParentSkillId(
      _skillId: BigNumberish,
      _parentSkillIndex: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getParentSkillId(uint256,uint256)"(
      _skillId: BigNumberish,
      _parentSkillIndex: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getPayoutWhitelist(
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "getPayoutWhitelist(address)"(
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    getPendingReputationUpdate(
      _chainId: BigNumberish,
      _colony: string,
      _updateNumber: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, BigNumber] & {
        user: string;
        amount: BigNumber;
        skillId: BigNumber;
        colony: string;
        timestamp: BigNumber;
      }
    >;

    "getPendingReputationUpdate(uint256,address,uint256)"(
      _chainId: BigNumberish,
      _colony: string,
      _updateNumber: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, BigNumber] & {
        user: string;
        amount: BigNumber;
        skillId: BigNumber;
        colony: string;
        timestamp: BigNumber;
      }
    >;

    getPendingSkillAddition(
      _chainId: BigNumberish,
      _skillCount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getPendingSkillAddition(uint256,uint256)"(
      _chainId: BigNumberish,
      _skillCount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getProfileDBAddress(
      _node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "getProfileDBAddress(bytes32)"(
      _node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    getReplacementReputationUpdateLogEntry(
      _reputationMiningCycle: string,
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, BigNumber, BigNumber] & {
        user: string;
        amount: BigNumber;
        skillId: BigNumber;
        colony: string;
        nUpdates: BigNumber;
        nPreviousUpdates: BigNumber;
      }
    >;

    "getReplacementReputationUpdateLogEntry(address,uint256)"(
      _reputationMiningCycle: string,
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, BigNumber, BigNumber] & {
        user: string;
        amount: BigNumber;
        skillId: BigNumber;
        colony: string;
        nUpdates: BigNumber;
        nPreviousUpdates: BigNumber;
      }
    >;

    getReplacementReputationUpdateLogsExist(
      _reputationMiningCycle: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "getReplacementReputationUpdateLogsExist(address)"(
      _reputationMiningCycle: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    getReputationMiningCycle(
      _active: boolean,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "getReputationMiningCycle(bool)"(
      _active: boolean,
      overrides?: TransactionOverrides
    ): Promise<string>;

    getReputationMiningCycleReward(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getReputationMiningCycleReward()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getReputationMiningSkillId(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getReputationMiningSkillId()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getReputationRootHash(overrides?: TransactionOverrides): Promise<string>;

    "getReputationRootHash()"(
      overrides?: TransactionOverrides
    ): Promise<string>;

    getReputationRootHashNLeaves(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getReputationRootHashNLeaves()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getReputationRootHashNNodes(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getReputationRootHashNNodes()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getSkill(
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber[], BigNumber[], boolean, boolean] & {
        nParents: BigNumber;
        nChildren: BigNumber;
        parents: BigNumber[];
        children: BigNumber[];
        DEPRECATED_globalSkill: boolean;
        deprecated: boolean;
      }
    >;

    "getSkill(uint256)"(
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber[], BigNumber[], boolean, boolean] & {
        nParents: BigNumber;
        nChildren: BigNumber;
        parents: BigNumber[];
        children: BigNumber[];
        DEPRECATED_globalSkill: boolean;
        deprecated: boolean;
      }
    >;

    getSkillCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getSkillCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getTokenLocking(overrides?: TransactionOverrides): Promise<string>;

    "getTokenLocking()"(overrides?: TransactionOverrides): Promise<string>;

    initialise(
      _resolver: string,
      _version: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "initialise(address,uint256)"(
      _resolver: string,
      _version: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    initialiseReputationMining(
      miningChainId: BigNumberish,
      newHash: Arrayish,
      newNLeaves: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "initialiseReputationMining(uint256,bytes32,uint256)"(
      miningChainId: BigNumberish,
      newHash: Arrayish,
      newNLeaves: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    initialiseRootLocalSkill(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "initialiseRootLocalSkill()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    installExtension(
      _extensionId: Arrayish,
      _version: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "installExtension(bytes32,uint256)"(
      _extensionId: Arrayish,
      _version: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    isColony(
      _colony: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "isColony(address)"(
      _colony: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    isInRecoveryMode(overrides?: TransactionOverrides): Promise<boolean>;

    "isInRecoveryMode()"(overrides?: TransactionOverrides): Promise<boolean>;

    lookupRegisteredENSDomain(
      _addr: string,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "lookupRegisteredENSDomain(address)"(
      _addr: string,
      overrides?: TransactionOverrides
    ): Promise<string>;

    multicall(
      data: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "multicall(bytes[])"(
      data: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    numRecoveryRoles(overrides?: TransactionOverrides): Promise<BigNumber>;

    "numRecoveryRoles()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    punishStakers(
      _stakers: string[],
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "punishStakers(address[],uint256)"(
      _stakers: string[],
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    registerColonyLabel(
      _colonyName: string,
      _orbitdb: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "registerColonyLabel(string,string)"(
      _colonyName: string,
      _orbitdb: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    registerUserLabel(
      _username: string,
      _orbitdb: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "registerUserLabel(string,string)"(
      _username: string,
      _orbitdb: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    removeRecoveryRole(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "removeRecoveryRole(address)"(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    reward(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "reward(address,uint256)"(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setColonyBridgeAddress(
      _bridgeAddress: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setColonyBridgeAddress(address)"(
      _bridgeAddress: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setFeeInverse(
      _feeInverse: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setFeeInverse(uint256)"(
      _feeInverse: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setMiningDelegate(
      _delegate: string,
      _allowed: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setMiningDelegate(address,bool)"(
      _delegate: string,
      _allowed: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setMiningResolver(
      _miningResolverAddress: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setMiningResolver(address)"(
      _miningResolverAddress: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setPayoutWhitelist(
      _token: string,
      _status: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setPayoutWhitelist(address,bool)"(
      _token: string,
      _status: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setRecoveryRole(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setRecoveryRole(address)"(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setReplacementReputationUpdateLogEntry(
      _reputationMiningCycle: string,
      _id: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      _skillId: BigNumberish,
      _colony: string,
      _nUpdates: BigNumberish,
      _nPreviousUpdates: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setReplacementReputationUpdateLogEntry(address,uint256,address,int256,uint256,address,uint128,uint128)"(
      _reputationMiningCycle: string,
      _id: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      _skillId: BigNumberish,
      _colony: string,
      _nUpdates: BigNumberish,
      _nPreviousUpdates: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setReputationMiningCycleReward(
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setReputationMiningCycleReward(uint256)"(
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setReputationRootHash(
      _newHash: Arrayish,
      _newNLeaves: BigNumberish,
      _stakers: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setReputationRootHash(bytes32,uint256,address[])"(
      _newHash: Arrayish,
      _newNLeaves: BigNumberish,
      _stakers: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setReputationRootHashFromBridge(
      newHash: Arrayish,
      newNLeaves: BigNumberish,
      nonce: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setReputationRootHashFromBridge(bytes32,uint256,uint256)"(
      newHash: Arrayish,
      newNLeaves: BigNumberish,
      nonce: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setStorageSlotRecovery(
      _slot: BigNumberish,
      _value: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setStorageSlotRecovery(uint256,bytes32)"(
      _slot: BigNumberish,
      _value: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setTokenLocking(
      _tokenLockingAddress: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setTokenLocking(address)"(
      _tokenLockingAddress: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setupRegistrar(
      _ens: string,
      _rootNode: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setupRegistrar(address,bytes32)"(
      _ens: string,
      _rootNode: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    stakeForMining(
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "stakeForMining(uint256)"(
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    startNextCycle(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "startNextCycle()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    startTokenAuction(
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "startTokenAuction(address)"(
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      _interfaceID: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      _interfaceID: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    uninstallExtension(
      _extensionId: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "uninstallExtension(bytes32)"(
      _extensionId: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    unstakeForMining(
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "unstakeForMining(uint256)"(
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    updateColonyOrbitDB(
      _orbitdb: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "updateColonyOrbitDB(string)"(
      _orbitdb: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    updateUserOrbitDB(
      _orbitdb: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "updateUserOrbitDB(string)"(
      _orbitdb: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    upgradeExtension(
      _extensionId: Arrayish,
      _newVersion: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "upgradeExtension(bytes32,uint256)"(
      _extensionId: Arrayish,
      _newVersion: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  addColonyVersion(
    _version: BigNumberish,
    _resolver: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "addColonyVersion(uint256,address)"(
    _version: BigNumberish,
    _resolver: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  addExtensionToNetwork(
    _extensionId: Arrayish,
    _resolver: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "addExtensionToNetwork(bytes32,address)"(
    _extensionId: Arrayish,
    _resolver: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  addPendingReputationUpdate(
    _chainId: BigNumberish,
    _colony: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "addPendingReputationUpdate(uint256,address)"(
    _chainId: BigNumberish,
    _colony: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  addPendingSkill(
    _skillId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "addPendingSkill(uint256)"(
    _skillId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  addReputationUpdateLogFromBridge(
    _colony: string,
    _user: string,
    _amount: BigNumberish,
    _skillId: BigNumberish,
    _updateNumber: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "addReputationUpdateLogFromBridge(address,address,int256,uint256,uint256)"(
    _colony: string,
    _user: string,
    _amount: BigNumberish,
    _skillId: BigNumberish,
    _updateNumber: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  addSkill(
    _parentSkillId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "addSkill(uint256)"(
    _parentSkillId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  addSkillFromBridge(
    _parentSkillId: BigNumberish,
    _skillCount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "addSkillFromBridge(uint256,uint256)"(
    _parentSkillId: BigNumberish,
    _skillCount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  addr(_node: Arrayish, overrides?: TransactionOverrides): Promise<string>;

  "addr(bytes32)"(
    _node: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  appendReputationUpdateLog(
    _user: string,
    _amount: BigNumberish,
    _skillId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "appendReputationUpdateLog(address,int256,uint256)"(
    _user: string,
    _amount: BigNumberish,
    _skillId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  approveExitRecovery(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "approveExitRecovery()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  bridgeCurrentRootHash(
    chainId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "bridgeCurrentRootHash(uint256)"(
    chainId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  bridgePendingReputationUpdate(
    _colony: string,
    _updateNumber: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "bridgePendingReputationUpdate(address,uint256)"(
    _colony: string,
    _updateNumber: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  bridgeSkillIfNotMiningChain(
    skillId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "bridgeSkillIfNotMiningChain(uint256)"(
    skillId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  burnUnneededRewards(
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "burnUnneededRewards(uint256)"(
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  calculateMinerWeight(
    _timeStaked: BigNumberish,
    _submissonIndex: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "calculateMinerWeight(uint256,uint256)"(
    _timeStaked: BigNumberish,
    _submissonIndex: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  checkNotAdditionalProtectedVariable(
    _slot: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<void>;

  "checkNotAdditionalProtectedVariable(uint256)"(
    _slot: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<void>;

  claimMiningReward(
    _recipient: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "claimMiningReward(address)"(
    _recipient: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  createColony(
    _tokenAddress: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "createColony(address)"(
    _tokenAddress: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "createColony(address,uint256,string,string)"(
    _tokenAddress: string,
    _version: BigNumberish,
    _colonyName: string,
    _metadata: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "createColony(address,uint256,string)"(
    _tokenAddress: string,
    _version: BigNumberish,
    _colonyName: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "createColony(address,uint256,string,string,bool)"(
    _tokenAddress: string,
    _version: BigNumberish,
    _colonyName: string,
    _orbitdb: string,
    _useExtensionManager: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  createColonyForFrontend(
    _tokenAddress: string,
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    _version: BigNumberish,
    _colonyName: string,
    _metadata: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "createColonyForFrontend(address,string,string,uint8,uint256,string,string)"(
    _tokenAddress: string,
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    _version: BigNumberish,
    _colonyName: string,
    _metadata: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  createMetaColony(
    _tokenAddress: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "createMetaColony(address)"(
    _tokenAddress: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  deployTokenAuthority(
    _token: string,
    _colony: string,
    _allowedToTransfer: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "deployTokenAuthority(address,address,address[])"(
    _token: string,
    _colony: string,
    _allowedToTransfer: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  deployTokenViaNetwork(
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "deployTokenViaNetwork(string,string,uint8)"(
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  deprecateExtension(
    _extensionId: Arrayish,
    _deprecated: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "deprecateExtension(bytes32,bool)"(
    _extensionId: Arrayish,
    _deprecated: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  deprecateSkill(
    _skillId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "deprecateSkill(uint256)"(
    _skillId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "deprecateSkill(uint256,bool)"(
    _skillId: BigNumberish,
    _deprecated: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  enterRecoveryMode(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "enterRecoveryMode()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  executeMetaTransaction(
    userAddress: string,
    payload: Arrayish,
    sigR: Arrayish,
    sigS: Arrayish,
    sigV: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(
    userAddress: string,
    payload: Arrayish,
    sigR: Arrayish,
    sigS: Arrayish,
    sigV: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  exitRecoveryMode(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "exitRecoveryMode()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getBridgedReputationUpdateCount(
    _chainId: BigNumberish,
    _colony: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getBridgedReputationUpdateCount(uint256,address)"(
    _chainId: BigNumberish,
    _colony: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getBridgedSkillCounts(
    _chainId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getBridgedSkillCounts(uint256)"(
    _chainId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getChildSkillId(
    _skillId: BigNumberish,
    _childSkillIndex: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getChildSkillId(uint256,uint256)"(
    _skillId: BigNumberish,
    _childSkillIndex: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getColony(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "getColony(uint256)"(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  getColonyBridgeAddress(overrides?: TransactionOverrides): Promise<string>;

  "getColonyBridgeAddress()"(overrides?: TransactionOverrides): Promise<string>;

  getColonyCount(overrides?: TransactionOverrides): Promise<BigNumber>;

  "getColonyCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  getColonyCreationSalt(overrides?: TransactionOverrides): Promise<string>;

  "getColonyCreationSalt()"(overrides?: TransactionOverrides): Promise<string>;

  getColonyVersionResolver(
    _version: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "getColonyVersionResolver(uint256)"(
    _version: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  getCurrentColonyVersion(overrides?: TransactionOverrides): Promise<BigNumber>;

  "getCurrentColonyVersion()"(
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getENSRegistrar(overrides?: TransactionOverrides): Promise<string>;

  "getENSRegistrar()"(overrides?: TransactionOverrides): Promise<string>;

  getExtensionInstallation(
    _extensionId: Arrayish,
    _colony: string,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "getExtensionInstallation(bytes32,address)"(
    _extensionId: Arrayish,
    _colony: string,
    overrides?: TransactionOverrides
  ): Promise<string>;

  getExtensionResolver(
    _extensionId: Arrayish,
    _version: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "getExtensionResolver(bytes32,uint256)"(
    _extensionId: Arrayish,
    _version: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  getFeeInverse(overrides?: TransactionOverrides): Promise<BigNumber>;

  "getFeeInverse()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  getMetaColony(overrides?: TransactionOverrides): Promise<string>;

  "getMetaColony()"(overrides?: TransactionOverrides): Promise<string>;

  getMetatransactionNonce(
    userAddress: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getMetatransactionNonce(address)"(
    userAddress: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getMiningChainId(overrides?: TransactionOverrides): Promise<BigNumber>;

  "getMiningChainId()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  getMiningDelegator(
    _delegate: string,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "getMiningDelegator(address)"(
    _delegate: string,
    overrides?: TransactionOverrides
  ): Promise<string>;

  getMiningResolver(overrides?: TransactionOverrides): Promise<string>;

  "getMiningResolver()"(overrides?: TransactionOverrides): Promise<string>;

  getMiningStake(
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; timestamp: BigNumber }
  >;

  "getMiningStake(address)"(
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; timestamp: BigNumber }
  >;

  getParentSkillId(
    _skillId: BigNumberish,
    _parentSkillIndex: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getParentSkillId(uint256,uint256)"(
    _skillId: BigNumberish,
    _parentSkillIndex: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getPayoutWhitelist(
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "getPayoutWhitelist(address)"(
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  getPendingReputationUpdate(
    _chainId: BigNumberish,
    _colony: string,
    _updateNumber: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [string, BigNumber, BigNumber, string, BigNumber] & {
      user: string;
      amount: BigNumber;
      skillId: BigNumber;
      colony: string;
      timestamp: BigNumber;
    }
  >;

  "getPendingReputationUpdate(uint256,address,uint256)"(
    _chainId: BigNumberish,
    _colony: string,
    _updateNumber: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [string, BigNumber, BigNumber, string, BigNumber] & {
      user: string;
      amount: BigNumber;
      skillId: BigNumber;
      colony: string;
      timestamp: BigNumber;
    }
  >;

  getPendingSkillAddition(
    _chainId: BigNumberish,
    _skillCount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getPendingSkillAddition(uint256,uint256)"(
    _chainId: BigNumberish,
    _skillCount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getProfileDBAddress(
    _node: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "getProfileDBAddress(bytes32)"(
    _node: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  getReplacementReputationUpdateLogEntry(
    _reputationMiningCycle: string,
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [string, BigNumber, BigNumber, string, BigNumber, BigNumber] & {
      user: string;
      amount: BigNumber;
      skillId: BigNumber;
      colony: string;
      nUpdates: BigNumber;
      nPreviousUpdates: BigNumber;
    }
  >;

  "getReplacementReputationUpdateLogEntry(address,uint256)"(
    _reputationMiningCycle: string,
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [string, BigNumber, BigNumber, string, BigNumber, BigNumber] & {
      user: string;
      amount: BigNumber;
      skillId: BigNumber;
      colony: string;
      nUpdates: BigNumber;
      nPreviousUpdates: BigNumber;
    }
  >;

  getReplacementReputationUpdateLogsExist(
    _reputationMiningCycle: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "getReplacementReputationUpdateLogsExist(address)"(
    _reputationMiningCycle: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  getReputationMiningCycle(
    _active: boolean,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "getReputationMiningCycle(bool)"(
    _active: boolean,
    overrides?: TransactionOverrides
  ): Promise<string>;

  getReputationMiningCycleReward(
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getReputationMiningCycleReward()"(
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getReputationMiningSkillId(
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getReputationMiningSkillId()"(
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getReputationRootHash(overrides?: TransactionOverrides): Promise<string>;

  "getReputationRootHash()"(overrides?: TransactionOverrides): Promise<string>;

  getReputationRootHashNLeaves(
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getReputationRootHashNLeaves()"(
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getReputationRootHashNNodes(
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getReputationRootHashNNodes()"(
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getSkill(
    _skillId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber[], BigNumber[], boolean, boolean] & {
      nParents: BigNumber;
      nChildren: BigNumber;
      parents: BigNumber[];
      children: BigNumber[];
      DEPRECATED_globalSkill: boolean;
      deprecated: boolean;
    }
  >;

  "getSkill(uint256)"(
    _skillId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber[], BigNumber[], boolean, boolean] & {
      nParents: BigNumber;
      nChildren: BigNumber;
      parents: BigNumber[];
      children: BigNumber[];
      DEPRECATED_globalSkill: boolean;
      deprecated: boolean;
    }
  >;

  getSkillCount(overrides?: TransactionOverrides): Promise<BigNumber>;

  "getSkillCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  getTokenLocking(overrides?: TransactionOverrides): Promise<string>;

  "getTokenLocking()"(overrides?: TransactionOverrides): Promise<string>;

  initialise(
    _resolver: string,
    _version: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "initialise(address,uint256)"(
    _resolver: string,
    _version: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  initialiseReputationMining(
    miningChainId: BigNumberish,
    newHash: Arrayish,
    newNLeaves: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "initialiseReputationMining(uint256,bytes32,uint256)"(
    miningChainId: BigNumberish,
    newHash: Arrayish,
    newNLeaves: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  initialiseRootLocalSkill(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "initialiseRootLocalSkill()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  installExtension(
    _extensionId: Arrayish,
    _version: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "installExtension(bytes32,uint256)"(
    _extensionId: Arrayish,
    _version: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  isColony(_colony: string, overrides?: TransactionOverrides): Promise<boolean>;

  "isColony(address)"(
    _colony: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  isInRecoveryMode(overrides?: TransactionOverrides): Promise<boolean>;

  "isInRecoveryMode()"(overrides?: TransactionOverrides): Promise<boolean>;

  lookupRegisteredENSDomain(
    _addr: string,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "lookupRegisteredENSDomain(address)"(
    _addr: string,
    overrides?: TransactionOverrides
  ): Promise<string>;

  multicall(
    data: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "multicall(bytes[])"(
    data: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  numRecoveryRoles(overrides?: TransactionOverrides): Promise<BigNumber>;

  "numRecoveryRoles()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  punishStakers(
    _stakers: string[],
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "punishStakers(address[],uint256)"(
    _stakers: string[],
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  registerColonyLabel(
    _colonyName: string,
    _orbitdb: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "registerColonyLabel(string,string)"(
    _colonyName: string,
    _orbitdb: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  registerUserLabel(
    _username: string,
    _orbitdb: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "registerUserLabel(string,string)"(
    _username: string,
    _orbitdb: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  removeRecoveryRole(
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "removeRecoveryRole(address)"(
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  reward(
    _recipient: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "reward(address,uint256)"(
    _recipient: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setColonyBridgeAddress(
    _bridgeAddress: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setColonyBridgeAddress(address)"(
    _bridgeAddress: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setFeeInverse(
    _feeInverse: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setFeeInverse(uint256)"(
    _feeInverse: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setMiningDelegate(
    _delegate: string,
    _allowed: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setMiningDelegate(address,bool)"(
    _delegate: string,
    _allowed: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setMiningResolver(
    _miningResolverAddress: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setMiningResolver(address)"(
    _miningResolverAddress: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setPayoutWhitelist(
    _token: string,
    _status: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setPayoutWhitelist(address,bool)"(
    _token: string,
    _status: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setRecoveryRole(
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setRecoveryRole(address)"(
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setReplacementReputationUpdateLogEntry(
    _reputationMiningCycle: string,
    _id: BigNumberish,
    _user: string,
    _amount: BigNumberish,
    _skillId: BigNumberish,
    _colony: string,
    _nUpdates: BigNumberish,
    _nPreviousUpdates: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setReplacementReputationUpdateLogEntry(address,uint256,address,int256,uint256,address,uint128,uint128)"(
    _reputationMiningCycle: string,
    _id: BigNumberish,
    _user: string,
    _amount: BigNumberish,
    _skillId: BigNumberish,
    _colony: string,
    _nUpdates: BigNumberish,
    _nPreviousUpdates: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setReputationMiningCycleReward(
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setReputationMiningCycleReward(uint256)"(
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setReputationRootHash(
    _newHash: Arrayish,
    _newNLeaves: BigNumberish,
    _stakers: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setReputationRootHash(bytes32,uint256,address[])"(
    _newHash: Arrayish,
    _newNLeaves: BigNumberish,
    _stakers: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setReputationRootHashFromBridge(
    newHash: Arrayish,
    newNLeaves: BigNumberish,
    nonce: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setReputationRootHashFromBridge(bytes32,uint256,uint256)"(
    newHash: Arrayish,
    newNLeaves: BigNumberish,
    nonce: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setStorageSlotRecovery(
    _slot: BigNumberish,
    _value: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setStorageSlotRecovery(uint256,bytes32)"(
    _slot: BigNumberish,
    _value: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setTokenLocking(
    _tokenLockingAddress: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setTokenLocking(address)"(
    _tokenLockingAddress: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setupRegistrar(
    _ens: string,
    _rootNode: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setupRegistrar(address,bytes32)"(
    _ens: string,
    _rootNode: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  stakeForMining(
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "stakeForMining(uint256)"(
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  startNextCycle(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "startNextCycle()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  startTokenAuction(
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "startTokenAuction(address)"(
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    _interfaceID: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    _interfaceID: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  uninstallExtension(
    _extensionId: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "uninstallExtension(bytes32)"(
    _extensionId: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  unstakeForMining(
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "unstakeForMining(uint256)"(
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  updateColonyOrbitDB(
    _orbitdb: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "updateColonyOrbitDB(string)"(
    _orbitdb: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  updateUserOrbitDB(
    _orbitdb: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "updateUserOrbitDB(string)"(
    _orbitdb: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  upgradeExtension(
    _extensionId: Arrayish,
    _newVersion: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "upgradeExtension(bytes32,uint256)"(
    _extensionId: Arrayish,
    _newVersion: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    AuctionCreated(auction: null, token: null, quantity: null): EventFilter;

    BridgeSet(bridgeAddress: null): EventFilter;

    ColonyAdded(
      colonyId: BigNumberish | null,
      colonyAddress: string | null,
      token: null
    ): EventFilter;

    ColonyLabelRegistered(colony: string | null, label: null): EventFilter;

    ColonyNetworkInitialised(resolver: null): EventFilter;

    ColonyVersionAdded(version: null, resolver: null): EventFilter;

    ExtensionAddedToNetwork(
      extensionId: Arrayish | null,
      version: null
    ): EventFilter;

    ExtensionDeprecated(
      extensionId: Arrayish | null,
      colony: string | null,
      deprecated: null
    ): EventFilter;

    ExtensionInstalled(
      extensionId: Arrayish | null,
      colony: string | null,
      version: null
    ): EventFilter;

    ExtensionUninstalled(
      extensionId: Arrayish | null,
      colony: string | null
    ): EventFilter;

    ExtensionUpgraded(
      extensionId: Arrayish | null,
      colony: string | null,
      version: null
    ): EventFilter;

    MetaColonyCreated(
      metaColony: null,
      token: null,
      rootSkillId: null
    ): EventFilter;

    MetaTransactionExecuted(
      userAddress: null,
      relayerAddress: null,
      payload: null
    ): EventFilter;

    MiningCycleResolverSet(miningCycleResolver: null): EventFilter;

    NetworkFeeInverseSet(feeInverse: null): EventFilter;

    RecoveryModeEntered(user: null): EventFilter;

    RecoveryModeExitApproved(user: null): EventFilter;

    RecoveryModeExited(user: null): EventFilter;

    RecoveryRoleSet(user: string | null, setTo: null): EventFilter;

    RecoveryStorageSlotSet(
      user: null,
      slot: null,
      fromValue: null,
      toValue: null
    ): EventFilter;

    RegistrarInitialised(ens: null, rootNode: null): EventFilter;

    ReputationMinerPenalised(miner: null, tokensLost: null): EventFilter;

    ReputationMiningCycleComplete(hash: null, nLeaves: null): EventFilter;

    ReputationMiningInitialised(
      inactiveReputationMiningCycle: null
    ): EventFilter;

    ReputationMiningRewardSet(amount: null): EventFilter;

    ReputationRootHashSet(
      newHash: null,
      newNLeaves: null,
      stakers: null,
      reward: null
    ): EventFilter;

    ReputationUpdateAddedFromBridge(
      chainId: null,
      colony: null,
      updateNumber: null
    ): EventFilter;

    ReputationUpdateSentToBridge(colony: null, count: null): EventFilter;

    ReputationUpdateStored(colony: null, count: null): EventFilter;

    ReputationUpdateStoredFromBridge(
      chainId: null,
      colony: null,
      updateNumber: null
    ): EventFilter;

    SkillAdded(skillId: null, parentSkillId: null): EventFilter;

    SkillAddedFromBridge(skillId: null): EventFilter;

    SkillCreationStored(skillId: null): EventFilter;

    SkillStoredFromBridge(skillId: null): EventFilter;

    TokenAuthorityDeployed(tokenAuthorityAddress: null): EventFilter;

    TokenDeployed(tokenAddress: null): EventFilter;

    TokenLockingAddressSet(tokenLocking: null): EventFilter;

    TokenWhitelisted(token: null, status: null): EventFilter;

    UserLabelRegistered(user: string | null, label: null): EventFilter;
  };

  estimate: {
    addColonyVersion(
      _version: BigNumberish,
      _resolver: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "addColonyVersion(uint256,address)"(
      _version: BigNumberish,
      _resolver: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    addExtensionToNetwork(
      _extensionId: Arrayish,
      _resolver: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "addExtensionToNetwork(bytes32,address)"(
      _extensionId: Arrayish,
      _resolver: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    addPendingReputationUpdate(
      _chainId: BigNumberish,
      _colony: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "addPendingReputationUpdate(uint256,address)"(
      _chainId: BigNumberish,
      _colony: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    addPendingSkill(
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "addPendingSkill(uint256)"(
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    addReputationUpdateLogFromBridge(
      _colony: string,
      _user: string,
      _amount: BigNumberish,
      _skillId: BigNumberish,
      _updateNumber: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "addReputationUpdateLogFromBridge(address,address,int256,uint256,uint256)"(
      _colony: string,
      _user: string,
      _amount: BigNumberish,
      _skillId: BigNumberish,
      _updateNumber: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    addSkill(
      _parentSkillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "addSkill(uint256)"(
      _parentSkillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    addSkillFromBridge(
      _parentSkillId: BigNumberish,
      _skillCount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "addSkillFromBridge(uint256,uint256)"(
      _parentSkillId: BigNumberish,
      _skillCount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    addr(_node: Arrayish, overrides?: TransactionOverrides): Promise<BigNumber>;

    "addr(bytes32)"(
      _node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    appendReputationUpdateLog(
      _user: string,
      _amount: BigNumberish,
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "appendReputationUpdateLog(address,int256,uint256)"(
      _user: string,
      _amount: BigNumberish,
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    approveExitRecovery(overrides?: TransactionOverrides): Promise<BigNumber>;

    "approveExitRecovery()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    bridgeCurrentRootHash(
      chainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "bridgeCurrentRootHash(uint256)"(
      chainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    bridgePendingReputationUpdate(
      _colony: string,
      _updateNumber: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "bridgePendingReputationUpdate(address,uint256)"(
      _colony: string,
      _updateNumber: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    bridgeSkillIfNotMiningChain(
      skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "bridgeSkillIfNotMiningChain(uint256)"(
      skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    burnUnneededRewards(
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "burnUnneededRewards(uint256)"(
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    calculateMinerWeight(
      _timeStaked: BigNumberish,
      _submissonIndex: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "calculateMinerWeight(uint256,uint256)"(
      _timeStaked: BigNumberish,
      _submissonIndex: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    checkNotAdditionalProtectedVariable(
      _slot: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "checkNotAdditionalProtectedVariable(uint256)"(
      _slot: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    claimMiningReward(
      _recipient: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "claimMiningReward(address)"(
      _recipient: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    createColony(
      _tokenAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "createColony(address)"(
      _tokenAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "createColony(address,uint256,string,string)"(
      _tokenAddress: string,
      _version: BigNumberish,
      _colonyName: string,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "createColony(address,uint256,string)"(
      _tokenAddress: string,
      _version: BigNumberish,
      _colonyName: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "createColony(address,uint256,string,string,bool)"(
      _tokenAddress: string,
      _version: BigNumberish,
      _colonyName: string,
      _orbitdb: string,
      _useExtensionManager: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    createColonyForFrontend(
      _tokenAddress: string,
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      _version: BigNumberish,
      _colonyName: string,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "createColonyForFrontend(address,string,string,uint8,uint256,string,string)"(
      _tokenAddress: string,
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      _version: BigNumberish,
      _colonyName: string,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    createMetaColony(
      _tokenAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "createMetaColony(address)"(
      _tokenAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    deployTokenAuthority(
      _token: string,
      _colony: string,
      _allowedToTransfer: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "deployTokenAuthority(address,address,address[])"(
      _token: string,
      _colony: string,
      _allowedToTransfer: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    deployTokenViaNetwork(
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "deployTokenViaNetwork(string,string,uint8)"(
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    deprecateExtension(
      _extensionId: Arrayish,
      _deprecated: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "deprecateExtension(bytes32,bool)"(
      _extensionId: Arrayish,
      _deprecated: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    deprecateSkill(
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "deprecateSkill(uint256)"(
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "deprecateSkill(uint256,bool)"(
      _skillId: BigNumberish,
      _deprecated: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    enterRecoveryMode(overrides?: TransactionOverrides): Promise<BigNumber>;

    "enterRecoveryMode()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    executeMetaTransaction(
      userAddress: string,
      payload: Arrayish,
      sigR: Arrayish,
      sigS: Arrayish,
      sigV: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(
      userAddress: string,
      payload: Arrayish,
      sigR: Arrayish,
      sigS: Arrayish,
      sigV: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    exitRecoveryMode(overrides?: TransactionOverrides): Promise<BigNumber>;

    "exitRecoveryMode()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getBridgedReputationUpdateCount(
      _chainId: BigNumberish,
      _colony: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getBridgedReputationUpdateCount(uint256,address)"(
      _chainId: BigNumberish,
      _colony: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getBridgedSkillCounts(
      _chainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getBridgedSkillCounts(uint256)"(
      _chainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getChildSkillId(
      _skillId: BigNumberish,
      _childSkillIndex: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getChildSkillId(uint256,uint256)"(
      _skillId: BigNumberish,
      _childSkillIndex: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getColony(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getColony(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getColonyBridgeAddress(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getColonyBridgeAddress()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getColonyCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getColonyCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getColonyCreationSalt(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getColonyCreationSalt()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getColonyVersionResolver(
      _version: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getColonyVersionResolver(uint256)"(
      _version: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getCurrentColonyVersion(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getCurrentColonyVersion()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getENSRegistrar(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getENSRegistrar()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getExtensionInstallation(
      _extensionId: Arrayish,
      _colony: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getExtensionInstallation(bytes32,address)"(
      _extensionId: Arrayish,
      _colony: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getExtensionResolver(
      _extensionId: Arrayish,
      _version: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getExtensionResolver(bytes32,uint256)"(
      _extensionId: Arrayish,
      _version: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getFeeInverse(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getFeeInverse()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getMetaColony(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getMetaColony()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getMetatransactionNonce(
      userAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getMetatransactionNonce(address)"(
      userAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getMiningChainId(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getMiningChainId()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getMiningDelegator(
      _delegate: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getMiningDelegator(address)"(
      _delegate: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getMiningResolver(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getMiningResolver()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getMiningStake(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getMiningStake(address)"(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getParentSkillId(
      _skillId: BigNumberish,
      _parentSkillIndex: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getParentSkillId(uint256,uint256)"(
      _skillId: BigNumberish,
      _parentSkillIndex: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getPayoutWhitelist(
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getPayoutWhitelist(address)"(
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getPendingReputationUpdate(
      _chainId: BigNumberish,
      _colony: string,
      _updateNumber: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getPendingReputationUpdate(uint256,address,uint256)"(
      _chainId: BigNumberish,
      _colony: string,
      _updateNumber: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getPendingSkillAddition(
      _chainId: BigNumberish,
      _skillCount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getPendingSkillAddition(uint256,uint256)"(
      _chainId: BigNumberish,
      _skillCount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getProfileDBAddress(
      _node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getProfileDBAddress(bytes32)"(
      _node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getReplacementReputationUpdateLogEntry(
      _reputationMiningCycle: string,
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getReplacementReputationUpdateLogEntry(address,uint256)"(
      _reputationMiningCycle: string,
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getReplacementReputationUpdateLogsExist(
      _reputationMiningCycle: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getReplacementReputationUpdateLogsExist(address)"(
      _reputationMiningCycle: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getReputationMiningCycle(
      _active: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getReputationMiningCycle(bool)"(
      _active: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getReputationMiningCycleReward(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getReputationMiningCycleReward()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getReputationMiningSkillId(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getReputationMiningSkillId()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getReputationRootHash(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getReputationRootHash()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getReputationRootHashNLeaves(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getReputationRootHashNLeaves()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getReputationRootHashNNodes(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getReputationRootHashNNodes()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getSkill(
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getSkill(uint256)"(
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getSkillCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getSkillCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getTokenLocking(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getTokenLocking()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    initialise(
      _resolver: string,
      _version: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "initialise(address,uint256)"(
      _resolver: string,
      _version: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    initialiseReputationMining(
      miningChainId: BigNumberish,
      newHash: Arrayish,
      newNLeaves: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "initialiseReputationMining(uint256,bytes32,uint256)"(
      miningChainId: BigNumberish,
      newHash: Arrayish,
      newNLeaves: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    initialiseRootLocalSkill(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "initialiseRootLocalSkill()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    installExtension(
      _extensionId: Arrayish,
      _version: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "installExtension(bytes32,uint256)"(
      _extensionId: Arrayish,
      _version: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    isColony(
      _colony: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "isColony(address)"(
      _colony: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    isInRecoveryMode(overrides?: TransactionOverrides): Promise<BigNumber>;

    "isInRecoveryMode()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    lookupRegisteredENSDomain(
      _addr: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "lookupRegisteredENSDomain(address)"(
      _addr: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    multicall(
      data: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "multicall(bytes[])"(
      data: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    numRecoveryRoles(overrides?: TransactionOverrides): Promise<BigNumber>;

    "numRecoveryRoles()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    punishStakers(
      _stakers: string[],
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "punishStakers(address[],uint256)"(
      _stakers: string[],
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    registerColonyLabel(
      _colonyName: string,
      _orbitdb: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "registerColonyLabel(string,string)"(
      _colonyName: string,
      _orbitdb: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    registerUserLabel(
      _username: string,
      _orbitdb: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "registerUserLabel(string,string)"(
      _username: string,
      _orbitdb: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    removeRecoveryRole(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "removeRecoveryRole(address)"(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    reward(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "reward(address,uint256)"(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setColonyBridgeAddress(
      _bridgeAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setColonyBridgeAddress(address)"(
      _bridgeAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setFeeInverse(
      _feeInverse: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setFeeInverse(uint256)"(
      _feeInverse: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setMiningDelegate(
      _delegate: string,
      _allowed: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setMiningDelegate(address,bool)"(
      _delegate: string,
      _allowed: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setMiningResolver(
      _miningResolverAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setMiningResolver(address)"(
      _miningResolverAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setPayoutWhitelist(
      _token: string,
      _status: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setPayoutWhitelist(address,bool)"(
      _token: string,
      _status: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setRecoveryRole(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setRecoveryRole(address)"(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setReplacementReputationUpdateLogEntry(
      _reputationMiningCycle: string,
      _id: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      _skillId: BigNumberish,
      _colony: string,
      _nUpdates: BigNumberish,
      _nPreviousUpdates: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setReplacementReputationUpdateLogEntry(address,uint256,address,int256,uint256,address,uint128,uint128)"(
      _reputationMiningCycle: string,
      _id: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      _skillId: BigNumberish,
      _colony: string,
      _nUpdates: BigNumberish,
      _nPreviousUpdates: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setReputationMiningCycleReward(
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setReputationMiningCycleReward(uint256)"(
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setReputationRootHash(
      _newHash: Arrayish,
      _newNLeaves: BigNumberish,
      _stakers: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setReputationRootHash(bytes32,uint256,address[])"(
      _newHash: Arrayish,
      _newNLeaves: BigNumberish,
      _stakers: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setReputationRootHashFromBridge(
      newHash: Arrayish,
      newNLeaves: BigNumberish,
      nonce: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setReputationRootHashFromBridge(bytes32,uint256,uint256)"(
      newHash: Arrayish,
      newNLeaves: BigNumberish,
      nonce: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setStorageSlotRecovery(
      _slot: BigNumberish,
      _value: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setStorageSlotRecovery(uint256,bytes32)"(
      _slot: BigNumberish,
      _value: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setTokenLocking(
      _tokenLockingAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setTokenLocking(address)"(
      _tokenLockingAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setupRegistrar(
      _ens: string,
      _rootNode: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setupRegistrar(address,bytes32)"(
      _ens: string,
      _rootNode: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    stakeForMining(
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "stakeForMining(uint256)"(
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    startNextCycle(overrides?: TransactionOverrides): Promise<BigNumber>;

    "startNextCycle()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    startTokenAuction(
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "startTokenAuction(address)"(
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      _interfaceID: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      _interfaceID: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    uninstallExtension(
      _extensionId: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "uninstallExtension(bytes32)"(
      _extensionId: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    unstakeForMining(
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "unstakeForMining(uint256)"(
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    updateColonyOrbitDB(
      _orbitdb: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "updateColonyOrbitDB(string)"(
      _orbitdb: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    updateUserOrbitDB(
      _orbitdb: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "updateUserOrbitDB(string)"(
      _orbitdb: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    upgradeExtension(
      _extensionId: Arrayish,
      _newVersion: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "upgradeExtension(bytes32,uint256)"(
      _extensionId: Arrayish,
      _newVersion: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
