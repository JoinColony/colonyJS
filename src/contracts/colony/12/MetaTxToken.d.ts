/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface MetaTxTokenInterface extends Interface {
  functions: {
    DOMAIN_SEPARATOR: TypedFunctionDescription<{ encode([]: []): string }>;

    PERMIT_TYPEHASH: TypedFunctionDescription<{ encode([]: []): string }>;

    allowance: TypedFunctionDescription<{
      encode([src, guy]: [string, string]): string;
    }>;

    approve: TypedFunctionDescription<{
      encode([guy, wad]: [string, BigNumberish]): string;
    }>;

    authority: TypedFunctionDescription<{ encode([]: []): string }>;

    balanceOf: TypedFunctionDescription<{ encode([src]: [string]): string }>;

    decimals: TypedFunctionDescription<{ encode([]: []): string }>;

    executeMetaTransaction: TypedFunctionDescription<{
      encode([_user, _payload, _sigR, _sigS, _sigV]: [
        string,
        Arrayish,
        Arrayish,
        Arrayish,
        BigNumberish
      ]): string;
    }>;

    getChainId: TypedFunctionDescription<{ encode([]: []): string }>;

    locked: TypedFunctionDescription<{ encode([]: []): string }>;

    name: TypedFunctionDescription<{ encode([]: []): string }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    setAuthority: TypedFunctionDescription<{
      encode([authority_]: [string]): string;
    }>;

    setOwner: TypedFunctionDescription<{ encode([owner_]: [string]): string }>;

    symbol: TypedFunctionDescription<{ encode([]: []): string }>;

    totalSupply: TypedFunctionDescription<{ encode([]: []): string }>;

    transfer: TypedFunctionDescription<{
      encode([dst, wad]: [string, BigNumberish]): string;
    }>;

    verify: TypedFunctionDescription<{
      encode([_owner, _nonce, _chainId, _payload, _sigR, _sigS, _sigV]: [
        string,
        BigNumberish,
        BigNumberish,
        Arrayish,
        Arrayish,
        Arrayish,
        BigNumberish
      ]): string;
    }>;

    getMetatransactionNonce: TypedFunctionDescription<{
      encode([_user]: [string]): string;
    }>;

    nonces: TypedFunctionDescription<{ encode([_user]: [string]): string }>;

    transferFrom: TypedFunctionDescription<{
      encode([src, dst, wad]: [string, string, BigNumberish]): string;
    }>;

    mint: TypedFunctionDescription<{
      encode([guy, wad]: [string, BigNumberish]): string;
    }>;

    burn: TypedFunctionDescription<{ encode([wad]: [BigNumberish]): string }>;

    unlock: TypedFunctionDescription<{ encode([]: []): string }>;

    permit: TypedFunctionDescription<{
      encode([owner, spender, value, deadline, v, r, s]: [
        string,
        string,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        Arrayish,
        Arrayish
      ]): string;
    }>;
  };

  events: {
    Approval: TypedEventDescription<{
      encodeTopics([src, guy, wad]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    Burn: TypedEventDescription<{
      encodeTopics([guy, wad]: [string | null, null]): string[];
    }>;

    LogSetAuthority: TypedEventDescription<{
      encodeTopics([authority]: [string | null]): string[];
    }>;

    LogSetOwner: TypedEventDescription<{
      encodeTopics([owner]: [string | null]): string[];
    }>;

    MetaTransactionExecuted: TypedEventDescription<{
      encodeTopics([user, relayerAddress, functionSignature]: [
        null,
        null,
        null
      ]): string[];
    }>;

    Mint: TypedEventDescription<{
      encodeTopics([guy, wad]: [string | null, null]): string[];
    }>;

    Transfer: TypedEventDescription<{
      encodeTopics([src, dst, wad]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;
  };
}

export class MetaTxToken extends Contract {
  connect(signerOrProvider: Signer | Provider | string): MetaTxToken;
  attach(addressOrName: string): MetaTxToken;
  deployed(): Promise<MetaTxToken>;

  on(event: EventFilter | string, listener: Listener): MetaTxToken;
  once(event: EventFilter | string, listener: Listener): MetaTxToken;
  addListener(eventName: EventFilter | string, listener: Listener): MetaTxToken;
  removeAllListeners(eventName: EventFilter | string): MetaTxToken;
  removeListener(eventName: any, listener: Listener): MetaTxToken;

  interface: MetaTxTokenInterface;

  functions: {
    DOMAIN_SEPARATOR(overrides?: TransactionOverrides): Promise<string>;

    "DOMAIN_SEPARATOR()"(overrides?: TransactionOverrides): Promise<string>;

    PERMIT_TYPEHASH(overrides?: TransactionOverrides): Promise<string>;

    "PERMIT_TYPEHASH()"(overrides?: TransactionOverrides): Promise<string>;

    allowance(
      src: string,
      guy: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      src: string,
      guy: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    approve(
      guy: string,
      wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      guy: string,
      wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    authority(overrides?: TransactionOverrides): Promise<string>;

    "authority()"(overrides?: TransactionOverrides): Promise<string>;

    balanceOf(
      src: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      src: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: TransactionOverrides): Promise<number>;

    "decimals()"(overrides?: TransactionOverrides): Promise<number>;

    /**
     * Main function to be called when user wants to execute meta transaction. The actual function to be called should be passed as param with name functionSignature Here the basic signature recovery is being used. Signature is expected to be generated using personal_sign method.
     * @param _payload Function call to make via meta transaction
     * @param _sigR R part of the signature
     * @param _sigS S part of the signature
     * @param _sigV V part of the signature
     * @param _user Address of user trying to do meta transaction
     */
    executeMetaTransaction(
      _user: string,
      _payload: Arrayish,
      _sigR: Arrayish,
      _sigS: Arrayish,
      _sigV: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Main function to be called when user wants to execute meta transaction. The actual function to be called should be passed as param with name functionSignature Here the basic signature recovery is being used. Signature is expected to be generated using personal_sign method.
     * @param _payload Function call to make via meta transaction
     * @param _sigR R part of the signature
     * @param _sigS S part of the signature
     * @param _sigV V part of the signature
     * @param _user Address of user trying to do meta transaction
     */
    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(
      _user: string,
      _payload: Arrayish,
      _sigR: Arrayish,
      _sigS: Arrayish,
      _sigV: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getChainId(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getChainId()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    locked(overrides?: TransactionOverrides): Promise<boolean>;

    "locked()"(overrides?: TransactionOverrides): Promise<boolean>;

    name(overrides?: TransactionOverrides): Promise<string>;

    "name()"(overrides?: TransactionOverrides): Promise<string>;

    owner(overrides?: TransactionOverrides): Promise<string>;

    "owner()"(overrides?: TransactionOverrides): Promise<string>;

    setAuthority(
      authority_: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setAuthority(address)"(
      authority_: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setOwner(
      owner_: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setOwner(address)"(
      owner_: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    symbol(overrides?: TransactionOverrides): Promise<string>;

    "symbol()"(overrides?: TransactionOverrides): Promise<string>;

    totalSupply(overrides?: TransactionOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    transfer(
      dst: string,
      wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      dst: string,
      wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    verify(
      _owner: string,
      _nonce: BigNumberish,
      _chainId: BigNumberish,
      _payload: Arrayish,
      _sigR: Arrayish,
      _sigS: Arrayish,
      _sigV: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "verify(address,uint256,uint256,bytes,bytes32,bytes32,uint8)"(
      _owner: string,
      _nonce: BigNumberish,
      _chainId: BigNumberish,
      _payload: Arrayish,
      _sigR: Arrayish,
      _sigS: Arrayish,
      _sigV: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    getMetatransactionNonce(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getMetatransactionNonce(address)"(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    nonces(_user: string, overrides?: TransactionOverrides): Promise<BigNumber>;

    "nonces(address)"(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    transferFrom(
      src: string,
      dst: string,
      wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      src: string,
      dst: string,
      wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    mint(
      guy: string,
      wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "mint(address,uint256)"(
      guy: string,
      wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "mint(uint256)"(
      wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    burn(
      wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "burn(uint256)"(
      wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "burn(address,uint256)"(
      guy: string,
      wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    unlock(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    "unlock()"(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: Arrayish,
      s: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: Arrayish,
      s: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: TransactionOverrides): Promise<string>;

  "DOMAIN_SEPARATOR()"(overrides?: TransactionOverrides): Promise<string>;

  PERMIT_TYPEHASH(overrides?: TransactionOverrides): Promise<string>;

  "PERMIT_TYPEHASH()"(overrides?: TransactionOverrides): Promise<string>;

  allowance(
    src: string,
    guy: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    src: string,
    guy: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  approve(
    guy: string,
    wad: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    guy: string,
    wad: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  authority(overrides?: TransactionOverrides): Promise<string>;

  "authority()"(overrides?: TransactionOverrides): Promise<string>;

  balanceOf(src: string, overrides?: TransactionOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    src: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: TransactionOverrides): Promise<number>;

  "decimals()"(overrides?: TransactionOverrides): Promise<number>;

  /**
   * Main function to be called when user wants to execute meta transaction. The actual function to be called should be passed as param with name functionSignature Here the basic signature recovery is being used. Signature is expected to be generated using personal_sign method.
   * @param _payload Function call to make via meta transaction
   * @param _sigR R part of the signature
   * @param _sigS S part of the signature
   * @param _sigV V part of the signature
   * @param _user Address of user trying to do meta transaction
   */
  executeMetaTransaction(
    _user: string,
    _payload: Arrayish,
    _sigR: Arrayish,
    _sigS: Arrayish,
    _sigV: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Main function to be called when user wants to execute meta transaction. The actual function to be called should be passed as param with name functionSignature Here the basic signature recovery is being used. Signature is expected to be generated using personal_sign method.
   * @param _payload Function call to make via meta transaction
   * @param _sigR R part of the signature
   * @param _sigS S part of the signature
   * @param _sigV V part of the signature
   * @param _user Address of user trying to do meta transaction
   */
  "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(
    _user: string,
    _payload: Arrayish,
    _sigR: Arrayish,
    _sigS: Arrayish,
    _sigV: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getChainId(overrides?: TransactionOverrides): Promise<BigNumber>;

  "getChainId()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  locked(overrides?: TransactionOverrides): Promise<boolean>;

  "locked()"(overrides?: TransactionOverrides): Promise<boolean>;

  name(overrides?: TransactionOverrides): Promise<string>;

  "name()"(overrides?: TransactionOverrides): Promise<string>;

  owner(overrides?: TransactionOverrides): Promise<string>;

  "owner()"(overrides?: TransactionOverrides): Promise<string>;

  setAuthority(
    authority_: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setAuthority(address)"(
    authority_: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setOwner(
    owner_: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setOwner(address)"(
    owner_: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  symbol(overrides?: TransactionOverrides): Promise<string>;

  "symbol()"(overrides?: TransactionOverrides): Promise<string>;

  totalSupply(overrides?: TransactionOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  transfer(
    dst: string,
    wad: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    dst: string,
    wad: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  verify(
    _owner: string,
    _nonce: BigNumberish,
    _chainId: BigNumberish,
    _payload: Arrayish,
    _sigR: Arrayish,
    _sigS: Arrayish,
    _sigV: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "verify(address,uint256,uint256,bytes,bytes32,bytes32,uint8)"(
    _owner: string,
    _nonce: BigNumberish,
    _chainId: BigNumberish,
    _payload: Arrayish,
    _sigR: Arrayish,
    _sigS: Arrayish,
    _sigV: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  getMetatransactionNonce(
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getMetatransactionNonce(address)"(
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  nonces(_user: string, overrides?: TransactionOverrides): Promise<BigNumber>;

  "nonces(address)"(
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  transferFrom(
    src: string,
    dst: string,
    wad: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    src: string,
    dst: string,
    wad: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  mint(
    guy: string,
    wad: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "mint(address,uint256)"(
    guy: string,
    wad: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "mint(uint256)"(
    wad: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  burn(
    wad: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "burn(uint256)"(
    wad: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "burn(address,uint256)"(
    guy: string,
    wad: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  unlock(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  "unlock()"(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  permit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: Arrayish,
    s: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: Arrayish,
    s: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    Approval(src: string | null, guy: string | null, wad: null): EventFilter;

    Burn(guy: string | null, wad: null): EventFilter;

    LogSetAuthority(authority: string | null): EventFilter;

    LogSetOwner(owner: string | null): EventFilter;

    MetaTransactionExecuted(
      user: null,
      relayerAddress: null,
      functionSignature: null
    ): EventFilter;

    Mint(guy: string | null, wad: null): EventFilter;

    Transfer(src: string | null, dst: string | null, wad: null): EventFilter;
  };

  estimate: {
    DOMAIN_SEPARATOR(overrides?: TransactionOverrides): Promise<BigNumber>;

    "DOMAIN_SEPARATOR()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: TransactionOverrides): Promise<BigNumber>;

    "PERMIT_TYPEHASH()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    allowance(
      src: string,
      guy: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      src: string,
      guy: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    approve(
      guy: string,
      wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      guy: string,
      wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    authority(overrides?: TransactionOverrides): Promise<BigNumber>;

    "authority()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    balanceOf(
      src: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      src: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: TransactionOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Main function to be called when user wants to execute meta transaction. The actual function to be called should be passed as param with name functionSignature Here the basic signature recovery is being used. Signature is expected to be generated using personal_sign method.
     * @param _payload Function call to make via meta transaction
     * @param _sigR R part of the signature
     * @param _sigS S part of the signature
     * @param _sigV V part of the signature
     * @param _user Address of user trying to do meta transaction
     */
    executeMetaTransaction(
      _user: string,
      _payload: Arrayish,
      _sigR: Arrayish,
      _sigS: Arrayish,
      _sigV: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Main function to be called when user wants to execute meta transaction. The actual function to be called should be passed as param with name functionSignature Here the basic signature recovery is being used. Signature is expected to be generated using personal_sign method.
     * @param _payload Function call to make via meta transaction
     * @param _sigR R part of the signature
     * @param _sigS S part of the signature
     * @param _sigV V part of the signature
     * @param _user Address of user trying to do meta transaction
     */
    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(
      _user: string,
      _payload: Arrayish,
      _sigR: Arrayish,
      _sigS: Arrayish,
      _sigV: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getChainId(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getChainId()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    locked(overrides?: TransactionOverrides): Promise<BigNumber>;

    "locked()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    name(overrides?: TransactionOverrides): Promise<BigNumber>;

    "name()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    owner(overrides?: TransactionOverrides): Promise<BigNumber>;

    "owner()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    setAuthority(
      authority_: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setAuthority(address)"(
      authority_: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setOwner(
      owner_: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setOwner(address)"(
      owner_: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: TransactionOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    totalSupply(overrides?: TransactionOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    transfer(
      dst: string,
      wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      dst: string,
      wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    verify(
      _owner: string,
      _nonce: BigNumberish,
      _chainId: BigNumberish,
      _payload: Arrayish,
      _sigR: Arrayish,
      _sigS: Arrayish,
      _sigV: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "verify(address,uint256,uint256,bytes,bytes32,bytes32,uint8)"(
      _owner: string,
      _nonce: BigNumberish,
      _chainId: BigNumberish,
      _payload: Arrayish,
      _sigR: Arrayish,
      _sigS: Arrayish,
      _sigV: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getMetatransactionNonce(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getMetatransactionNonce(address)"(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    nonces(_user: string, overrides?: TransactionOverrides): Promise<BigNumber>;

    "nonces(address)"(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    transferFrom(
      src: string,
      dst: string,
      wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      src: string,
      dst: string,
      wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    mint(
      guy: string,
      wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "mint(address,uint256)"(
      guy: string,
      wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "mint(uint256)"(
      wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    burn(
      wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "burn(uint256)"(
      wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "burn(address,uint256)"(
      guy: string,
      wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    unlock(overrides?: TransactionOverrides): Promise<BigNumber>;

    "unlock()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: Arrayish,
      s: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: Arrayish,
      s: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
