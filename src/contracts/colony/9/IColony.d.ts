/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface IColonyInterface extends Interface {
  functions: {
    approveExitRecovery: TypedFunctionDescription<{ encode([]: []): string }>;

    checkNotAdditionalProtectedVariable: TypedFunctionDescription<{
      encode([_slot]: [BigNumberish]): string;
    }>;

    enterRecoveryMode: TypedFunctionDescription<{ encode([]: []): string }>;

    executeMetaTransaction: TypedFunctionDescription<{
      encode([userAddress, payload, sigR, sigS, sigV]: [
        string,
        Arrayish,
        Arrayish,
        Arrayish,
        BigNumberish
      ]): string;
    }>;

    exitRecoveryMode: TypedFunctionDescription<{ encode([]: []): string }>;

    getMetatransactionNonce: TypedFunctionDescription<{
      encode([userAddress]: [string]): string;
    }>;

    isInRecoveryMode: TypedFunctionDescription<{ encode([]: []): string }>;

    numRecoveryRoles: TypedFunctionDescription<{ encode([]: []): string }>;

    removeRecoveryRole: TypedFunctionDescription<{
      encode([_user]: [string]): string;
    }>;

    setRecoveryRole: TypedFunctionDescription<{
      encode([_user]: [string]): string;
    }>;

    setStorageSlotRecovery: TypedFunctionDescription<{
      encode([_slot, _value]: [BigNumberish, Arrayish]): string;
    }>;

    authority: TypedFunctionDescription<{ encode([]: []): string }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    version: TypedFunctionDescription<{ encode([]: []): string }>;

    upgrade: TypedFunctionDescription<{
      encode([_newVersion]: [BigNumberish]): string;
    }>;

    finishUpgrade: TypedFunctionDescription<{ encode([]: []): string }>;

    getColonyNetwork: TypedFunctionDescription<{ encode([]: []): string }>;

    getToken: TypedFunctionDescription<{ encode([]: []): string }>;

    makeArbitraryTransaction: TypedFunctionDescription<{
      encode([_to, _action]: [string, Arrayish]): string;
    }>;

    makeArbitraryTransactions: TypedFunctionDescription<{
      encode([_targets, _actions, _strict]: [
        string[],
        Arrayish[],
        boolean
      ]): string;
    }>;

    makeSingleArbitraryTransaction: TypedFunctionDescription<{
      encode([_target, _action]: [string, Arrayish]): string;
    }>;

    annotateTransaction: TypedFunctionDescription<{
      encode([_txHash, _metadata]: [Arrayish, string]): string;
    }>;

    setRootRole: TypedFunctionDescription<{
      encode([_user, _setTo]: [string, boolean]): string;
    }>;

    setArbitrationRole: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _user,
        _domainId,
        _setTo,
      ]: [BigNumberish, BigNumberish, string, BigNumberish, boolean]): string;
    }>;

    setArchitectureRole: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _user,
        _domainId,
        _setTo,
      ]: [BigNumberish, BigNumberish, string, BigNumberish, boolean]): string;
    }>;

    setFundingRole: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _user,
        _domainId,
        _setTo,
      ]: [BigNumberish, BigNumberish, string, BigNumberish, boolean]): string;
    }>;

    setAdministrationRole: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _user,
        _domainId,
        _setTo,
      ]: [BigNumberish, BigNumberish, string, BigNumberish, boolean]): string;
    }>;

    setUserRoles: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _user,
        _domainId,
        _roles,
      ]: [BigNumberish, BigNumberish, string, BigNumberish, Arrayish]): string;
    }>;

    hasUserRole: TypedFunctionDescription<{
      encode([_user, _domainId, _role]: [
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    hasInheritedUserRole: TypedFunctionDescription<{
      encode([_user, _domainId, _role, _childSkillIndex, _childDomainId]: [
        string,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    userCanSetRoles: TypedFunctionDescription<{
      encode([_user, _domainId, _childSkillIndex, _childDomainId]: [
        string,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    getUserRoles: TypedFunctionDescription<{
      encode([_user, _domain]: [string, BigNumberish]): string;
    }>;

    getCapabilityRoles: TypedFunctionDescription<{
      encode([_sig]: [Arrayish]): string;
    }>;

    emitDomainReputationReward: TypedFunctionDescription<{
      encode([_domainId, _user, _amount]: [
        BigNumberish,
        string,
        BigNumberish
      ]): string;
    }>;

    emitSkillReputationReward: TypedFunctionDescription<{
      encode([_skillId, _user, _amount]: [
        BigNumberish,
        string,
        BigNumberish
      ]): string;
    }>;

    emitDomainReputationPenalty: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _domainId,
        _user,
        _amount,
      ]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string,
        BigNumberish
      ]): string;
    }>;

    emitSkillReputationPenalty: TypedFunctionDescription<{
      encode([_skillId, _user, _amount]: [
        BigNumberish,
        string,
        BigNumberish
      ]): string;
    }>;

    initialiseColony: TypedFunctionDescription<{
      encode([_colonyNetworkAddress, _token]: [string, string]): string;
    }>;

    editColony: TypedFunctionDescription<{
      encode([_metadata]: [string]): string;
    }>;

    editColonyByDelta: TypedFunctionDescription<{
      encode([_metadataDelta]: [string]): string;
    }>;

    bootstrapColony: TypedFunctionDescription<{
      encode([_users, _amount]: [string[], BigNumberish[]]): string;
    }>;

    mintTokens: TypedFunctionDescription<{
      encode([_wad]: [BigNumberish]): string;
    }>;

    mintTokensFor: TypedFunctionDescription<{
      encode([_guy, _wad]: [string, BigNumberish]): string;
    }>;

    lockToken: TypedFunctionDescription<{ encode([]: []): string }>;

    unlockTokenForUser: TypedFunctionDescription<{
      encode([user, lockId]: [string, BigNumberish]): string;
    }>;

    registerColonyLabel: TypedFunctionDescription<{
      encode([colonyName, orbitdb]: [string, string]): string;
    }>;

    updateColonyOrbitDB: TypedFunctionDescription<{
      encode([orbitdb]: [string]): string;
    }>;

    installExtension: TypedFunctionDescription<{
      encode([extensionId, version]: [Arrayish, BigNumberish]): string;
    }>;

    upgradeExtension: TypedFunctionDescription<{
      encode([extensionId, newVersion]: [Arrayish, BigNumberish]): string;
    }>;

    deprecateExtension: TypedFunctionDescription<{
      encode([extensionId, deprecated]: [Arrayish, boolean]): string;
    }>;

    uninstallExtension: TypedFunctionDescription<{
      encode([extensionId]: [Arrayish]): string;
    }>;

    initialiseRootLocalSkill: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    addLocalSkill: TypedFunctionDescription<{ encode([]: []): string }>;

    deprecateLocalSkill: TypedFunctionDescription<{
      encode([localSkillId, deprecated]: [BigNumberish, boolean]): string;
    }>;

    getRootLocalSkill: TypedFunctionDescription<{ encode([]: []): string }>;

    addDomain: TypedFunctionDescription<{
      encode([_permissionDomainId, _childSkillIndex, _parentDomainId]: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    editDomain: TypedFunctionDescription<{
      encode([_permissionDomainId, _childSkillIndex, _domainId, _metadata]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    getDomain: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    getDomainCount: TypedFunctionDescription<{ encode([]: []): string }>;

    verifyReputationProof: TypedFunctionDescription<{
      encode([key, value, branchMask, siblings]: [
        Arrayish,
        Arrayish,
        BigNumberish,
        Arrayish[]
      ]): string;
    }>;

    setDefaultGlobalClaimDelay: TypedFunctionDescription<{
      encode([_globalClaimDelay]: [BigNumberish]): string;
    }>;

    makeExpenditure: TypedFunctionDescription<{
      encode([_permissionDomainId, _childSkillIndex, _domainId]: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    transferExpenditure: TypedFunctionDescription<{
      encode([_id, _newOwner]: [BigNumberish, string]): string;
    }>;

    transferExpenditureViaArbitration: TypedFunctionDescription<{
      encode([_permissionDomainId, _childSkillIndex, _id, _newOwner]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    cancelExpenditure: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    lockExpenditure: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    finalizeExpenditure: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    setExpenditureMetadata: TypedFunctionDescription<{
      encode([_permissionDomainId, _childSkillIndex, _id, _metadata]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    setExpenditureRecipient: TypedFunctionDescription<{
      encode([_id, _slot, _recipient]: [
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    setExpenditureRecipients: TypedFunctionDescription<{
      encode([_id, _slots, _recipients]: [
        BigNumberish,
        BigNumberish[],
        string[]
      ]): string;
    }>;

    setExpenditurePayout: TypedFunctionDescription<{
      encode([_id, _slot, _token, _amount]: [
        BigNumberish,
        BigNumberish,
        string,
        BigNumberish
      ]): string;
    }>;

    setExpenditurePayouts: TypedFunctionDescription<{
      encode([_id, _slots, _token, _amounts]: [
        BigNumberish,
        BigNumberish[],
        string,
        BigNumberish[]
      ]): string;
    }>;

    setExpenditureSkill: TypedFunctionDescription<{
      encode([_id, _slot, _skillId]: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    setExpenditureSkills: TypedFunctionDescription<{
      encode([_id, _slots, _skillIds]: [
        BigNumberish,
        BigNumberish[],
        BigNumberish[]
      ]): string;
    }>;

    setExpenditureClaimDelay: TypedFunctionDescription<{
      encode([_id, _slot, _claimDelay]: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    setExpenditureClaimDelays: TypedFunctionDescription<{
      encode([_id, _slots, _claimDelays]: [
        BigNumberish,
        BigNumberish[],
        BigNumberish[]
      ]): string;
    }>;

    setExpenditurePayoutModifiers: TypedFunctionDescription<{
      encode([_id, _slots, _payoutModifiers]: [
        BigNumberish,
        BigNumberish[],
        BigNumberish[]
      ]): string;
    }>;

    setExpenditureState: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _id,
        _storageSlot,
        _mask,
        _keys,
        _value,
      ]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        boolean[],
        Arrayish[],
        Arrayish
      ]): string;
    }>;

    claimExpenditurePayout: TypedFunctionDescription<{
      encode([_id, _slot, _token]: [
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    getExpenditureCount: TypedFunctionDescription<{ encode([]: []): string }>;

    getExpenditure: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    getExpenditureSlot: TypedFunctionDescription<{
      encode([_id, _slot]: [BigNumberish, BigNumberish]): string;
    }>;

    getExpenditureSlotPayout: TypedFunctionDescription<{
      encode([_id, _slot, _token]: [
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    addPayment: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _recipient,
        _token,
        _amount,
        _domainId,
        _skillId,
      ]: [
        BigNumberish,
        BigNumberish,
        string,
        string,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    finalizePayment: TypedFunctionDescription<{
      encode([_permissionDomainId, _childSkillIndex, _id]: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    setPaymentRecipient: TypedFunctionDescription<{
      encode([_permissionDomainId, _childSkillIndex, _id, _recipient]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    setPaymentSkill: TypedFunctionDescription<{
      encode([_permissionDomainId, _childSkillIndex, _id, _skillId]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    setPaymentPayout: TypedFunctionDescription<{
      encode([_permissionDomainId, _childSkillIndex, _id, _token, _amount]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string,
        BigNumberish
      ]): string;
    }>;

    getPayment: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    claimPayment: TypedFunctionDescription<{
      encode([_id, _token]: [BigNumberish, string]): string;
    }>;

    getPaymentCount: TypedFunctionDescription<{ encode([]: []): string }>;

    makeTask: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _specificationHash,
        _domainId,
        _skillId,
        _dueDate,
      ]: [
        BigNumberish,
        BigNumberish,
        Arrayish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    getTaskCount: TypedFunctionDescription<{ encode([]: []): string }>;

    getTaskChangeNonce: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    executeTaskChange: TypedFunctionDescription<{
      encode([_sigV, _sigR, _sigS, _mode, _value, _data]: [
        BigNumberish[],
        Arrayish[],
        Arrayish[],
        BigNumberish[],
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    executeTaskRoleAssignment: TypedFunctionDescription<{
      encode([_sigV, _sigR, _sigS, _mode, _value, _data]: [
        BigNumberish[],
        Arrayish[],
        Arrayish[],
        BigNumberish[],
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    submitTaskWorkRating: TypedFunctionDescription<{
      encode([_id, _role, _ratingSecret]: [
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    revealTaskWorkRating: TypedFunctionDescription<{
      encode([_id, _role, _rating, _salt]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    generateSecret: TypedFunctionDescription<{
      encode([_salt, _value]: [Arrayish, BigNumberish]): string;
    }>;

    getTaskWorkRatingSecretsInfo: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    getTaskWorkRatingSecret: TypedFunctionDescription<{
      encode([_id, _role]: [BigNumberish, BigNumberish]): string;
    }>;

    setTaskManagerRole: TypedFunctionDescription<{
      encode([_id, _user, _permissionDomainId, _childSkillIndex]: [
        BigNumberish,
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    setTaskEvaluatorRole: TypedFunctionDescription<{
      encode([_id, _user]: [BigNumberish, string]): string;
    }>;

    setTaskWorkerRole: TypedFunctionDescription<{
      encode([_id, _user]: [BigNumberish, string]): string;
    }>;

    removeTaskEvaluatorRole: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    removeTaskWorkerRole: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    setTaskSkill: TypedFunctionDescription<{
      encode([_id, _skillId]: [BigNumberish, BigNumberish]): string;
    }>;

    setTaskBrief: TypedFunctionDescription<{
      encode([_id, _specificationHash]: [BigNumberish, Arrayish]): string;
    }>;

    setTaskDueDate: TypedFunctionDescription<{
      encode([_id, _dueDate]: [BigNumberish, BigNumberish]): string;
    }>;

    submitTaskDeliverable: TypedFunctionDescription<{
      encode([_id, _deliverableHash]: [BigNumberish, Arrayish]): string;
    }>;

    submitTaskDeliverableAndRating: TypedFunctionDescription<{
      encode([_id, _deliverableHash, _ratingSecret]: [
        BigNumberish,
        Arrayish,
        Arrayish
      ]): string;
    }>;

    finalizeTask: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    cancelTask: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    completeTask: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    getTask: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    getTaskRole: TypedFunctionDescription<{
      encode([_id, _role]: [BigNumberish, BigNumberish]): string;
    }>;

    setRewardInverse: TypedFunctionDescription<{
      encode([_rewardInverse]: [BigNumberish]): string;
    }>;

    getRewardInverse: TypedFunctionDescription<{ encode([]: []): string }>;

    getTaskPayout: TypedFunctionDescription<{
      encode([_id, _role, _token]: [
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    setTaskManagerPayout: TypedFunctionDescription<{
      encode([_id, _token, _amount]: [
        BigNumberish,
        string,
        BigNumberish
      ]): string;
    }>;

    setTaskEvaluatorPayout: TypedFunctionDescription<{
      encode([_id, _token, _amount]: [
        BigNumberish,
        string,
        BigNumberish
      ]): string;
    }>;

    setTaskWorkerPayout: TypedFunctionDescription<{
      encode([_id, _token, _amount]: [
        BigNumberish,
        string,
        BigNumberish
      ]): string;
    }>;

    setAllTaskPayouts: TypedFunctionDescription<{
      encode([_id, _token, _managerAmount, _evaluatorAmount, _workerAmount]: [
        BigNumberish,
        string,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    claimTaskPayout: TypedFunctionDescription<{
      encode([_id, _role, _token]: [
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    startNextRewardPayout: TypedFunctionDescription<{
      encode([_token, key, value, branchMask, siblings]: [
        string,
        Arrayish,
        Arrayish,
        BigNumberish,
        Arrayish[]
      ]): string;
    }>;

    claimRewardPayout: TypedFunctionDescription<{
      encode([_payoutId, _squareRoots, key, value, branchMask, siblings]: [
        BigNumberish,
        BigNumberish[],
        Arrayish,
        Arrayish,
        BigNumberish,
        Arrayish[]
      ]): string;
    }>;

    getRewardPayoutInfo: TypedFunctionDescription<{
      encode([_payoutId]: [BigNumberish]): string;
    }>;

    finalizeRewardPayout: TypedFunctionDescription<{
      encode([_payoutId]: [BigNumberish]): string;
    }>;

    getFundingPot: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    getFundingPotCount: TypedFunctionDescription<{ encode([]: []): string }>;

    getFundingPotBalance: TypedFunctionDescription<{
      encode([_potId, _token]: [BigNumberish, string]): string;
    }>;

    getFundingPotPayout: TypedFunctionDescription<{
      encode([_potId, _token]: [BigNumberish, string]): string;
    }>;

    moveFundsBetweenPots: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _domainId,
        _fromChildSkillIndex,
        _toChildSkillIndex,
        _fromPot,
        _toPot,
        _amount,
        _token,
      ]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    claimColonyFunds: TypedFunctionDescription<{
      encode([_token]: [string]): string;
    }>;

    getNonRewardPotsTotal: TypedFunctionDescription<{
      encode([_token]: [string]): string;
    }>;

    approveStake: TypedFunctionDescription<{
      encode([_approvee, _domainId, _amount]: [
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    obligateStake: TypedFunctionDescription<{
      encode([_user, _domainId, _amount]: [
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    deobligateStake: TypedFunctionDescription<{
      encode([_user, _domainId, _amount]: [
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    transferStake: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _obligator,
        _user,
        _domainId,
        _amount,
        _recipient,
      ]: [
        BigNumberish,
        BigNumberish,
        string,
        string,
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    getApproval: TypedFunctionDescription<{
      encode([_user, _obligator, _domainId]: [
        string,
        string,
        BigNumberish
      ]): string;
    }>;

    getObligation: TypedFunctionDescription<{
      encode([_user, _obligator, _domainId]: [
        string,
        string,
        BigNumberish
      ]): string;
    }>;

    getDomainFromFundingPot: TypedFunctionDescription<{
      encode([_fundingPotId]: [BigNumberish]): string;
    }>;

    burnTokens: TypedFunctionDescription<{
      encode([token, amount]: [string, BigNumberish]): string;
    }>;

    unlockToken: TypedFunctionDescription<{ encode([]: []): string }>;

    updateApprovalAmount: TypedFunctionDescription<{
      encode([token, spender]: [string, string]): string;
    }>;

    getTokenApproval: TypedFunctionDescription<{
      encode([token, spender]: [string, string]): string;
    }>;

    getTotalTokenApproval: TypedFunctionDescription<{
      encode([token]: [string]): string;
    }>;
  };

  events: {
    Annotation: TypedEventDescription<{
      encodeTopics([agent, txHash, metadata]: [
        string | null,
        Arrayish | null,
        null
      ]): string[];
    }>;

    ArbitraryReputationUpdate: TypedEventDescription<{
      encodeTopics([agent, user, skillId, amount]: [
        null,
        null,
        null,
        null
      ]): string[];
    }>;

    ColonyBootstrapped: TypedEventDescription<{
      encodeTopics([agent, users, amounts]: [null, null, null]): string[];
    }>;

    ColonyFundsClaimed: TypedEventDescription<{
      encodeTopics([agent, token, fee, payoutRemainder]: [
        null,
        null,
        null,
        null
      ]): string[];
    }>;

    ColonyFundsMovedBetweenFundingPots: TypedEventDescription<{
      encodeTopics([agent, fromPot, toPot, amount, token]: [
        null,
        BigNumberish | null,
        BigNumberish | null,
        null,
        null
      ]): string[];
    }>;

    ColonyInitialised: TypedEventDescription<{
      encodeTopics([agent, colonyNetwork, token]: [null, null, null]): string[];
    }>;

    ColonyMetadata: TypedEventDescription<{
      encodeTopics([agent, metadata]: [null, null]): string[];
    }>;

    ColonyMetadataDelta: TypedEventDescription<{
      encodeTopics([agent, metadata]: [null, null]): string[];
    }>;

    ColonyRewardInverseSet: TypedEventDescription<{
      encodeTopics([agent, rewardInverse]: [null, null]): string[];
    }>;

    ColonyRoleSet: TypedEventDescription<{
      encodeTopics([agent, user, domainId, role, setTo]: [
        null,
        string | null,
        BigNumberish | null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    ColonyUpgraded: TypedEventDescription<{
      encodeTopics([agent, oldVersion, newVersion]: [
        null,
        null,
        null
      ]): string[];
    }>;

    DomainAdded: TypedEventDescription<{
      encodeTopics([agent, domainId]: [null, null]): string[];
    }>;

    DomainMetadata: TypedEventDescription<{
      encodeTopics([agent, domainId, metadata]: [
        null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    ExpenditureAdded: TypedEventDescription<{
      encodeTopics([agent, expenditureId]: [null, null]): string[];
    }>;

    ExpenditureCancelled: TypedEventDescription<{
      encodeTopics([agent, expenditureId]: [
        null,
        BigNumberish | null
      ]): string[];
    }>;

    ExpenditureClaimDelaySet: TypedEventDescription<{
      encodeTopics([agent, expenditureId, slot, claimDelay]: [
        null,
        BigNumberish | null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    ExpenditureFinalized: TypedEventDescription<{
      encodeTopics([agent, expenditureId]: [
        null,
        BigNumberish | null
      ]): string[];
    }>;

    ExpenditureGlobalClaimDelaySet: TypedEventDescription<{
      encodeTopics([agent, globalClaimDelay]: [null, null]): string[];
    }>;

    ExpenditureLocked: TypedEventDescription<{
      encodeTopics([agent, expenditureId]: [
        null,
        BigNumberish | null
      ]): string[];
    }>;

    ExpenditureMetadataSet: TypedEventDescription<{
      encodeTopics([agent, expenditureId, metadata]: [
        null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    ExpenditurePayoutModifierSet: TypedEventDescription<{
      encodeTopics([agent, expenditureId, slot, payoutModifier]: [
        null,
        BigNumberish | null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    ExpenditurePayoutSet: TypedEventDescription<{
      encodeTopics([agent, expenditureId, slot, token, amount]: [
        null,
        BigNumberish | null,
        BigNumberish | null,
        string | null,
        null
      ]): string[];
    }>;

    ExpenditureRecipientSet: TypedEventDescription<{
      encodeTopics([agent, expenditureId, slot, recipient]: [
        null,
        BigNumberish | null,
        BigNumberish | null,
        string | null
      ]): string[];
    }>;

    ExpenditureSkillSet: TypedEventDescription<{
      encodeTopics([agent, expenditureId, slot, skillId]: [
        null,
        BigNumberish | null,
        BigNumberish | null,
        BigNumberish | null
      ]): string[];
    }>;

    ExpenditureTransferred: TypedEventDescription<{
      encodeTopics([agent, expenditureId, owner]: [
        null,
        BigNumberish | null,
        string | null
      ]): string[];
    }>;

    FundingPotAdded: TypedEventDescription<{
      encodeTopics([fundingPotId]: [null]): string[];
    }>;

    LocalSkillAdded: TypedEventDescription<{
      encodeTopics([agent, localSkillId]: [null, null]): string[];
    }>;

    LocalSkillDeprecated: TypedEventDescription<{
      encodeTopics([agent, localSkillId, deprecated]: [
        null,
        null,
        null
      ]): string[];
    }>;

    MetaTransactionExecuted: TypedEventDescription<{
      encodeTopics([userAddress, relayerAddress, payload]: [
        null,
        null,
        null
      ]): string[];
    }>;

    PaymentAdded: TypedEventDescription<{
      encodeTopics([agent, paymentId]: [null, null]): string[];
    }>;

    PaymentFinalized: TypedEventDescription<{
      encodeTopics([agent, paymentId]: [null, BigNumberish | null]): string[];
    }>;

    PaymentPayoutSet: TypedEventDescription<{
      encodeTopics([agent, paymentId, token, amount]: [
        null,
        BigNumberish | null,
        null,
        null
      ]): string[];
    }>;

    PaymentRecipientSet: TypedEventDescription<{
      encodeTopics([agent, paymentId, recipient]: [
        null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    PaymentSkillSet: TypedEventDescription<{
      encodeTopics([agent, paymentId, skillId]: [
        null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    PayoutClaimed: TypedEventDescription<{
      encodeTopics([agent, fundingPotId, token, amount]: [
        null,
        BigNumberish | null,
        null,
        null
      ]): string[];
    }>;

    RecoveryModeEntered: TypedEventDescription<{
      encodeTopics([user]: [null]): string[];
    }>;

    RecoveryModeExitApproved: TypedEventDescription<{
      encodeTopics([user]: [null]): string[];
    }>;

    RecoveryModeExited: TypedEventDescription<{
      encodeTopics([user]: [null]): string[];
    }>;

    RecoveryRoleSet: TypedEventDescription<{
      encodeTopics([user, setTo]: [string | null, null]): string[];
    }>;

    RecoveryStorageSlotSet: TypedEventDescription<{
      encodeTopics([user, slot, fromValue, toValue]: [
        null,
        null,
        null,
        null
      ]): string[];
    }>;

    RewardPayoutClaimed: TypedEventDescription<{
      encodeTopics([rewardPayoutId, user, fee, rewardRemainder]: [
        null,
        null,
        null,
        null
      ]): string[];
    }>;

    RewardPayoutCycleEnded: TypedEventDescription<{
      encodeTopics([agent, rewardPayoutId]: [null, null]): string[];
    }>;

    RewardPayoutCycleStarted: TypedEventDescription<{
      encodeTopics([agent, rewardPayoutId]: [null, null]): string[];
    }>;

    TaskAdded: TypedEventDescription<{
      encodeTopics([agent, taskId]: [null, null]): string[];
    }>;

    TaskBriefSet: TypedEventDescription<{
      encodeTopics([taskId, specificationHash]: [
        BigNumberish | null,
        null
      ]): string[];
    }>;

    TaskCanceled: TypedEventDescription<{
      encodeTopics([taskId]: [BigNumberish | null]): string[];
    }>;

    TaskChangedViaSignatures: TypedEventDescription<{
      encodeTopics([reviewerAddresses]: [null]): string[];
    }>;

    TaskCompleted: TypedEventDescription<{
      encodeTopics([agent, taskId]: [null, BigNumberish | null]): string[];
    }>;

    TaskDeliverableSubmitted: TypedEventDescription<{
      encodeTopics([agent, taskId, deliverableHash]: [
        null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    TaskDueDateSet: TypedEventDescription<{
      encodeTopics([taskId, dueDate]: [BigNumberish | null, null]): string[];
    }>;

    TaskFinalized: TypedEventDescription<{
      encodeTopics([agent, taskId]: [null, BigNumberish | null]): string[];
    }>;

    TaskPayoutSet: TypedEventDescription<{
      encodeTopics([taskId, role, token, amount]: [
        BigNumberish | null,
        null,
        null,
        null
      ]): string[];
    }>;

    TaskRoleUserSet: TypedEventDescription<{
      encodeTopics([taskId, role, user]: [
        BigNumberish | null,
        null,
        string | null
      ]): string[];
    }>;

    TaskSkillSet: TypedEventDescription<{
      encodeTopics([taskId, skillId]: [
        BigNumberish | null,
        BigNumberish | null
      ]): string[];
    }>;

    TaskWorkRatingRevealed: TypedEventDescription<{
      encodeTopics([agent, taskId, role, rating]: [
        null,
        BigNumberish | null,
        null,
        null
      ]): string[];
    }>;

    TokenUnlocked: TypedEventDescription<{
      encodeTopics([agent]: [null]): string[];
    }>;

    TokensBurned: TypedEventDescription<{
      encodeTopics([agent, token, amount]: [null, null, null]): string[];
    }>;

    TokensMinted: TypedEventDescription<{
      encodeTopics([agent, who, amount]: [null, null, null]): string[];
    }>;
  };
}

export class IColony extends Contract {
  connect(signerOrProvider: Signer | Provider | string): IColony;
  attach(addressOrName: string): IColony;
  deployed(): Promise<IColony>;

  on(event: EventFilter | string, listener: Listener): IColony;
  once(event: EventFilter | string, listener: Listener): IColony;
  addListener(eventName: EventFilter | string, listener: Listener): IColony;
  removeAllListeners(eventName: EventFilter | string): IColony;
  removeListener(eventName: any, listener: Listener): IColony;

  interface: IColonyInterface;

  functions: {
    /**
     * Indicate approval to exit recovery mode. Can only be called by user with recovery role.
     */
    approveExitRecovery(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Indicate approval to exit recovery mode. Can only be called by user with recovery role.
     */
    "approveExitRecovery()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * No return value, but should throw if protected.This is external, but is only expected to be called from ContractRecovery; no need toexpose this to any users.
     * Check whether the supplied slot is a protected variable specific to this contract
     * @param _slot The storage slot number to check.
     */
    checkNotAdditionalProtectedVariable(
      _slot: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<void>;

    /**
     * No return value, but should throw if protected.This is external, but is only expected to be called from ContractRecovery; no need toexpose this to any users.
     * Check whether the supplied slot is a protected variable specific to this contract
     * @param _slot The storage slot number to check.
     */
    "checkNotAdditionalProtectedVariable(uint256)"(
      _slot: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<void>;

    /**
     * Put colony network mining into recovery mode. Can only be called by user with recovery role.
     */
    enterRecoveryMode(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Put colony network mining into recovery mode. Can only be called by user with recovery role.
     */
    "enterRecoveryMode()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Executes a metatransaction targeting this contract
     * @param payload The transaction data that will be executed if signature valid
     * @param sigR The 'r' part of the signature
     * @param sigS The 's' part of the signature
     * @param sigV The 'v' part of the signature
     * @param userAddress The address of the user that signed the metatransaction
     */
    executeMetaTransaction(
      userAddress: string,
      payload: Arrayish,
      sigR: Arrayish,
      sigS: Arrayish,
      sigV: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Executes a metatransaction targeting this contract
     * @param payload The transaction data that will be executed if signature valid
     * @param sigR The 'r' part of the signature
     * @param sigS The 's' part of the signature
     * @param sigV The 'v' part of the signature
     * @param userAddress The address of the user that signed the metatransaction
     */
    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(
      userAddress: string,
      payload: Arrayish,
      sigR: Arrayish,
      sigS: Arrayish,
      sigV: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Exit recovery mode, can be called by anyone if enough whitelist approvals are given.
     */
    exitRecoveryMode(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Exit recovery mode, can be called by anyone if enough whitelist approvals are given.
     */
    "exitRecoveryMode()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Gets the next metatransaction nonce for user that should be used targeting this contract
     * @param userAddress The address of the user that will sign the metatransaction
     */
    getMetatransactionNonce(
      userAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Gets the next metatransaction nonce for user that should be used targeting this contract
     * @param userAddress The address of the user that will sign the metatransaction
     */
    "getMetatransactionNonce(address)"(
      userAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Is colony network in recovery mode.
     */
    isInRecoveryMode(overrides?: TransactionOverrides): Promise<boolean>;

    /**
     * Is colony network in recovery mode.
     */
    "isInRecoveryMode()"(overrides?: TransactionOverrides): Promise<boolean>;

    /**
     * Return number of recovery roles.
     */
    numRecoveryRoles(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Return number of recovery roles.
     */
    "numRecoveryRoles()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Remove colony recovery role. Can only be called by root role.
     * @param _user User we want to remove recovery role from
     */
    removeRecoveryRole(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Remove colony recovery role. Can only be called by root role.
     * @param _user User we want to remove recovery role from
     */
    "removeRecoveryRole(address)"(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Set new colony recovery role. Can be called by root.
     * @param _user User we want to give a recovery role to
     */
    setRecoveryRole(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Set new colony recovery role. Can be called by root.
     * @param _user User we want to give a recovery role to
     */
    "setRecoveryRole(address)"(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * certain critical variables are protected from editing in this function
     * Update value of arbitrary storage variable. Can only be called by user with recovery role.
     * @param _slot Uint address of storage slot to be updated
     * @param _value word of data to be set
     */
    setStorageSlotRecovery(
      _slot: BigNumberish,
      _value: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * certain critical variables are protected from editing in this function
     * Update value of arbitrary storage variable. Can only be called by user with recovery role.
     * @param _slot Uint address of storage slot to be updated
     * @param _value word of data to be set
     */
    "setStorageSlotRecovery(uint256,bytes32)"(
      _slot: BigNumberish,
      _value: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Get the `ColonyAuthority` for the colony.
     */
    authority(overrides?: TransactionOverrides): Promise<string>;

    /**
     * Get the `ColonyAuthority` for the colony.
     */
    "authority()"(overrides?: TransactionOverrides): Promise<string>;

    /**
     * Used for testing.
     * Get the colony `owner` address. This should be address(0x0) at all times.
     */
    owner(overrides?: TransactionOverrides): Promise<string>;

    /**
     * Used for testing.
     * Get the colony `owner` address. This should be address(0x0) at all times.
     */
    "owner()"(overrides?: TransactionOverrides): Promise<string>;

    /**
     * Get the Colony contract version. Starts from 1 and is incremented with every deployed contract change.
     */
    version(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the Colony contract version. Starts from 1 and is incremented with every deployed contract change.
     */
    "version()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Downgrades are not allowed, i.e. `_newVersion` should be higher than the currect colony version.
     * Upgrades a colony to a new Colony contract version `_newVersion`.
     * @param _newVersion The target version for the upgrade
     */
    upgrade(
      _newVersion: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Downgrades are not allowed, i.e. `_newVersion` should be higher than the currect colony version.
     * Upgrades a colony to a new Colony contract version `_newVersion`.
     * @param _newVersion The target version for the upgrade
     */
    "upgrade(uint256)"(
      _newVersion: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Can only be called by the colony itself, and only expected to be called as part of the `upgrade()` call. Required to be external so it can be an external call.
     * A function to be called after an upgrade has been done from v2 to v3.
     */
    finishUpgrade(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Can only be called by the colony itself, and only expected to be called as part of the `upgrade()` call. Required to be external so it can be an external call.
     * A function to be called after an upgrade has been done from v2 to v3.
     */
    "finishUpgrade()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * The colonyNetworkAddress we read here is set once, during `initialiseColony`.
     * Returns the colony network address set on the Colony.
     */
    getColonyNetwork(overrides?: TransactionOverrides): Promise<string>;

    /**
     * The colonyNetworkAddress we read here is set once, during `initialiseColony`.
     * Returns the colony network address set on the Colony.
     */
    "getColonyNetwork()"(overrides?: TransactionOverrides): Promise<string>;

    /**
     * Get the colony token.
     */
    getToken(overrides?: TransactionOverrides): Promise<string>;

    /**
     * Get the colony token.
     */
    "getToken()"(overrides?: TransactionOverrides): Promise<string>;

    /**
     * Execute arbitrary transaction on behalf of the Colony DEPRECATED
     * @param _action Bytes array encoding the function call and arguments
     * @param _to Contract to receive the function call (cannot be this contract, network or token locking)
     */
    makeArbitraryTransaction(
      _to: string,
      _action: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Execute arbitrary transaction on behalf of the Colony DEPRECATED
     * @param _action Bytes array encoding the function call and arguments
     * @param _to Contract to receive the function call (cannot be this contract, network or token locking)
     */
    "makeArbitraryTransaction(address,bytes)"(
      _to: string,
      _action: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Execute arbitrary transactions on behalf of the Colony in series
     * @param _actions Array of Bytes arrays encoding the function calls and arguments
     * @param _strict Boolean indicating whether if one transaction fails, the whole call to this function should fail.
     * @param _targets Array of addressed to be targeted
     */
    makeArbitraryTransactions(
      _targets: string[],
      _actions: Arrayish[],
      _strict: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Execute arbitrary transactions on behalf of the Colony in series
     * @param _actions Array of Bytes arrays encoding the function calls and arguments
     * @param _strict Boolean indicating whether if one transaction fails, the whole call to this function should fail.
     * @param _targets Array of addressed to be targeted
     */
    "makeArbitraryTransactions(address[],bytes[],bool)"(
      _targets: string[],
      _actions: Arrayish[],
      _strict: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Only callable by the colony itself. If you wish to use this functionality, you should use the makeAbitraryTransactions function
     * Executes a single arbitrary transaction
     * @param _action Bytes array encoding the function call and arguments
     * @param _target Contract to receive the function call
     */
    makeSingleArbitraryTransaction(
      _target: string,
      _action: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Only callable by the colony itself. If you wish to use this functionality, you should use the makeAbitraryTransactions function
     * Executes a single arbitrary transaction
     * @param _action Bytes array encoding the function call and arguments
     * @param _target Contract to receive the function call
     */
    "makeSingleArbitraryTransaction(address,bytes)"(
      _target: string,
      _action: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Emit a metadata string for a transaction
     * @param _metadata String of metadata for tx
     * @param _txHash Hash of transaction being annotated (0x0 for current tx)
     */
    annotateTransaction(
      _txHash: Arrayish,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Emit a metadata string for a transaction
     * @param _metadata String of metadata for tx
     * @param _txHash Hash of transaction being annotated (0x0 for current tx)
     */
    "annotateTransaction(bytes32,string)"(
      _txHash: Arrayish,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Set new colony root role. Can be called by root role only.
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an root role to
     */
    setRootRole(
      _user: string,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Set new colony root role. Can be called by root role only.
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an root role to
     */
    "setRootRole(address,bool)"(
      _user: string,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Set new colony arbitration role. Can be called by root role or architecture role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Domain in which we are giving user the role
     * @param _permissionDomainId Domain in which the caller has root role
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an arbitration role to
     */
    setArbitrationRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Set new colony arbitration role. Can be called by root role or architecture role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Domain in which we are giving user the role
     * @param _permissionDomainId Domain in which the caller has root role
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an arbitration role to
     */
    "setArbitrationRole(uint256,uint256,address,uint256,bool)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Set new colony architecture role. Can be called by root role or architecture role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Domain in which we are giving user the role
     * @param _permissionDomainId Domain in which the caller has root/architecture role
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an architecture role to
     */
    setArchitectureRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Set new colony architecture role. Can be called by root role or architecture role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Domain in which we are giving user the role
     * @param _permissionDomainId Domain in which the caller has root/architecture role
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an architecture role to
     */
    "setArchitectureRole(uint256,uint256,address,uint256,bool)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Set new colony funding role. Can be called by root role or architecture role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Domain in which we are giving user the role
     * @param _permissionDomainId Domain in which the caller has root/architecture role
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an funding role to
     */
    setFundingRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Set new colony funding role. Can be called by root role or architecture role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Domain in which we are giving user the role
     * @param _permissionDomainId Domain in which the caller has root/architecture role
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an funding role to
     */
    "setFundingRole(uint256,uint256,address,uint256,bool)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Set new colony admin role. Can be called by root role or architecture role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Domain in which we are giving user the role
     * @param _permissionDomainId Domain in which the caller has root/architecture role
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an admin role to
     */
    setAdministrationRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Set new colony admin role. Can be called by root role or architecture role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Domain in which we are giving user the role
     * @param _permissionDomainId Domain in which the caller has root/architecture role
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an admin role to
     */
    "setAdministrationRole(uint256,uint256,address,uint256,bool)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Set several roles in one transaction. Can be called by root role or architecture role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Domain in which we are giving user the role
     * @param _permissionDomainId Domain in which the caller has root/architecture role
     * @param _roles Byte array representing the desired role setting (1 for on, 0 for off)
     * @param _user User we want to give a role to
     */
    setUserRoles(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _roles: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Set several roles in one transaction. Can be called by root role or architecture role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Domain in which we are giving user the role
     * @param _permissionDomainId Domain in which the caller has root/architecture role
     * @param _roles Byte array representing the desired role setting (1 for on, 0 for off)
     * @param _user User we want to give a role to
     */
    "setUserRoles(uint256,uint256,address,uint256,bytes32)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _roles: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Check whether a given user has a given role for the colony. Calls the function of the same name on the colony's authority contract.
     * @param _domainId The domain where we want to check for the role
     * @param _role The role we want to check for
     * @param _user The user whose role we want to check
     */
    hasUserRole(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    /**
     * Check whether a given user has a given role for the colony. Calls the function of the same name on the colony's authority contract.
     * @param _domainId The domain where we want to check for the role
     * @param _role The role we want to check for
     * @param _user The user whose role we want to check
     */
    "hasUserRole(address,uint256,uint8)"(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    /**
     * Check whether a given user has a given role for the colony, in a child domain. Calls the function of the same name on the colony's authority contract and an internal inheritence validator function
     * @param _childDomainId The domain where we want to use the role
     * @param _childSkillIndex The index that the `_childDomainId` is relative to `_domainId`
     * @param _domainId Domain in which the caller has the role
     * @param _role The role we want to check for
     * @param _user The user whose role we want to check
     */
    hasInheritedUserRole(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      _childSkillIndex: BigNumberish,
      _childDomainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    /**
     * Check whether a given user has a given role for the colony, in a child domain. Calls the function of the same name on the colony's authority contract and an internal inheritence validator function
     * @param _childDomainId The domain where we want to use the role
     * @param _childSkillIndex The index that the `_childDomainId` is relative to `_domainId`
     * @param _domainId Domain in which the caller has the role
     * @param _role The role we want to check for
     * @param _user The user whose role we want to check
     */
    "hasInheritedUserRole(address,uint256,uint8,uint256,uint256)"(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      _childSkillIndex: BigNumberish,
      _childDomainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    /**
     * Check whether a given user can modify roles in the target domain `_childDomainId`. Mostly a convenience function to provide a uniform interface for extension contracts validating permissions
     * @param _childDomainId The domain where we want to edit roles
     * @param _childSkillIndex The index that the `_childDomainId` is relative to `_domainId`
     * @param _domainId Domain in which the caller has the role (currently Root or Architecture)
     * @param _user The user whose permissions we want to check
     */
    userCanSetRoles(
      _user: string,
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _childDomainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    /**
     * Check whether a given user can modify roles in the target domain `_childDomainId`. Mostly a convenience function to provide a uniform interface for extension contracts validating permissions
     * @param _childDomainId The domain where we want to edit roles
     * @param _childSkillIndex The index that the `_childDomainId` is relative to `_domainId`
     * @param _domainId Domain in which the caller has the role (currently Root or Architecture)
     * @param _user The user whose permissions we want to check
     */
    "userCanSetRoles(address,uint256,uint256,uint256)"(
      _user: string,
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _childDomainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    /**
     * Gets the bytes32 representation of the roles for a user in a given domain
     * @param _domain The domain we want to get roles in
     * @param _user The user whose roles we want to get
     */
    getUserRoles(
      _user: string,
      _domain: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    /**
     * Gets the bytes32 representation of the roles for a user in a given domain
     * @param _domain The domain we want to get roles in
     * @param _user The user whose roles we want to get
     */
    "getUserRoles(address,uint256)"(
      _user: string,
      _domain: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    /**
     * Gets the bytes32 representation of the roles authorized to call a function
     * @param _sig The function signature
     */
    getCapabilityRoles(
      _sig: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    /**
     * Gets the bytes32 representation of the roles authorized to call a function
     * @param _sig The function signature
     */
    "getCapabilityRoles(bytes4)"(
      _sig: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    /**
     * Emit a positive domain reputation update. Available only to Root role holders
     * @param _amount The (positive) amount of reputation to gain
     * @param _domainId The domain where the user will gain reputation
     * @param _user The user who will gain reputation
     */
    emitDomainReputationReward(
      _domainId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Emit a positive domain reputation update. Available only to Root role holders
     * @param _amount The (positive) amount of reputation to gain
     * @param _domainId The domain where the user will gain reputation
     * @param _user The user who will gain reputation
     */
    "emitDomainReputationReward(uint256,address,int256)"(
      _domainId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Emit a positive skill reputation update. Available only to Root role holders
     * @param _amount The (positive) amount of reputation to gain
     * @param _skillId The skill where the user will gain reputation
     * @param _user The user who will gain reputation
     */
    emitSkillReputationReward(
      _skillId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Emit a positive skill reputation update. Available only to Root role holders
     * @param _amount The (positive) amount of reputation to gain
     * @param _skillId The skill where the user will gain reputation
     * @param _user The user who will gain reputation
     */
    "emitSkillReputationReward(uint256,address,int256)"(
      _skillId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Emit a negative domain reputation update. Available only to Arbitration role holders
     * @param _amount The (negative) amount of reputation to lose
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId The domain where the user will lose reputation
     * @param _permissionDomainId The domainId in which I hold the Arbitration role
     * @param _user The user who will lose reputation
     */
    emitDomainReputationPenalty(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Emit a negative domain reputation update. Available only to Arbitration role holders
     * @param _amount The (negative) amount of reputation to lose
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId The domain where the user will lose reputation
     * @param _permissionDomainId The domainId in which I hold the Arbitration role
     * @param _user The user who will lose reputation
     */
    "emitDomainReputationPenalty(uint256,uint256,uint256,address,int256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Emit a negative skill reputation update. Available only to Arbitration role holders in the root domain
     * @param _amount The (negative) amount of reputation to lose
     * @param _skillId The skill where the user will lose reputation
     * @param _user The user who will lose reputation
     */
    emitSkillReputationPenalty(
      _skillId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Emit a negative skill reputation update. Available only to Arbitration role holders in the root domain
     * @param _amount The (negative) amount of reputation to lose
     * @param _skillId The skill where the user will lose reputation
     * @param _user The user who will lose reputation
     */
    "emitSkillReputationPenalty(uint256,address,int256)"(
      _skillId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Sets the reward inverse to the uint max 2**256 - 1.
     * Called once when the colony is created to initialise certain storage slot values.
     * @param _colonyNetworkAddress Address of the colony network
     * @param _token Address of the colony ERC20 Token
     */
    initialiseColony(
      _colonyNetworkAddress: string,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Sets the reward inverse to the uint max 2**256 - 1.
     * Called once when the colony is created to initialise certain storage slot values.
     * @param _colonyNetworkAddress Address of the colony network
     * @param _token Address of the colony ERC20 Token
     */
    "initialiseColony(address,address)"(
      _colonyNetworkAddress: string,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Called to change the metadata associated with a colony. Expected to be a IPFS hash of a JSON blob, but not enforced to any degree by the contracts
     * @param _metadata IPFS hash of the metadata
     */
    editColony(
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Called to change the metadata associated with a colony. Expected to be a IPFS hash of a JSON blob, but not enforced to any degree by the contracts
     * @param _metadata IPFS hash of the metadata
     */
    "editColony(string)"(
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Called to change the metadata associated with a colony. Expected to be a IPFS hash of a delta to a JSON blob, but not enforced to any degree by the contracts
     * @param _metadataDelta IPFS hash of the metadata delta
     */
    editColonyByDelta(
      _metadataDelta: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Called to change the metadata associated with a colony. Expected to be a IPFS hash of a delta to a JSON blob, but not enforced to any degree by the contracts
     * @param _metadataDelta IPFS hash of the metadata delta
     */
    "editColonyByDelta(string)"(
      _metadataDelta: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Only allowed to be called when `taskCount` is `0` by authorized addresses.
     * Allows the colony to bootstrap itself by having initial reputation and token `_amount` assigned to `_users`. This reputation is assigned in the colony-wide domain. Secured function to authorised members.
     * @param _amount Amount of reputation/tokens for every address
     * @param _users Array of address to bootstrap with reputation
     */
    bootstrapColony(
      _users: string[],
      _amount: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Only allowed to be called when `taskCount` is `0` by authorized addresses.
     * Allows the colony to bootstrap itself by having initial reputation and token `_amount` assigned to `_users`. This reputation is assigned in the colony-wide domain. Secured function to authorised members.
     * @param _amount Amount of reputation/tokens for every address
     * @param _users Array of address to bootstrap with reputation
     */
    "bootstrapColony(address[],int256[])"(
      _users: string[],
      _amount: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Mint `_wad` amount of colony tokens. Secured function to authorised members.
     * @param _wad Amount to mint
     */
    mintTokens(
      _wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Mint `_wad` amount of colony tokens. Secured function to authorised members.
     * @param _wad Amount to mint
     */
    "mintTokens(uint256)"(
      _wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Mint `_wad` amount of colony tokens and send to `_guy`. Secured function to authorised members.
     * @param _guy Recipient of new tokens
     * @param _wad Amount to mint
     */
    mintTokensFor(
      _guy: string,
      _wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Mint `_wad` amount of colony tokens and send to `_guy`. Secured function to authorised members.
     * @param _guy Recipient of new tokens
     * @param _wad Amount to mint
     */
    "mintTokensFor(address,uint256)"(
      _guy: string,
      _wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Lock the colony's token. Can only be called by a network-managed extension.
     */
    lockToken(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    /**
     * Lock the colony's token. Can only be called by a network-managed extension.
     */
    "lockToken()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Unlock the colony's token for a user. Can only be called by a network-managed extension.
     * @param lockId The specific lock to unlock
     * @param user The user to unlock
     */
    unlockTokenForUser(
      user: string,
      lockId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Unlock the colony's token for a user. Can only be called by a network-managed extension.
     * @param lockId The specific lock to unlock
     * @param user The user to unlock
     */
    "unlockTokenForUser(address,uint256)"(
      user: string,
      lockId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Register colony's ENS label.
     * @param colonyName The label to register.
     * @param orbitdb The path of the orbitDB database associated with the colony name
     */
    registerColonyLabel(
      colonyName: string,
      orbitdb: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Register colony's ENS label.
     * @param colonyName The label to register.
     * @param orbitdb The path of the orbitDB database associated with the colony name
     */
    "registerColonyLabel(string,string)"(
      colonyName: string,
      orbitdb: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Update a colony's orbitdb address. Can only be called by a colony with a registered subdomain
     * @param orbitdb The path of the orbitDB database to be associated with the colony
     */
    updateColonyOrbitDB(
      orbitdb: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Update a colony's orbitdb address. Can only be called by a colony with a registered subdomain
     * @param orbitdb The path of the orbitDB database to be associated with the colony
     */
    "updateColonyOrbitDB(string)"(
      orbitdb: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Install an extension to the colony. Secured function to authorised members.
     * @param extensionId keccak256 hash of the extension name, used as an indentifier
     * @param version The new extension version to install
     */
    installExtension(
      extensionId: Arrayish,
      version: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Install an extension to the colony. Secured function to authorised members.
     * @param extensionId keccak256 hash of the extension name, used as an indentifier
     * @param version The new extension version to install
     */
    "installExtension(bytes32,uint256)"(
      extensionId: Arrayish,
      version: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Upgrade an extension in a colony. Secured function to authorised members.
     * @param extensionId keccak256 hash of the extension name, used as an indentifier
     * @param newVersion The version to upgrade to (must be one larger than the current version)
     */
    upgradeExtension(
      extensionId: Arrayish,
      newVersion: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Upgrade an extension in a colony. Secured function to authorised members.
     * @param extensionId keccak256 hash of the extension name, used as an indentifier
     * @param newVersion The version to upgrade to (must be one larger than the current version)
     */
    "upgradeExtension(bytes32,uint256)"(
      extensionId: Arrayish,
      newVersion: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Set the deprecation of an extension in a colony. Secured function to authorised members.
     * @param deprecated Whether to deprecate the extension or not
     * @param extensionId keccak256 hash of the extension name, used as an indentifier
     */
    deprecateExtension(
      extensionId: Arrayish,
      deprecated: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Set the deprecation of an extension in a colony. Secured function to authorised members.
     * @param deprecated Whether to deprecate the extension or not
     * @param extensionId keccak256 hash of the extension name, used as an indentifier
     */
    "deprecateExtension(bytes32,bool)"(
      extensionId: Arrayish,
      deprecated: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * This is a permanent action -- re-installing the extension will deploy a new contractIt is recommended to deprecate an extension before uninstalling to allow active objects to be resolved
     * Uninstall an extension from a colony. Secured function to authorised members.
     * @param extensionId keccak256 hash of the extension name, used as an indentifier
     */
    uninstallExtension(
      extensionId: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * This is a permanent action -- re-installing the extension will deploy a new contractIt is recommended to deprecate an extension before uninstalling to allow active objects to be resolved
     * Uninstall an extension from a colony. Secured function to authorised members.
     * @param extensionId keccak256 hash of the extension name, used as an indentifier
     */
    "uninstallExtension(bytes32)"(
      extensionId: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Initialise the local skill tree for the colony.
     */
    initialiseRootLocalSkill(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Initialise the local skill tree for the colony.
     */
    "initialiseRootLocalSkill()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Add a new local skill for the colony. Secured function to authorised members.
     */
    addLocalSkill(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Add a new local skill for the colony. Secured function to authorised members.
     */
    "addLocalSkill()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Deprecate a local skill for the colony. Secured function to authorised members.
     * @param deprecated Deprecation status to set for the skill
     * @param localSkillId Id for the local skill
     */
    deprecateLocalSkill(
      localSkillId: BigNumberish,
      deprecated: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Deprecate a local skill for the colony. Secured function to authorised members.
     * @param deprecated Deprecation status to set for the skill
     * @param localSkillId Id for the local skill
     */
    "deprecateLocalSkill(uint256,bool)"(
      localSkillId: BigNumberish,
      deprecated: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Get the root local skill id
     */
    getRootLocalSkill(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the root local skill id
     */
    "getRootLocalSkill()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Adding new domains is currently retricted to one level only, i.e. `_parentDomainId` has to be the root domain id: `1`.
     * Add a colony domain, and its respective local skill under skill with id `_parentSkillId`. New funding pot is created and associated with the domain here.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _parentDomainId Id of the domain under which the new one will be added
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     */
    addDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _parentDomainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Adding new domains is currently retricted to one level only, i.e. `_parentDomainId` has to be the root domain id: `1`.
     * Add a colony domain, and its respective local skill under skill with id `_parentSkillId`. New funding pot is created and associated with the domain here.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _parentDomainId Id of the domain under which the new one will be added
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     */
    "addDomain(uint256,uint256,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _parentDomainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Adding new domains is currently retricted to one level only, i.e. `_parentDomainId` has to be the root domain id: `1`.We expect this function to only be used by the dapp
     * Add a colony domain, and its respective local skill under skill with id `_parentSkillId`. New funding pot is created and associated with the domain here.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _metadata Metadata relating to the domain. Expected to be the IPFS hash of a JSON blob, but not enforced by the contracts.
     * @param _parentDomainId Id of the domain under which the new one will be added
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     */
    "addDomain(uint256,uint256,uint256,string)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _parentDomainId: BigNumberish,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Add a colony domain, and its respective local skill under skill with id `_parentSkillId`. New funding pot is created and associated with the domain here.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Id of the domain being edited
     * @param _metadata Metadata relating to the domain. Expected to be the IPFS hash of a JSON blob, but not enforced by the contracts.
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     */
    editDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Add a colony domain, and its respective local skill under skill with id `_parentSkillId`. New funding pot is created and associated with the domain here.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Id of the domain being edited
     * @param _metadata Metadata relating to the domain. Expected to be the IPFS hash of a JSON blob, but not enforced by the contracts.
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     */
    "editDomain(uint256,uint256,uint256,string)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Get a domain by id.
     * @param _id Id of the domain which details to get
     */
    getDomain(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [BigNumber, BigNumber] & { skillId: BigNumber; fundingPotId: BigNumber }
    >;

    /**
     * Get a domain by id.
     * @param _id Id of the domain which details to get
     */
    "getDomain(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [BigNumber, BigNumber] & { skillId: BigNumber; fundingPotId: BigNumber }
    >;

    /**
     * Get the number of domains in the colony.
     */
    getDomainCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the number of domains in the colony.
     */
    "getDomainCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * For more detail about branchMask and siblings, examine the PatriciaTree implementation. While external, likely only to be used by the Colony contracts, as it checks that the user is proving their own reputation in the current colony. The `verifyProof` function can be used to verify any proof, though this function is not currently exposed on the Colony's EtherRouter.
     * Helper function that can be used by a client to verify the correctness of a patricia proof they have been supplied with.
     * @param branchMask The branchmask of the proof
     * @param key The key of the element the proof is for.
     * @param siblings The siblings of the proof
     * @param value The value of the element that the proof is for.
     */
    verifyReputationProof(
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    /**
     * For more detail about branchMask and siblings, examine the PatriciaTree implementation. While external, likely only to be used by the Colony contracts, as it checks that the user is proving their own reputation in the current colony. The `verifyProof` function can be used to verify any proof, though this function is not currently exposed on the Colony's EtherRouter.
     * Helper function that can be used by a client to verify the correctness of a patricia proof they have been supplied with.
     * @param branchMask The branchmask of the proof
     * @param key The key of the element the proof is for.
     * @param siblings The siblings of the proof
     * @param value The value of the element that the proof is for.
     */
    "verifyReputationProof(bytes,bytes,uint256,bytes32[])"(
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    /**
     * Update the default global claim delay for expenditures
     * @param _globalClaimDelay The new default global claim delay
     */
    setDefaultGlobalClaimDelay(
      _globalClaimDelay: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Update the default global claim delay for expenditures
     * @param _globalClaimDelay The new default global claim delay
     */
    "setDefaultGlobalClaimDelay(uint256)"(
      _globalClaimDelay: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Add a new expenditure in the colony. Secured function to authorised members.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)
     * @param _domainId The domain where the expenditure belongs
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     */
    makeExpenditure(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Add a new expenditure in the colony. Secured function to authorised members.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)
     * @param _domainId The domain where the expenditure belongs
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     */
    "makeExpenditure(uint256,uint256,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Updates the expenditure owner. Can only be called by expenditure owner.
     * @param _id Expenditure identifier
     * @param _newOwner New owner of expenditure
     */
    transferExpenditure(
      _id: BigNumberish,
      _newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Updates the expenditure owner. Can only be called by expenditure owner.
     * @param _id Expenditure identifier
     * @param _newOwner New owner of expenditure
     */
    "transferExpenditure(uint256,address)"(
      _id: BigNumberish,
      _newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * This is now deprecated and will be removed in a future version
     * DEPRECATED Updates the expenditure owner. Can only be called by Arbitration role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)
     * @param _id Expenditure identifier
     * @param _newOwner New owner of expenditure
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     */
    transferExpenditureViaArbitration(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * This is now deprecated and will be removed in a future version
     * DEPRECATED Updates the expenditure owner. Can only be called by Arbitration role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)
     * @param _id Expenditure identifier
     * @param _newOwner New owner of expenditure
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     */
    "transferExpenditureViaArbitration(uint256,uint256,uint256,address)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Cancels the expenditure and prevents further editing. Can only be called by expenditure owner.
     * @param _id Expenditure identifier
     */
    cancelExpenditure(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Cancels the expenditure and prevents further editing. Can only be called by expenditure owner.
     * @param _id Expenditure identifier
     */
    "cancelExpenditure(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Locks the expenditure and prevents further editing. Can only be called by expenditure owner.
     * @param _id Expenditure identifier
     */
    lockExpenditure(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Locks the expenditure and prevents further editing. Can only be called by expenditure owner.
     * @param _id Expenditure identifier
     */
    "lockExpenditure(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Finalizes the expenditure and allows for funds to be claimed. Can only be called by expenditure owner.
     * @param _id Expenditure identifier
     */
    finalizeExpenditure(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Finalizes the expenditure and allows for funds to be claimed. Can only be called by expenditure owner.
     * @param _id Expenditure identifier
     */
    "finalizeExpenditure(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Sets the metadata for an expenditure. Can only be called by Arbitration role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`,
     * @param _id Id of the expenditure
     * @param _metadata IPFS hash of the metadata
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     */
    setExpenditureMetadata(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Sets the metadata for an expenditure. Can only be called by Arbitration role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`,
     * @param _id Id of the expenditure
     * @param _metadata IPFS hash of the metadata
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     */
    "setExpenditureMetadata(uint256,uint256,uint256,string)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Sets the metadata for an expenditure. Can only be called by expenditure owner.
     * @param _id Id of the expenditure
     * @param _metadata IPFS hash of the metadata
     */
    "setExpenditureMetadata(uint256,string)"(
      _id: BigNumberish,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * DeprecatedSets the recipient on an expenditure slot. Can only be called by expenditure owner.
     * @param _id Id of the expenditure
     * @param _recipient Address of the recipient
     * @param _slot Slot for the recipient address
     */
    setExpenditureRecipient(
      _id: BigNumberish,
      _slot: BigNumberish,
      _recipient: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * DeprecatedSets the recipient on an expenditure slot. Can only be called by expenditure owner.
     * @param _id Id of the expenditure
     * @param _recipient Address of the recipient
     * @param _slot Slot for the recipient address
     */
    "setExpenditureRecipient(uint256,uint256,address)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      _recipient: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Sets the recipients in given expenditure slots. Can only be called by expenditure owner.
     * @param _id Id of the expenditure
     * @param _recipients Addresses of the recipients
     * @param _slots Array of slots to set recipients
     */
    setExpenditureRecipients(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _recipients: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Sets the recipients in given expenditure slots. Can only be called by expenditure owner.
     * @param _id Id of the expenditure
     * @param _recipients Addresses of the recipients
     * @param _slots Array of slots to set recipients
     */
    "setExpenditureRecipients(uint256,uint256[],address[])"(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _recipients: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * DeprecatedSet the token payout on an expenditure slot. Can only be called by expenditure owner.
     * @param _amount Payout amount
     * @param _id Id of the expenditure
     * @param _slot Number of the slot
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    setExpenditurePayout(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * DeprecatedSet the token payout on an expenditure slot. Can only be called by expenditure owner.
     * @param _amount Payout amount
     * @param _id Id of the expenditure
     * @param _slot Number of the slot
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    "setExpenditurePayout(uint256,uint256,address,uint256)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Set the token payouts in given expenditure slots. Can only be called by expenditure owner.
     * @param _amounts Payout amounts
     * @param _id Id of the expenditure
     * @param _slots Array of slots to set payouts
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    setExpenditurePayouts(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _token: string,
      _amounts: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Set the token payouts in given expenditure slots. Can only be called by expenditure owner.
     * @param _amounts Payout amounts
     * @param _id Id of the expenditure
     * @param _slots Array of slots to set payouts
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    "setExpenditurePayouts(uint256,uint256[],address,uint256[])"(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _token: string,
      _amounts: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * DeprecatedSets the skill on an expenditure slot. Can only be called by expenditure owner.
     * @param _id Expenditure identifier
     * @param _skillId Id of the new skill to set
     * @param _slot Number of the slot
     */
    setExpenditureSkill(
      _id: BigNumberish,
      _slot: BigNumberish,
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * DeprecatedSets the skill on an expenditure slot. Can only be called by expenditure owner.
     * @param _id Expenditure identifier
     * @param _skillId Id of the new skill to set
     * @param _slot Number of the slot
     */
    "setExpenditureSkill(uint256,uint256,uint256)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Sets the skill on an expenditure slot. Can only be called by expenditure owner.
     * @param _id Expenditure identifier
     * @param _skillIds Ids of the new skills to set
     * @param _slots Array of slots to set skills
     */
    setExpenditureSkills(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _skillIds: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Sets the skill on an expenditure slot. Can only be called by expenditure owner.
     * @param _id Expenditure identifier
     * @param _skillIds Ids of the new skills to set
     * @param _slots Array of slots to set skills
     */
    "setExpenditureSkills(uint256,uint256[],uint256[])"(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _skillIds: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * DeprecatedSets the claim delay on an expenditure slot. Can only be called by expenditure owner.
     * @param _claimDelay Duration of time (in seconds) to delay
     * @param _id Expenditure identifier
     * @param _slot Number of the slot
     */
    setExpenditureClaimDelay(
      _id: BigNumberish,
      _slot: BigNumberish,
      _claimDelay: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * DeprecatedSets the claim delay on an expenditure slot. Can only be called by expenditure owner.
     * @param _claimDelay Duration of time (in seconds) to delay
     * @param _id Expenditure identifier
     * @param _slot Number of the slot
     */
    "setExpenditureClaimDelay(uint256,uint256,uint256)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      _claimDelay: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Sets the claim delays in given expenditure slots. Can only be called by expenditure owner.
     * @param _claimDelays Durations of time (in seconds) to delay
     * @param _id Expenditure identifier
     * @param _slots Array of slots to set claim delays
     */
    setExpenditureClaimDelays(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _claimDelays: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Sets the claim delays in given expenditure slots. Can only be called by expenditure owner.
     * @param _claimDelays Durations of time (in seconds) to delay
     * @param _id Expenditure identifier
     * @param _slots Array of slots to set claim delays
     */
    "setExpenditureClaimDelays(uint256,uint256[],uint256[])"(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _claimDelays: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Sets the payout modifiers in given expenditure slots. Can only be called by expenditure owner.
     * @param _id Expenditure identifier
     * @param _payoutModifiers Values (between +/- WAD) to modify the payout & reputation bonus
     * @param _slots Array of slots to set payout modifiers
     */
    setExpenditurePayoutModifiers(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _payoutModifiers: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Sets the payout modifiers in given expenditure slots. Can only be called by expenditure owner.
     * @param _id Expenditure identifier
     * @param _payoutModifiers Values (between +/- WAD) to modify the payout & reputation bonus
     * @param _slots Array of slots to set payout modifiers
     */
    "setExpenditurePayoutModifiers(uint256,uint256[],int256[])"(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _payoutModifiers: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Set arbitrary state on an expenditure slot. Can only be called by Arbitration role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)
     * @param _id Expenditure identifier
     * @param _keys Array of additional keys (for mappings & arrays)
     * @param _mask Array of booleans indicated whether a key is a mapping (F) or an array index (T).
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _storageSlot Number of the top-level storage slot (25, 26, or 27)
     * @param _value Value to set at location
     */
    setExpenditureState(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _storageSlot: BigNumberish,
      _mask: boolean[],
      _keys: Arrayish[],
      _value: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Set arbitrary state on an expenditure slot. Can only be called by Arbitration role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)
     * @param _id Expenditure identifier
     * @param _keys Array of additional keys (for mappings & arrays)
     * @param _mask Array of booleans indicated whether a key is a mapping (F) or an array index (T).
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _storageSlot Number of the top-level storage slot (25, 26, or 27)
     * @param _value Value to set at location
     */
    "setExpenditureState(uint256,uint256,uint256,uint256,bool[],bytes32[],bytes32)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _storageSlot: BigNumberish,
      _mask: boolean[],
      _keys: Arrayish[],
      _value: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Claim the payout for an expenditure slot. Here the network receives a fee from each payout.
     * @param _id Expenditure identifier
     * @param _slot Number of the slot
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    claimExpenditurePayout(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Claim the payout for an expenditure slot. Here the network receives a fee from each payout.
     * @param _id Expenditure identifier
     * @param _slot Number of the slot
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    "claimExpenditurePayout(uint256,uint256,address)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Get the number of expenditures in the colony.
     */
    getExpenditureCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the number of expenditures in the colony.
     */
    "getExpenditureCount()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns an existing expenditure.
     * @param _id Expenditure identifier
     */
    getExpenditure(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [number, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        status: number;
        owner: string;
        fundingPotId: BigNumber;
        domainId: BigNumber;
        finalizedTimestamp: BigNumber;
        globalClaimDelay: BigNumber;
      }
    >;

    /**
     * Returns an existing expenditure.
     * @param _id Expenditure identifier
     */
    "getExpenditure(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [number, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        status: number;
        owner: string;
        fundingPotId: BigNumber;
        domainId: BigNumber;
        finalizedTimestamp: BigNumber;
        globalClaimDelay: BigNumber;
      }
    >;

    /**
     * Returns an existing expenditure slot.
     * @param _id Expenditure identifier
     * @param _slot Expenditure slot
     */
    getExpenditureSlot(
      _id: BigNumberish,
      _slot: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber[]] & {
        recipient: string;
        claimDelay: BigNumber;
        payoutModifier: BigNumber;
        skills: BigNumber[];
      }
    >;

    /**
     * Returns an existing expenditure slot.
     * @param _id Expenditure identifier
     * @param _slot Expenditure slot
     */
    "getExpenditureSlot(uint256,uint256)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber[]] & {
        recipient: string;
        claimDelay: BigNumber;
        payoutModifier: BigNumber;
        skills: BigNumber[];
      }
    >;

    /**
     * Returns an existing expenditure slot's payout for a token.
     * @param _id Expenditure identifier
     * @param _slot Expenditure slot
     * @param _token Token address
     */
    getExpenditureSlotPayout(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns an existing expenditure slot's payout for a token.
     * @param _id Expenditure identifier
     * @param _slot Expenditure slot
     * @param _token Token address
     */
    "getExpenditureSlotPayout(uint256,uint256,address)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Add a new payment in the colony. Secured function to authorised members.
     * @param _amount Payout amount
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)
     * @param _domainId The domain where the payment belongs
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _recipient Address of the payment recipient
     * @param _skillId The skill associated with the payment
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    addPayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _recipient: string,
      _token: string,
      _amount: BigNumberish,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Add a new payment in the colony. Secured function to authorised members.
     * @param _amount Payout amount
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)
     * @param _domainId The domain where the payment belongs
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _recipient Address of the payment recipient
     * @param _skillId The skill associated with the payment
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    "addPayment(uint256,uint256,address,address,uint256,uint256,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _recipient: string,
      _token: string,
      _amount: BigNumberish,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Finalizes the payment and logs the reputation log updates. Allowed to be called once after payment is fully funded. Secured function to authorised members.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Payment identifier
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     */
    finalizePayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Finalizes the payment and logs the reputation log updates. Allowed to be called once after payment is fully funded. Secured function to authorised members.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Payment identifier
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     */
    "finalizePayment(uint256,uint256,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Sets the recipient on an existing payment. Secured function to authorised members.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Payment identifier
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _recipient Address of the payment recipient
     */
    setPaymentRecipient(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _recipient: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Sets the recipient on an existing payment. Secured function to authorised members.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Payment identifier
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _recipient Address of the payment recipient
     */
    "setPaymentRecipient(uint256,uint256,uint256,address)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _recipient: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Sets the skill on an existing payment. Secured function to authorised members.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Payment identifier
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _skillId Id of the new skill to set
     */
    setPaymentSkill(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Sets the skill on an existing payment. Secured function to authorised members.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Payment identifier
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _skillId Id of the new skill to set
     */
    "setPaymentSkill(uint256,uint256,uint256,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Sets the payout for a given token on an existing payment. Secured function to authorised members.
     * @param _amount Payout amount
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Payment identifier
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    setPaymentPayout(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Sets the payout for a given token on an existing payment. Secured function to authorised members.
     * @param _amount Payout amount
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Payment identifier
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    "setPaymentPayout(uint256,uint256,uint256,address,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Returns an exiting payment.
     * @param _id Payment identifier
     */
    getPayment(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [string, boolean, BigNumber, BigNumber, BigNumber[]] & {
        recipient: string;
        finalized: boolean;
        fundingPotId: BigNumber;
        domainId: BigNumber;
        skills: BigNumber[];
      }
    >;

    /**
     * Returns an exiting payment.
     * @param _id Payment identifier
     */
    "getPayment(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [string, boolean, BigNumber, BigNumber, BigNumber[]] & {
        recipient: string;
        finalized: boolean;
        fundingPotId: BigNumber;
        domainId: BigNumber;
        skills: BigNumber[];
      }
    >;

    /**
     * Claim the payout in `_token` denomination for payment `_id`. Here the network receives its fee from each payout. Same as for tasks, ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off.
     * @param _id Payment identifier
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    claimPayment(
      _id: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Claim the payout in `_token` denomination for payment `_id`. Here the network receives its fee from each payout. Same as for tasks, ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off.
     * @param _id Payment identifier
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    "claimPayment(uint256,address)"(
      _id: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Get the number of payments in the colony.
     */
    getPaymentCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the number of payments in the colony.
     */
    "getPaymentCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Make a new task in the colony. Secured function to authorised members.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId The domain where the task belongs
     * @param _dueDate The due date of the task, can set to `0` for no-op
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _skillId The skill associated with the task, can set to `0` for no-op
     * @param _specificationHash Database identifier where the task specification is stored
     */
    makeTask(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _specificationHash: Arrayish,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Make a new task in the colony. Secured function to authorised members.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId The domain where the task belongs
     * @param _dueDate The due date of the task, can set to `0` for no-op
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _skillId The skill associated with the task, can set to `0` for no-op
     * @param _specificationHash Database identifier where the task specification is stored
     */
    "makeTask(uint256,uint256,bytes32,uint256,uint256,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _specificationHash: Arrayish,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Get the number of tasks in the colony.
     */
    getTaskCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the number of tasks in the colony.
     */
    "getTaskCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Starts from 0 and is incremented on every co-reviewed task change via `executeTaskChange` call.
     * @param _id Id of the task
     */
    getTaskChangeNonce(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Starts from 0 and is incremented on every co-reviewed task change via `executeTaskChange` call.
     * @param _id Id of the task
     */
    "getTaskChangeNonce(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * The Colony functions which require approval and the task roles to review these are set in `IColony.initialiseColony` at colony creation. Upon successful execution the `taskChangeNonces` entry for the task is incremented.
     * Executes a task update transaction `_data` which is approved and signed by two of its roles (e.g. manager and worker) using the detached signatures for these users.
     * @param _data The transaction data
     * @param _mode How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)
     * @param _sigR r output of the ECDSA signature of the transaction
     * @param _sigS s output of the ECDSA signature of the transaction
     * @param _sigV recovery id
     * @param _value The transaction value, i.e. number of wei to be sent when the transaction is executed Currently we only accept 0 value transactions but this is kept as a future option
     */
    executeTaskChange(
      _sigV: BigNumberish[],
      _sigR: Arrayish[],
      _sigS: Arrayish[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * The Colony functions which require approval and the task roles to review these are set in `IColony.initialiseColony` at colony creation. Upon successful execution the `taskChangeNonces` entry for the task is incremented.
     * Executes a task update transaction `_data` which is approved and signed by two of its roles (e.g. manager and worker) using the detached signatures for these users.
     * @param _data The transaction data
     * @param _mode How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)
     * @param _sigR r output of the ECDSA signature of the transaction
     * @param _sigS s output of the ECDSA signature of the transaction
     * @param _sigV recovery id
     * @param _value The transaction value, i.e. number of wei to be sent when the transaction is executed Currently we only accept 0 value transactions but this is kept as a future option
     */
    "executeTaskChange(uint8[],bytes32[],bytes32[],uint8[],uint256,bytes)"(
      _sigV: BigNumberish[],
      _sigR: Arrayish[],
      _sigS: Arrayish[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Executes a task role update transaction `_data` which is approved and signed by two of addresses. depending of which function we are calling. Allowed functions are `setTaskManagerRole`, `setTaskEvaluatorRole` and `setTaskWorkerRole`. Upon successful execution the `taskChangeNonces` entry for the task is incremented.
     * @param _data The transaction data
     * @param _mode How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)
     * @param _sigR r output of the ECDSA signature of the transaction
     * @param _sigS s output of the ECDSA signature of the transaction
     * @param _sigV recovery id
     * @param _value The transaction value, i.e. number of wei to be sent when the transaction is executed Currently we only accept 0 value transactions but this is kept as a future option
     */
    executeTaskRoleAssignment(
      _sigV: BigNumberish[],
      _sigR: Arrayish[],
      _sigS: Arrayish[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Executes a task role update transaction `_data` which is approved and signed by two of addresses. depending of which function we are calling. Allowed functions are `setTaskManagerRole`, `setTaskEvaluatorRole` and `setTaskWorkerRole`. Upon successful execution the `taskChangeNonces` entry for the task is incremented.
     * @param _data The transaction data
     * @param _mode How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)
     * @param _sigR r output of the ECDSA signature of the transaction
     * @param _sigS s output of the ECDSA signature of the transaction
     * @param _sigV recovery id
     * @param _value The transaction value, i.e. number of wei to be sent when the transaction is executed Currently we only accept 0 value transactions but this is kept as a future option
     */
    "executeTaskRoleAssignment(uint8[],bytes32[],bytes32[],uint8[],uint256,bytes)"(
      _sigV: BigNumberish[],
      _sigR: Arrayish[],
      _sigS: Arrayish[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Submit a hashed secret of the rating for work in task `_id` which was performed by user with task role id `_role`. Allowed within 5 days period starting which whichever is first from either the deliverable being submitted or the dueDate been reached. Allowed only for evaluator to rate worker and for worker to rate manager performance. Once submitted ratings can not be changed or overwritten.
     * @param _id Id of the task
     * @param _ratingSecret `keccak256` hash of a salt and 0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50). Can be generated via `IColony.generateSecret` helper function.
     * @param _role Id of the role, as defined in TaskRole enum
     */
    submitTaskWorkRating(
      _id: BigNumberish,
      _role: BigNumberish,
      _ratingSecret: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Submit a hashed secret of the rating for work in task `_id` which was performed by user with task role id `_role`. Allowed within 5 days period starting which whichever is first from either the deliverable being submitted or the dueDate been reached. Allowed only for evaluator to rate worker and for worker to rate manager performance. Once submitted ratings can not be changed or overwritten.
     * @param _id Id of the task
     * @param _ratingSecret `keccak256` hash of a salt and 0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50). Can be generated via `IColony.generateSecret` helper function.
     * @param _role Id of the role, as defined in TaskRole enum
     */
    "submitTaskWorkRating(uint256,uint8,bytes32)"(
      _id: BigNumberish,
      _role: BigNumberish,
      _ratingSecret: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Compares the `keccak256(_salt, _rating)` output with the previously submitted rating secret and if they match, sets the task role properties `rated` to `true` and `rating` to `_rating`.
     * Reveal the secret rating submitted in `IColony.submitTaskWorkRating` for task `_id` and task role with id `_role`. Allowed within 5 days period starting which whichever is first from either both rating secrets being submitted (via `IColony.submitTaskWorkRating`) or the 5 day rating period expiring.
     * @param _id Id of the task
     * @param _rating 0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50)
     * @param _role Id of the role, as defined in TaskRole enum
     * @param _salt Salt value used to generate the rating secret
     */
    revealTaskWorkRating(
      _id: BigNumberish,
      _role: BigNumberish,
      _rating: BigNumberish,
      _salt: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Compares the `keccak256(_salt, _rating)` output with the previously submitted rating secret and if they match, sets the task role properties `rated` to `true` and `rating` to `_rating`.
     * Reveal the secret rating submitted in `IColony.submitTaskWorkRating` for task `_id` and task role with id `_role`. Allowed within 5 days period starting which whichever is first from either both rating secrets being submitted (via `IColony.submitTaskWorkRating`) or the 5 day rating period expiring.
     * @param _id Id of the task
     * @param _rating 0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50)
     * @param _role Id of the role, as defined in TaskRole enum
     * @param _salt Salt value used to generate the rating secret
     */
    "revealTaskWorkRating(uint256,uint8,uint8,bytes32)"(
      _id: BigNumberish,
      _role: BigNumberish,
      _rating: BigNumberish,
      _salt: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Helper function used to generage consistently the rating secret using salt value `_salt` and value to hide `_value`
     * @param _salt Salt value
     * @param _value Value to hide
     */
    generateSecret(
      _salt: Arrayish,
      _value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    /**
     * Helper function used to generage consistently the rating secret using salt value `_salt` and value to hide `_value`
     * @param _salt Salt value
     * @param _value Value to hide
     */
    "generateSecret(bytes32,uint256)"(
      _salt: Arrayish,
      _value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    /**
     * Get the `ColonyStorage.RatingSecrets` information for task `_id`.
     * @param _id Id of the task
     */
    getTaskWorkRatingSecretsInfo(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        nSecrets: BigNumber;
        lastSubmittedAt: BigNumber;
      }
    >;

    /**
     * Get the `ColonyStorage.RatingSecrets` information for task `_id`.
     * @param _id Id of the task
     */
    "getTaskWorkRatingSecretsInfo(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        nSecrets: BigNumber;
        lastSubmittedAt: BigNumber;
      }
    >;

    /**
     * Get the rating secret submitted for role `_role` in task `_id`
     * @param _id Id of the task
     * @param _role Id of the role, as defined in TaskRole enum
     */
    getTaskWorkRatingSecret(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    /**
     * Get the rating secret submitted for role `_role` in task `_id`
     * @param _id Id of the task
     * @param _role Id of the role, as defined in TaskRole enum
     */
    "getTaskWorkRatingSecret(uint256,uint8)"(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    /**
     * This function can only be called through `executeTaskRoleAssignment`.
     * Assigning manager role. Current manager and user we want to assign role to both need to agree. User we want to set here also needs to be an admin. Note that the domain proof data comes at the end here to not interfere with the assembly argument unpacking.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Id of the task
     * @param _permissionDomainId The domain ID in which _user has the Administration permission
     * @param _user Address of the user we want to give a manager role to
     */
    setTaskManagerRole(
      _id: BigNumberish,
      _user: string,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * This function can only be called through `executeTaskRoleAssignment`.
     * Assigning manager role. Current manager and user we want to assign role to both need to agree. User we want to set here also needs to be an admin. Note that the domain proof data comes at the end here to not interfere with the assembly argument unpacking.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Id of the task
     * @param _permissionDomainId The domain ID in which _user has the Administration permission
     * @param _user Address of the user we want to give a manager role to
     */
    "setTaskManagerRole(uint256,address,uint256,uint256)"(
      _id: BigNumberish,
      _user: string,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * This function can only be called through `executeTaskRoleAssignment`.
     * Assigning evaluator role. Can only be set if there is no one currently assigned to be an evaluator. Manager of the task and user we want to assign role to both need to agree. Managers can assign themselves to this role, if there is no one currently assigned to it.
     * @param _id Id of the task
     * @param _user Address of the user we want to give a evaluator role to
     */
    setTaskEvaluatorRole(
      _id: BigNumberish,
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * This function can only be called through `executeTaskRoleAssignment`.
     * Assigning evaluator role. Can only be set if there is no one currently assigned to be an evaluator. Manager of the task and user we want to assign role to both need to agree. Managers can assign themselves to this role, if there is no one currently assigned to it.
     * @param _id Id of the task
     * @param _user Address of the user we want to give a evaluator role to
     */
    "setTaskEvaluatorRole(uint256,address)"(
      _id: BigNumberish,
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * This function can only be called through `executeTaskRoleAssignment`.
     * Assigning worker role. Can only be set if there is no one currently assigned to be a worker. Manager of the task and user we want to assign role to both need to agree.
     * @param _id Id of the task
     * @param _user Address of the user we want to give a worker role to
     */
    setTaskWorkerRole(
      _id: BigNumberish,
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * This function can only be called through `executeTaskRoleAssignment`.
     * Assigning worker role. Can only be set if there is no one currently assigned to be a worker. Manager of the task and user we want to assign role to both need to agree.
     * @param _id Id of the task
     * @param _user Address of the user we want to give a worker role to
     */
    "setTaskWorkerRole(uint256,address)"(
      _id: BigNumberish,
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Removing evaluator role. Agreed between manager and currently assigned evaluator.
     * @param _id Id of the task
     */
    removeTaskEvaluatorRole(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Removing evaluator role. Agreed between manager and currently assigned evaluator.
     * @param _id Id of the task
     */
    "removeTaskEvaluatorRole(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Removing worker role. Agreed between manager and currently assigned worker.
     * @param _id Id of the task
     */
    removeTaskWorkerRole(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Removing worker role. Agreed between manager and currently assigned worker.
     * @param _id Id of the task
     */
    "removeTaskWorkerRole(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Currently we only allow one skill per task although we have provisioned for an array of skills in `Task` struct. Allowed before a task is finalized.
     * Set the skill for task `_id`.
     * @param _id Id of the task
     * @param _skillId Id of the skill which has to be a global skill
     */
    setTaskSkill(
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Currently we only allow one skill per task although we have provisioned for an array of skills in `Task` struct. Allowed before a task is finalized.
     * Set the skill for task `_id`.
     * @param _id Id of the task
     * @param _skillId Id of the skill which has to be a global skill
     */
    "setTaskSkill(uint256,uint256)"(
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Set the hash for the task brief, aka task work specification, which identifies the task brief content in ddb. Allowed before a task is finalized.
     * @param _id Id of the task
     * @param _specificationHash Unique hash of the task brief in ddb
     */
    setTaskBrief(
      _id: BigNumberish,
      _specificationHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Set the hash for the task brief, aka task work specification, which identifies the task brief content in ddb. Allowed before a task is finalized.
     * @param _id Id of the task
     * @param _specificationHash Unique hash of the task brief in ddb
     */
    "setTaskBrief(uint256,bytes32)"(
      _id: BigNumberish,
      _specificationHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Set the due date on task `_id`. Allowed before a task is finalized.
     * @param _dueDate Due date as seconds since unix epoch
     * @param _id Id of the task
     */
    setTaskDueDate(
      _id: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Set the due date on task `_id`. Allowed before a task is finalized.
     * @param _dueDate Due date as seconds since unix epoch
     * @param _id Id of the task
     */
    "setTaskDueDate(uint256,uint256)"(
      _id: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Set the `task.deliverableHash` and `task.completionTimestamp` properties.
     * Submit the task deliverable, i.e. the output of the work performed for task `_id`. Submission is allowed only to the assigned worker before the task due date. Submissions cannot be overwritten.
     * @param _deliverableHash Unique hash of the task deliverable content in ddb
     * @param _id Id of the task
     */
    submitTaskDeliverable(
      _id: BigNumberish,
      _deliverableHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Set the `task.deliverableHash` and `task.completionTimestamp` properties.
     * Submit the task deliverable, i.e. the output of the work performed for task `_id`. Submission is allowed only to the assigned worker before the task due date. Submissions cannot be overwritten.
     * @param _deliverableHash Unique hash of the task deliverable content in ddb
     * @param _id Id of the task
     */
    "submitTaskDeliverable(uint256,bytes32)"(
      _id: BigNumberish,
      _deliverableHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Internally call `submitTaskDeliverable` and `submitTaskWorkRating` in sequence.
     * Submit the task deliverable for Worker and rating for Manager.
     * @param _deliverableHash Unique hash of the task deliverable content in ddb
     * @param _id Id of the task
     * @param _ratingSecret Rating secret for manager
     */
    submitTaskDeliverableAndRating(
      _id: BigNumberish,
      _deliverableHash: Arrayish,
      _ratingSecret: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Internally call `submitTaskDeliverable` and `submitTaskWorkRating` in sequence.
     * Submit the task deliverable for Worker and rating for Manager.
     * @param _deliverableHash Unique hash of the task deliverable content in ddb
     * @param _id Id of the task
     * @param _ratingSecret Rating secret for manager
     */
    "submitTaskDeliverableAndRating(uint256,bytes32,bytes32)"(
      _id: BigNumberish,
      _deliverableHash: Arrayish,
      _ratingSecret: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Set the `task.finalized` property to true
     * Called after task work rating is complete which closes the task and logs the respective reputation log updates. Allowed to be called once per task. Secured function to authorised members.
     * @param _id Id of the task
     */
    finalizeTask(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Set the `task.finalized` property to true
     * Called after task work rating is complete which closes the task and logs the respective reputation log updates. Allowed to be called once per task. Secured function to authorised members.
     * @param _id Id of the task
     */
    "finalizeTask(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Set the `task.status` property to `1`.
     * Cancel a task at any point before it is finalized. Secured function to authorised members. Any funds assigned to its funding pot can be moved back to the domain via `IColony.moveFundsBetweenPots`.
     * @param _id Id of the task
     */
    cancelTask(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Set the `task.status` property to `1`.
     * Cancel a task at any point before it is finalized. Secured function to authorised members. Any funds assigned to its funding pot can be moved back to the domain via `IColony.moveFundsBetweenPots`.
     * @param _id Id of the task
     */
    "cancelTask(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Mark a task as complete after the due date has passed. This allows the task to be rated and finalized (and funds recovered) even in the presence of a worker who has disappeared. Note that if the due date was not set, then this function will throw.
     * @param _id Id of the task
     */
    completeTask(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Mark a task as complete after the due date has passed. This allows the task to be rated and finalized (and funds recovered) even in the presence of a worker who has disappeared. Note that if the due date was not set, then this function will throw.
     * @param _id Id of the task
     */
    "completeTask(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Get a task with id `_id`
     * @param _id Id of the task
     */
    getTask(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[]
      ] & {
        specificationHash: string;
        deliverableHash: string;
        status: number;
        dueDate: BigNumber;
        fundingPotId: BigNumber;
        completionTimestamp: BigNumber;
        domainId: BigNumber;
        skillIds: BigNumber[];
      }
    >;

    /**
     * Get a task with id `_id`
     * @param _id Id of the task
     */
    "getTask(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[]
      ] & {
        specificationHash: string;
        deliverableHash: string;
        status: number;
        dueDate: BigNumber;
        fundingPotId: BigNumber;
        completionTimestamp: BigNumber;
        domainId: BigNumber;
        skillIds: BigNumber[];
      }
    >;

    /**
     * Get the `Role` properties back for role `_role` in task `_id`.
     * @param _id Id of the task
     * @param _role Id of the role, as defined in TaskRole enum
     */
    getTaskRole(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [string, boolean, number] & {
        user: string;
        rateFail: boolean;
        rating: number;
      }
    >;

    /**
     * Get the `Role` properties back for role `_role` in task `_id`.
     * @param _id Id of the task
     * @param _role Id of the role, as defined in TaskRole enum
     */
    "getTaskRole(uint256,uint8)"(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [string, boolean, number] & {
        user: string;
        rateFail: boolean;
        rating: number;
      }
    >;

    /**
     * Set the reward inverse to pay out from revenue. e.g. if the fee is 1% (or 0.01), set 100.
     * @param _rewardInverse The inverse of the reward
     */
    setRewardInverse(
      _rewardInverse: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Set the reward inverse to pay out from revenue. e.g. if the fee is 1% (or 0.01), set 100.
     * @param _rewardInverse The inverse of the reward
     */
    "setRewardInverse(uint256)"(
      _rewardInverse: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Return 1 / the reward to pay out from revenue. e.g. if the fee is 1% (or 0.01), return 100.
     */
    getRewardInverse(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Return 1 / the reward to pay out from revenue. e.g. if the fee is 1% (or 0.01), return 100.
     */
    "getRewardInverse()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get payout amount in `_token` denomination for role `_role` in task `_id`.
     * @param _id Id of the task
     * @param _role Id of the role, as defined in TaskRole enum
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    getTaskPayout(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get payout amount in `_token` denomination for role `_role` in task `_id`.
     * @param _id Id of the task
     * @param _role Id of the role, as defined in TaskRole enum
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    "getTaskPayout(uint256,uint8,address)"(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set `_token` payout for manager in task `_id` to `_amount`.
     * @param _amount Payout amount
     * @param _id Id of the task
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    setTaskManagerPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Set `_token` payout for manager in task `_id` to `_amount`.
     * @param _amount Payout amount
     * @param _id Id of the task
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    "setTaskManagerPayout(uint256,address,uint256)"(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Set `_token` payout for evaluator in task `_id` to `_amount`.
     * @param _amount Payout amount
     * @param _id Id of the task
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    setTaskEvaluatorPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Set `_token` payout for evaluator in task `_id` to `_amount`.
     * @param _amount Payout amount
     * @param _id Id of the task
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    "setTaskEvaluatorPayout(uint256,address,uint256)"(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Set `_token` payout for worker in task `_id` to `_amount`.
     * @param _amount Payout amount
     * @param _id Id of the task
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    setTaskWorkerPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Set `_token` payout for worker in task `_id` to `_amount`.
     * @param _amount Payout amount
     * @param _id Id of the task
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    "setTaskWorkerPayout(uint256,address,uint256)"(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Can only call if evaluator and worker are unassigned or manager, otherwise need signature.
     * Set `_token` payout for all roles in task `_id` to the respective amounts.
     * @param _evaluatorAmount Payout amount for evaluator
     * @param _id Id of the task
     * @param _managerAmount Payout amount for manager
     * @param _token Address of the token, `0x0` value indicates Ether
     * @param _workerAmount Payout amount for worker
     */
    setAllTaskPayouts(
      _id: BigNumberish,
      _token: string,
      _managerAmount: BigNumberish,
      _evaluatorAmount: BigNumberish,
      _workerAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Can only call if evaluator and worker are unassigned or manager, otherwise need signature.
     * Set `_token` payout for all roles in task `_id` to the respective amounts.
     * @param _evaluatorAmount Payout amount for evaluator
     * @param _id Id of the task
     * @param _managerAmount Payout amount for manager
     * @param _token Address of the token, `0x0` value indicates Ether
     * @param _workerAmount Payout amount for worker
     */
    "setAllTaskPayouts(uint256,address,uint256,uint256,uint256)"(
      _id: BigNumberish,
      _token: string,
      _managerAmount: BigNumberish,
      _evaluatorAmount: BigNumberish,
      _workerAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Claim the payout in `_token` denomination for work completed in task `_id` by contributor with role `_role`. Allowed only after task is finalized. Here the network receives its fee from each payout. Ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off.
     * @param _id Id of the task
     * @param _role Id of the role, as defined in TaskRole enum
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    claimTaskPayout(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Claim the payout in `_token` denomination for work completed in task `_id` by contributor with role `_role`. Allowed only after task is finalized. Here the network receives its fee from each payout. Ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off.
     * @param _id Id of the task
     * @param _role Id of the role, as defined in TaskRole enum
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    "claimTaskPayout(uint256,uint8,address)"(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Start next reward payout for `_token`. All funds in the reward pot for `_token` will become unavailable.Add a new payment in the colony. Can only be called by users with root permission. All tokens will be locked, and can be unlocked by calling `waiveRewardPayout` or `claimRewardPayout`.
     * @param _token Address of the token used for reward payout
     * @param branchMask The branchmask of the proof
     * @param key Some Reputation hash tree key
     * @param siblings The siblings of the proof
     * @param value Reputation value
     */
    startNextRewardPayout(
      _token: string,
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Start next reward payout for `_token`. All funds in the reward pot for `_token` will become unavailable.Add a new payment in the colony. Can only be called by users with root permission. All tokens will be locked, and can be unlocked by calling `waiveRewardPayout` or `claimRewardPayout`.
     * @param _token Address of the token used for reward payout
     * @param branchMask The branchmask of the proof
     * @param key Some Reputation hash tree key
     * @param siblings The siblings of the proof
     * @param value Reputation value
     */
    "startNextRewardPayout(address,bytes,bytes,uint256,bytes32[])"(
      _token: string,
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Claim the reward payout at `_payoutId`. User needs to provide their reputation and colony-wide reputation which will be proven via Merkle proof inside this function. Can only be called if payout is active, i.e if 60 days have not passed from its creation. Can only be called if next in queue.
     * @param _payoutId Id of the reward payout
     * @param _squareRoots Square roots of values used in equation: `_squareRoots[0]` - square root of user reputation, `_squareRoots[1]` - square root of user tokens (deposited in TokenLocking), `_squareRoots[2]` - square root of total reputation, `_squareRoots[3]` - square root of total tokens, `_squareRoots[4]` - square root of numerator (user reputation * user tokens), `_squareRoots[5]` - square root of denominator (total reputation * total tokens), `_squareRoots[6]` - square root of payout amount.
     * @param branchMask The branchmask of the proof
     * @param key Some Reputation hash tree key
     * @param siblings The siblings of the proof
     * @param value Reputation value
     */
    claimRewardPayout(
      _payoutId: BigNumberish,
      _squareRoots: BigNumberish[],
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Claim the reward payout at `_payoutId`. User needs to provide their reputation and colony-wide reputation which will be proven via Merkle proof inside this function. Can only be called if payout is active, i.e if 60 days have not passed from its creation. Can only be called if next in queue.
     * @param _payoutId Id of the reward payout
     * @param _squareRoots Square roots of values used in equation: `_squareRoots[0]` - square root of user reputation, `_squareRoots[1]` - square root of user tokens (deposited in TokenLocking), `_squareRoots[2]` - square root of total reputation, `_squareRoots[3]` - square root of total tokens, `_squareRoots[4]` - square root of numerator (user reputation * user tokens), `_squareRoots[5]` - square root of denominator (total reputation * total tokens), `_squareRoots[6]` - square root of payout amount.
     * @param branchMask The branchmask of the proof
     * @param key Some Reputation hash tree key
     * @param siblings The siblings of the proof
     * @param value Reputation value
     */
    "claimRewardPayout(uint256,uint256[7],bytes,bytes,uint256,bytes32[])"(
      _payoutId: BigNumberish,
      _squareRoots: BigNumberish[],
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Get useful information about specific reward payout.
     * @param _payoutId Id of the reward payout
     */
    getRewardPayoutInfo(
      _payoutId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        reputationState: string;
        colonyWideReputation: BigNumber;
        totalTokens: BigNumber;
        amount: BigNumber;
        tokenAddress: string;
        blockTimestamp: BigNumber;
        amountRemaining: BigNumber;
        finalized: boolean;
      }
    >;

    /**
     * Get useful information about specific reward payout.
     * @param _payoutId Id of the reward payout
     */
    "getRewardPayoutInfo(uint256)"(
      _payoutId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        reputationState: string;
        colonyWideReputation: BigNumber;
        totalTokens: BigNumber;
        amount: BigNumber;
        tokenAddress: string;
        blockTimestamp: BigNumber;
        amountRemaining: BigNumber;
        finalized: boolean;
      }
    >;

    /**
     * Finalises the reward payout. Allows creation of next reward payouts for token that has been used in `_payoutId`. Can only be called when reward payout cycle is finished i.e when 60 days have passed from its creation.
     * @param _payoutId Id of the reward payout
     */
    finalizeRewardPayout(
      _payoutId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Finalises the reward payout. Allows creation of next reward payouts for token that has been used in `_payoutId`. Can only be called when reward payout cycle is finished i.e when 60 days have passed from its creation.
     * @param _payoutId Id of the reward payout
     */
    "finalizeRewardPayout(uint256)"(
      _payoutId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * For the reward funding pot (e.g. id: 0) this returns (0, 0, 0).
     * Get the non-mapping properties of a pot by id.
     * @param _id Id of the pot which details to get
     */
    getFundingPot(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        associatedType: number;
        associatedTypeId: BigNumber;
        payoutsWeCannotMake: BigNumber;
      }
    >;

    /**
     * For the reward funding pot (e.g. id: 0) this returns (0, 0, 0).
     * Get the non-mapping properties of a pot by id.
     * @param _id Id of the pot which details to get
     */
    "getFundingPot(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        associatedType: number;
        associatedTypeId: BigNumber;
        payoutsWeCannotMake: BigNumber;
      }
    >;

    /**
     * Get the number of funding pots in the colony.
     */
    getFundingPotCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the number of funding pots in the colony.
     */
    "getFundingPotCount()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the `_token` balance of pot with id `_potId`.
     * @param _potId Id of the funding pot
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    getFundingPotBalance(
      _potId: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the `_token` balance of pot with id `_potId`.
     * @param _potId Id of the funding pot
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    "getFundingPotBalance(uint256,address)"(
      _potId: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the assigned `_token` payouts of pot with id `_potId`.
     * @param _potId Id of the funding pot
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    getFundingPotPayout(
      _potId: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the assigned `_token` payouts of pot with id `_potId`.
     * @param _potId Id of the funding pot
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    "getFundingPotPayout(uint256,address)"(
      _potId: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Move a given amount: `_amount` of `_token` funds from funding pot with id `_fromPot` to one with id `_toPot`.
     * @param _amount Amount of funds
     * @param _childSkillIndex The child index in _permissionDomainId where I will be taking this action
     * @param _domainId The domain where I am taking this action, pointed to by _permissionDomainId and _childSkillIndex
     * @param _fromChildSkillIndex In the array of child skills for the skill associated with the domain pointed to by _permissionDomainId + _childSkillIndex,         the index of the skill associated with the domain that contains _fromPot
     * @param _fromPot Funding pot id providing the funds
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _toChildSkillIndex The same, but for the _toPot which the funds are being moved to
     * @param _toPot Funding pot id receiving the funds
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    moveFundsBetweenPots(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _fromPot: BigNumberish,
      _toPot: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Move a given amount: `_amount` of `_token` funds from funding pot with id `_fromPot` to one with id `_toPot`.
     * @param _amount Amount of funds
     * @param _childSkillIndex The child index in _permissionDomainId where I will be taking this action
     * @param _domainId The domain where I am taking this action, pointed to by _permissionDomainId and _childSkillIndex
     * @param _fromChildSkillIndex In the array of child skills for the skill associated with the domain pointed to by _permissionDomainId + _childSkillIndex,         the index of the skill associated with the domain that contains _fromPot
     * @param _fromPot Funding pot id providing the funds
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _toChildSkillIndex The same, but for the _toPot which the funds are being moved to
     * @param _toPot Funding pot id receiving the funds
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _fromPot: BigNumberish,
      _toPot: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * DEPRECATEDMove a given amount: `_amount` of `_token` funds from funding pot with id `_fromPot` to one with id `_toPot`.
     * @param _amount Amount of funds
     * @param _fromChildSkillIndex The child index in `_permissionDomainId` where we can find the domain for `_fromPotId`
     * @param _fromPot Funding pot id providing the funds
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _toChildSkillIndex The child index in `_permissionDomainId` where we can find the domain for `_toPotId`
     * @param _toPot Funding pot id receiving the funds
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,address)"(
      _permissionDomainId: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _fromPot: BigNumberish,
      _toPot: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Move any funds received by the colony in `_token` denomination to the top-level domain pot, siphoning off a small amount to the reward pot. If called against a colony's own token, no fee is taken.
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    claimColonyFunds(
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Move any funds received by the colony in `_token` denomination to the top-level domain pot, siphoning off a small amount to the reward pot. If called against a colony's own token, no fee is taken.
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    "claimColonyFunds(address)"(
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Get the total amount of tokens `_token` minus amount reserved to be paid to the reputation and token holders as rewards.
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    getNonRewardPotsTotal(
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the total amount of tokens `_token` minus amount reserved to be paid to the reputation and token holders as rewards.
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    "getNonRewardPotsTotal(address)"(
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Allow the _approvee to obligate some amount of tokens as a stake.
     * @param _amount Amount of internal token up to which we are willing to be obligated.
     * @param _approvee Address of the account we are willing to let obligate us.
     * @param _domainId Domain in which we are willing to be obligated.
     */
    approveStake(
      _approvee: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Allow the _approvee to obligate some amount of tokens as a stake.
     * @param _amount Amount of internal token up to which we are willing to be obligated.
     * @param _approvee Address of the account we are willing to let obligate us.
     * @param _domainId Domain in which we are willing to be obligated.
     */
    "approveStake(address,uint256,uint256)"(
      _approvee: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Obligate the user some amount of tokens as a stake.
     * @param _amount Amount of internal token we are obligating.
     * @param _domainId Domain in which we are obligating the user.
     * @param _user Address of the account we are obligating.
     */
    obligateStake(
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Obligate the user some amount of tokens as a stake.
     * @param _amount Amount of internal token we are obligating.
     * @param _domainId Domain in which we are obligating the user.
     * @param _user Address of the account we are obligating.
     */
    "obligateStake(address,uint256,uint256)"(
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Deobligate the user some amount of tokens, releasing the stake.
     * @param _amount Amount of internal token we are deobligating.
     * @param _domainId Domain in which we are deobligating the user.
     * @param _user Address of the account we are deobligating.
     */
    deobligateStake(
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Deobligate the user some amount of tokens, releasing the stake.
     * @param _amount Amount of internal token we are deobligating.
     * @param _domainId Domain in which we are deobligating the user.
     * @param _user Address of the account we are deobligating.
     */
    "deobligateStake(address,uint256,uint256)"(
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Transfer some amount of obligated tokens. Can be called by the arbitration role.
     * @param _amount Amount of internal token we are transferring.
     * @param _childSkillIndex The child index in `_permissionDomainId` where we can find `_domainId`.
     * @param _domainId Domain in which we are transferring the tokens.
     * @param _obligator Address of the account who set the obligation.
     * @param _permissionDomainId The domainId in which I have the permission to take this action.
     * @param _recipient Recipient of the transferred tokens.
     * @param _user Address of the account we are transferring.
     */
    transferStake(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _obligator: string,
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      _recipient: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Transfer some amount of obligated tokens. Can be called by the arbitration role.
     * @param _amount Amount of internal token we are transferring.
     * @param _childSkillIndex The child index in `_permissionDomainId` where we can find `_domainId`.
     * @param _domainId Domain in which we are transferring the tokens.
     * @param _obligator Address of the account who set the obligation.
     * @param _permissionDomainId The domainId in which I have the permission to take this action.
     * @param _recipient Recipient of the transferred tokens.
     * @param _user Address of the account we are transferring.
     */
    "transferStake(uint256,uint256,address,address,uint256,uint256,address)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _obligator: string,
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      _recipient: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * View an approval to obligate tokens.
     * @param _domainId Domain in which we are willing to be obligated.
     * @param _obligator Address of the account we are willing to let obligate us.
     * @param _user User allowing their tokens to be obligated.
     */
    getApproval(
      _user: string,
      _obligator: string,
      _domainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * View an approval to obligate tokens.
     * @param _domainId Domain in which we are willing to be obligated.
     * @param _obligator Address of the account we are willing to let obligate us.
     * @param _user User allowing their tokens to be obligated.
     */
    "getApproval(address,address,uint256)"(
      _user: string,
      _obligator: string,
      _domainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * View an obligation of tokens.
     * @param _domainId Domain in which we are obligated.
     * @param _obligator Address of the account who obligated us.
     * @param _user User whose tokens are obligated.
     */
    getObligation(
      _user: string,
      _obligator: string,
      _domainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * View an obligation of tokens.
     * @param _domainId Domain in which we are obligated.
     * @param _obligator Address of the account who obligated us.
     * @param _user User whose tokens are obligated.
     */
    "getObligation(address,address,uint256)"(
      _user: string,
      _obligator: string,
      _domainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the domain corresponding to a funding pot
     * @param _fundingPotId Id of the funding pot
     */
    getDomainFromFundingPot(
      _fundingPotId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the domain corresponding to a funding pot
     * @param _fundingPotId Id of the funding pot
     */
    "getDomainFromFundingPot(uint256)"(
      _fundingPotId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Burn tokens held by the colony. Can only burn tokens held in the root funding pot.
     * @param amount The amount of tokens to burn
     * @param token The address of the token to burn
     */
    burnTokens(
      token: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Burn tokens held by the colony. Can only burn tokens held in the root funding pot.
     * @param amount The amount of tokens to burn
     * @param token The address of the token to burn
     */
    "burnTokens(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * unlock the native colony token, if possible
     */
    unlockToken(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    /**
     * unlock the native colony token, if possible
     */
    "unlockToken()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Update the internal bookkeeping around external ERC20 approvals
     * @param spender The account we have approved
     * @param token The address of the token which was approved
     */
    updateApprovalAmount(
      token: string,
      spender: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Update the internal bookkeeping around external ERC20 approvals
     * @param spender The account we have approved
     * @param token The address of the token which was approved
     */
    "updateApprovalAmount(address,address)"(
      token: string,
      spender: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Get the current approval amount
     * @param spender The account we have approved
     * @param token The address of the token which was approved
     */
    getTokenApproval(
      token: string,
      spender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the current approval amount
     * @param spender The account we have approved
     * @param token The address of the token which was approved
     */
    "getTokenApproval(address,address)"(
      token: string,
      spender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the current total approval amount across all spenders
     * @param token The address of the token which was approved
     */
    getTotalTokenApproval(
      token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the current total approval amount across all spenders
     * @param token The address of the token which was approved
     */
    "getTotalTokenApproval(address)"(
      token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };

  /**
   * Indicate approval to exit recovery mode. Can only be called by user with recovery role.
   */
  approveExitRecovery(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Indicate approval to exit recovery mode. Can only be called by user with recovery role.
   */
  "approveExitRecovery()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * No return value, but should throw if protected.This is external, but is only expected to be called from ContractRecovery; no need toexpose this to any users.
   * Check whether the supplied slot is a protected variable specific to this contract
   * @param _slot The storage slot number to check.
   */
  checkNotAdditionalProtectedVariable(
    _slot: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<void>;

  /**
   * No return value, but should throw if protected.This is external, but is only expected to be called from ContractRecovery; no need toexpose this to any users.
   * Check whether the supplied slot is a protected variable specific to this contract
   * @param _slot The storage slot number to check.
   */
  "checkNotAdditionalProtectedVariable(uint256)"(
    _slot: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<void>;

  /**
   * Put colony network mining into recovery mode. Can only be called by user with recovery role.
   */
  enterRecoveryMode(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Put colony network mining into recovery mode. Can only be called by user with recovery role.
   */
  "enterRecoveryMode()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Executes a metatransaction targeting this contract
   * @param payload The transaction data that will be executed if signature valid
   * @param sigR The 'r' part of the signature
   * @param sigS The 's' part of the signature
   * @param sigV The 'v' part of the signature
   * @param userAddress The address of the user that signed the metatransaction
   */
  executeMetaTransaction(
    userAddress: string,
    payload: Arrayish,
    sigR: Arrayish,
    sigS: Arrayish,
    sigV: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Executes a metatransaction targeting this contract
   * @param payload The transaction data that will be executed if signature valid
   * @param sigR The 'r' part of the signature
   * @param sigS The 's' part of the signature
   * @param sigV The 'v' part of the signature
   * @param userAddress The address of the user that signed the metatransaction
   */
  "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(
    userAddress: string,
    payload: Arrayish,
    sigR: Arrayish,
    sigS: Arrayish,
    sigV: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Exit recovery mode, can be called by anyone if enough whitelist approvals are given.
   */
  exitRecoveryMode(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Exit recovery mode, can be called by anyone if enough whitelist approvals are given.
   */
  "exitRecoveryMode()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Gets the next metatransaction nonce for user that should be used targeting this contract
   * @param userAddress The address of the user that will sign the metatransaction
   */
  getMetatransactionNonce(
    userAddress: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Gets the next metatransaction nonce for user that should be used targeting this contract
   * @param userAddress The address of the user that will sign the metatransaction
   */
  "getMetatransactionNonce(address)"(
    userAddress: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Is colony network in recovery mode.
   */
  isInRecoveryMode(overrides?: TransactionOverrides): Promise<boolean>;

  /**
   * Is colony network in recovery mode.
   */
  "isInRecoveryMode()"(overrides?: TransactionOverrides): Promise<boolean>;

  /**
   * Return number of recovery roles.
   */
  numRecoveryRoles(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Return number of recovery roles.
   */
  "numRecoveryRoles()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Remove colony recovery role. Can only be called by root role.
   * @param _user User we want to remove recovery role from
   */
  removeRecoveryRole(
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Remove colony recovery role. Can only be called by root role.
   * @param _user User we want to remove recovery role from
   */
  "removeRecoveryRole(address)"(
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Set new colony recovery role. Can be called by root.
   * @param _user User we want to give a recovery role to
   */
  setRecoveryRole(
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Set new colony recovery role. Can be called by root.
   * @param _user User we want to give a recovery role to
   */
  "setRecoveryRole(address)"(
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * certain critical variables are protected from editing in this function
   * Update value of arbitrary storage variable. Can only be called by user with recovery role.
   * @param _slot Uint address of storage slot to be updated
   * @param _value word of data to be set
   */
  setStorageSlotRecovery(
    _slot: BigNumberish,
    _value: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * certain critical variables are protected from editing in this function
   * Update value of arbitrary storage variable. Can only be called by user with recovery role.
   * @param _slot Uint address of storage slot to be updated
   * @param _value word of data to be set
   */
  "setStorageSlotRecovery(uint256,bytes32)"(
    _slot: BigNumberish,
    _value: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Get the `ColonyAuthority` for the colony.
   */
  authority(overrides?: TransactionOverrides): Promise<string>;

  /**
   * Get the `ColonyAuthority` for the colony.
   */
  "authority()"(overrides?: TransactionOverrides): Promise<string>;

  /**
   * Used for testing.
   * Get the colony `owner` address. This should be address(0x0) at all times.
   */
  owner(overrides?: TransactionOverrides): Promise<string>;

  /**
   * Used for testing.
   * Get the colony `owner` address. This should be address(0x0) at all times.
   */
  "owner()"(overrides?: TransactionOverrides): Promise<string>;

  /**
   * Get the Colony contract version. Starts from 1 and is incremented with every deployed contract change.
   */
  version(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Get the Colony contract version. Starts from 1 and is incremented with every deployed contract change.
   */
  "version()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Downgrades are not allowed, i.e. `_newVersion` should be higher than the currect colony version.
   * Upgrades a colony to a new Colony contract version `_newVersion`.
   * @param _newVersion The target version for the upgrade
   */
  upgrade(
    _newVersion: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Downgrades are not allowed, i.e. `_newVersion` should be higher than the currect colony version.
   * Upgrades a colony to a new Colony contract version `_newVersion`.
   * @param _newVersion The target version for the upgrade
   */
  "upgrade(uint256)"(
    _newVersion: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Can only be called by the colony itself, and only expected to be called as part of the `upgrade()` call. Required to be external so it can be an external call.
   * A function to be called after an upgrade has been done from v2 to v3.
   */
  finishUpgrade(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  /**
   * Can only be called by the colony itself, and only expected to be called as part of the `upgrade()` call. Required to be external so it can be an external call.
   * A function to be called after an upgrade has been done from v2 to v3.
   */
  "finishUpgrade()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * The colonyNetworkAddress we read here is set once, during `initialiseColony`.
   * Returns the colony network address set on the Colony.
   */
  getColonyNetwork(overrides?: TransactionOverrides): Promise<string>;

  /**
   * The colonyNetworkAddress we read here is set once, during `initialiseColony`.
   * Returns the colony network address set on the Colony.
   */
  "getColonyNetwork()"(overrides?: TransactionOverrides): Promise<string>;

  /**
   * Get the colony token.
   */
  getToken(overrides?: TransactionOverrides): Promise<string>;

  /**
   * Get the colony token.
   */
  "getToken()"(overrides?: TransactionOverrides): Promise<string>;

  /**
   * Execute arbitrary transaction on behalf of the Colony DEPRECATED
   * @param _action Bytes array encoding the function call and arguments
   * @param _to Contract to receive the function call (cannot be this contract, network or token locking)
   */
  makeArbitraryTransaction(
    _to: string,
    _action: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Execute arbitrary transaction on behalf of the Colony DEPRECATED
   * @param _action Bytes array encoding the function call and arguments
   * @param _to Contract to receive the function call (cannot be this contract, network or token locking)
   */
  "makeArbitraryTransaction(address,bytes)"(
    _to: string,
    _action: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Execute arbitrary transactions on behalf of the Colony in series
   * @param _actions Array of Bytes arrays encoding the function calls and arguments
   * @param _strict Boolean indicating whether if one transaction fails, the whole call to this function should fail.
   * @param _targets Array of addressed to be targeted
   */
  makeArbitraryTransactions(
    _targets: string[],
    _actions: Arrayish[],
    _strict: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Execute arbitrary transactions on behalf of the Colony in series
   * @param _actions Array of Bytes arrays encoding the function calls and arguments
   * @param _strict Boolean indicating whether if one transaction fails, the whole call to this function should fail.
   * @param _targets Array of addressed to be targeted
   */
  "makeArbitraryTransactions(address[],bytes[],bool)"(
    _targets: string[],
    _actions: Arrayish[],
    _strict: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Only callable by the colony itself. If you wish to use this functionality, you should use the makeAbitraryTransactions function
   * Executes a single arbitrary transaction
   * @param _action Bytes array encoding the function call and arguments
   * @param _target Contract to receive the function call
   */
  makeSingleArbitraryTransaction(
    _target: string,
    _action: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Only callable by the colony itself. If you wish to use this functionality, you should use the makeAbitraryTransactions function
   * Executes a single arbitrary transaction
   * @param _action Bytes array encoding the function call and arguments
   * @param _target Contract to receive the function call
   */
  "makeSingleArbitraryTransaction(address,bytes)"(
    _target: string,
    _action: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Emit a metadata string for a transaction
   * @param _metadata String of metadata for tx
   * @param _txHash Hash of transaction being annotated (0x0 for current tx)
   */
  annotateTransaction(
    _txHash: Arrayish,
    _metadata: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Emit a metadata string for a transaction
   * @param _metadata String of metadata for tx
   * @param _txHash Hash of transaction being annotated (0x0 for current tx)
   */
  "annotateTransaction(bytes32,string)"(
    _txHash: Arrayish,
    _metadata: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Set new colony root role. Can be called by root role only.
   * @param _setTo The state of the role permission (true assign the permission, false revokes it)
   * @param _user User we want to give an root role to
   */
  setRootRole(
    _user: string,
    _setTo: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Set new colony root role. Can be called by root role only.
   * @param _setTo The state of the role permission (true assign the permission, false revokes it)
   * @param _user User we want to give an root role to
   */
  "setRootRole(address,bool)"(
    _user: string,
    _setTo: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Set new colony arbitration role. Can be called by root role or architecture role.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _domainId Domain in which we are giving user the role
   * @param _permissionDomainId Domain in which the caller has root role
   * @param _setTo The state of the role permission (true assign the permission, false revokes it)
   * @param _user User we want to give an arbitration role to
   */
  setArbitrationRole(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Set new colony arbitration role. Can be called by root role or architecture role.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _domainId Domain in which we are giving user the role
   * @param _permissionDomainId Domain in which the caller has root role
   * @param _setTo The state of the role permission (true assign the permission, false revokes it)
   * @param _user User we want to give an arbitration role to
   */
  "setArbitrationRole(uint256,uint256,address,uint256,bool)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Set new colony architecture role. Can be called by root role or architecture role.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _domainId Domain in which we are giving user the role
   * @param _permissionDomainId Domain in which the caller has root/architecture role
   * @param _setTo The state of the role permission (true assign the permission, false revokes it)
   * @param _user User we want to give an architecture role to
   */
  setArchitectureRole(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Set new colony architecture role. Can be called by root role or architecture role.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _domainId Domain in which we are giving user the role
   * @param _permissionDomainId Domain in which the caller has root/architecture role
   * @param _setTo The state of the role permission (true assign the permission, false revokes it)
   * @param _user User we want to give an architecture role to
   */
  "setArchitectureRole(uint256,uint256,address,uint256,bool)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Set new colony funding role. Can be called by root role or architecture role.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _domainId Domain in which we are giving user the role
   * @param _permissionDomainId Domain in which the caller has root/architecture role
   * @param _setTo The state of the role permission (true assign the permission, false revokes it)
   * @param _user User we want to give an funding role to
   */
  setFundingRole(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Set new colony funding role. Can be called by root role or architecture role.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _domainId Domain in which we are giving user the role
   * @param _permissionDomainId Domain in which the caller has root/architecture role
   * @param _setTo The state of the role permission (true assign the permission, false revokes it)
   * @param _user User we want to give an funding role to
   */
  "setFundingRole(uint256,uint256,address,uint256,bool)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Set new colony admin role. Can be called by root role or architecture role.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _domainId Domain in which we are giving user the role
   * @param _permissionDomainId Domain in which the caller has root/architecture role
   * @param _setTo The state of the role permission (true assign the permission, false revokes it)
   * @param _user User we want to give an admin role to
   */
  setAdministrationRole(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Set new colony admin role. Can be called by root role or architecture role.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _domainId Domain in which we are giving user the role
   * @param _permissionDomainId Domain in which the caller has root/architecture role
   * @param _setTo The state of the role permission (true assign the permission, false revokes it)
   * @param _user User we want to give an admin role to
   */
  "setAdministrationRole(uint256,uint256,address,uint256,bool)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Set several roles in one transaction. Can be called by root role or architecture role.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _domainId Domain in which we are giving user the role
   * @param _permissionDomainId Domain in which the caller has root/architecture role
   * @param _roles Byte array representing the desired role setting (1 for on, 0 for off)
   * @param _user User we want to give a role to
   */
  setUserRoles(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _roles: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Set several roles in one transaction. Can be called by root role or architecture role.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _domainId Domain in which we are giving user the role
   * @param _permissionDomainId Domain in which the caller has root/architecture role
   * @param _roles Byte array representing the desired role setting (1 for on, 0 for off)
   * @param _user User we want to give a role to
   */
  "setUserRoles(uint256,uint256,address,uint256,bytes32)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _roles: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Check whether a given user has a given role for the colony. Calls the function of the same name on the colony's authority contract.
   * @param _domainId The domain where we want to check for the role
   * @param _role The role we want to check for
   * @param _user The user whose role we want to check
   */
  hasUserRole(
    _user: string,
    _domainId: BigNumberish,
    _role: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  /**
   * Check whether a given user has a given role for the colony. Calls the function of the same name on the colony's authority contract.
   * @param _domainId The domain where we want to check for the role
   * @param _role The role we want to check for
   * @param _user The user whose role we want to check
   */
  "hasUserRole(address,uint256,uint8)"(
    _user: string,
    _domainId: BigNumberish,
    _role: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  /**
   * Check whether a given user has a given role for the colony, in a child domain. Calls the function of the same name on the colony's authority contract and an internal inheritence validator function
   * @param _childDomainId The domain where we want to use the role
   * @param _childSkillIndex The index that the `_childDomainId` is relative to `_domainId`
   * @param _domainId Domain in which the caller has the role
   * @param _role The role we want to check for
   * @param _user The user whose role we want to check
   */
  hasInheritedUserRole(
    _user: string,
    _domainId: BigNumberish,
    _role: BigNumberish,
    _childSkillIndex: BigNumberish,
    _childDomainId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  /**
   * Check whether a given user has a given role for the colony, in a child domain. Calls the function of the same name on the colony's authority contract and an internal inheritence validator function
   * @param _childDomainId The domain where we want to use the role
   * @param _childSkillIndex The index that the `_childDomainId` is relative to `_domainId`
   * @param _domainId Domain in which the caller has the role
   * @param _role The role we want to check for
   * @param _user The user whose role we want to check
   */
  "hasInheritedUserRole(address,uint256,uint8,uint256,uint256)"(
    _user: string,
    _domainId: BigNumberish,
    _role: BigNumberish,
    _childSkillIndex: BigNumberish,
    _childDomainId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  /**
   * Check whether a given user can modify roles in the target domain `_childDomainId`. Mostly a convenience function to provide a uniform interface for extension contracts validating permissions
   * @param _childDomainId The domain where we want to edit roles
   * @param _childSkillIndex The index that the `_childDomainId` is relative to `_domainId`
   * @param _domainId Domain in which the caller has the role (currently Root or Architecture)
   * @param _user The user whose permissions we want to check
   */
  userCanSetRoles(
    _user: string,
    _domainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _childDomainId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  /**
   * Check whether a given user can modify roles in the target domain `_childDomainId`. Mostly a convenience function to provide a uniform interface for extension contracts validating permissions
   * @param _childDomainId The domain where we want to edit roles
   * @param _childSkillIndex The index that the `_childDomainId` is relative to `_domainId`
   * @param _domainId Domain in which the caller has the role (currently Root or Architecture)
   * @param _user The user whose permissions we want to check
   */
  "userCanSetRoles(address,uint256,uint256,uint256)"(
    _user: string,
    _domainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _childDomainId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  /**
   * Gets the bytes32 representation of the roles for a user in a given domain
   * @param _domain The domain we want to get roles in
   * @param _user The user whose roles we want to get
   */
  getUserRoles(
    _user: string,
    _domain: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  /**
   * Gets the bytes32 representation of the roles for a user in a given domain
   * @param _domain The domain we want to get roles in
   * @param _user The user whose roles we want to get
   */
  "getUserRoles(address,uint256)"(
    _user: string,
    _domain: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  /**
   * Gets the bytes32 representation of the roles authorized to call a function
   * @param _sig The function signature
   */
  getCapabilityRoles(
    _sig: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  /**
   * Gets the bytes32 representation of the roles authorized to call a function
   * @param _sig The function signature
   */
  "getCapabilityRoles(bytes4)"(
    _sig: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  /**
   * Emit a positive domain reputation update. Available only to Root role holders
   * @param _amount The (positive) amount of reputation to gain
   * @param _domainId The domain where the user will gain reputation
   * @param _user The user who will gain reputation
   */
  emitDomainReputationReward(
    _domainId: BigNumberish,
    _user: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Emit a positive domain reputation update. Available only to Root role holders
   * @param _amount The (positive) amount of reputation to gain
   * @param _domainId The domain where the user will gain reputation
   * @param _user The user who will gain reputation
   */
  "emitDomainReputationReward(uint256,address,int256)"(
    _domainId: BigNumberish,
    _user: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Emit a positive skill reputation update. Available only to Root role holders
   * @param _amount The (positive) amount of reputation to gain
   * @param _skillId The skill where the user will gain reputation
   * @param _user The user who will gain reputation
   */
  emitSkillReputationReward(
    _skillId: BigNumberish,
    _user: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Emit a positive skill reputation update. Available only to Root role holders
   * @param _amount The (positive) amount of reputation to gain
   * @param _skillId The skill where the user will gain reputation
   * @param _user The user who will gain reputation
   */
  "emitSkillReputationReward(uint256,address,int256)"(
    _skillId: BigNumberish,
    _user: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Emit a negative domain reputation update. Available only to Arbitration role holders
   * @param _amount The (negative) amount of reputation to lose
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _domainId The domain where the user will lose reputation
   * @param _permissionDomainId The domainId in which I hold the Arbitration role
   * @param _user The user who will lose reputation
   */
  emitDomainReputationPenalty(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _domainId: BigNumberish,
    _user: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Emit a negative domain reputation update. Available only to Arbitration role holders
   * @param _amount The (negative) amount of reputation to lose
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _domainId The domain where the user will lose reputation
   * @param _permissionDomainId The domainId in which I hold the Arbitration role
   * @param _user The user who will lose reputation
   */
  "emitDomainReputationPenalty(uint256,uint256,uint256,address,int256)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _domainId: BigNumberish,
    _user: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Emit a negative skill reputation update. Available only to Arbitration role holders in the root domain
   * @param _amount The (negative) amount of reputation to lose
   * @param _skillId The skill where the user will lose reputation
   * @param _user The user who will lose reputation
   */
  emitSkillReputationPenalty(
    _skillId: BigNumberish,
    _user: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Emit a negative skill reputation update. Available only to Arbitration role holders in the root domain
   * @param _amount The (negative) amount of reputation to lose
   * @param _skillId The skill where the user will lose reputation
   * @param _user The user who will lose reputation
   */
  "emitSkillReputationPenalty(uint256,address,int256)"(
    _skillId: BigNumberish,
    _user: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Sets the reward inverse to the uint max 2**256 - 1.
   * Called once when the colony is created to initialise certain storage slot values.
   * @param _colonyNetworkAddress Address of the colony network
   * @param _token Address of the colony ERC20 Token
   */
  initialiseColony(
    _colonyNetworkAddress: string,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Sets the reward inverse to the uint max 2**256 - 1.
   * Called once when the colony is created to initialise certain storage slot values.
   * @param _colonyNetworkAddress Address of the colony network
   * @param _token Address of the colony ERC20 Token
   */
  "initialiseColony(address,address)"(
    _colonyNetworkAddress: string,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Called to change the metadata associated with a colony. Expected to be a IPFS hash of a JSON blob, but not enforced to any degree by the contracts
   * @param _metadata IPFS hash of the metadata
   */
  editColony(
    _metadata: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Called to change the metadata associated with a colony. Expected to be a IPFS hash of a JSON blob, but not enforced to any degree by the contracts
   * @param _metadata IPFS hash of the metadata
   */
  "editColony(string)"(
    _metadata: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Called to change the metadata associated with a colony. Expected to be a IPFS hash of a delta to a JSON blob, but not enforced to any degree by the contracts
   * @param _metadataDelta IPFS hash of the metadata delta
   */
  editColonyByDelta(
    _metadataDelta: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Called to change the metadata associated with a colony. Expected to be a IPFS hash of a delta to a JSON blob, but not enforced to any degree by the contracts
   * @param _metadataDelta IPFS hash of the metadata delta
   */
  "editColonyByDelta(string)"(
    _metadataDelta: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Only allowed to be called when `taskCount` is `0` by authorized addresses.
   * Allows the colony to bootstrap itself by having initial reputation and token `_amount` assigned to `_users`. This reputation is assigned in the colony-wide domain. Secured function to authorised members.
   * @param _amount Amount of reputation/tokens for every address
   * @param _users Array of address to bootstrap with reputation
   */
  bootstrapColony(
    _users: string[],
    _amount: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Only allowed to be called when `taskCount` is `0` by authorized addresses.
   * Allows the colony to bootstrap itself by having initial reputation and token `_amount` assigned to `_users`. This reputation is assigned in the colony-wide domain. Secured function to authorised members.
   * @param _amount Amount of reputation/tokens for every address
   * @param _users Array of address to bootstrap with reputation
   */
  "bootstrapColony(address[],int256[])"(
    _users: string[],
    _amount: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Mint `_wad` amount of colony tokens. Secured function to authorised members.
   * @param _wad Amount to mint
   */
  mintTokens(
    _wad: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Mint `_wad` amount of colony tokens. Secured function to authorised members.
   * @param _wad Amount to mint
   */
  "mintTokens(uint256)"(
    _wad: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Mint `_wad` amount of colony tokens and send to `_guy`. Secured function to authorised members.
   * @param _guy Recipient of new tokens
   * @param _wad Amount to mint
   */
  mintTokensFor(
    _guy: string,
    _wad: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Mint `_wad` amount of colony tokens and send to `_guy`. Secured function to authorised members.
   * @param _guy Recipient of new tokens
   * @param _wad Amount to mint
   */
  "mintTokensFor(address,uint256)"(
    _guy: string,
    _wad: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Lock the colony's token. Can only be called by a network-managed extension.
   */
  lockToken(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  /**
   * Lock the colony's token. Can only be called by a network-managed extension.
   */
  "lockToken()"(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  /**
   * Unlock the colony's token for a user. Can only be called by a network-managed extension.
   * @param lockId The specific lock to unlock
   * @param user The user to unlock
   */
  unlockTokenForUser(
    user: string,
    lockId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Unlock the colony's token for a user. Can only be called by a network-managed extension.
   * @param lockId The specific lock to unlock
   * @param user The user to unlock
   */
  "unlockTokenForUser(address,uint256)"(
    user: string,
    lockId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Register colony's ENS label.
   * @param colonyName The label to register.
   * @param orbitdb The path of the orbitDB database associated with the colony name
   */
  registerColonyLabel(
    colonyName: string,
    orbitdb: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Register colony's ENS label.
   * @param colonyName The label to register.
   * @param orbitdb The path of the orbitDB database associated with the colony name
   */
  "registerColonyLabel(string,string)"(
    colonyName: string,
    orbitdb: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Update a colony's orbitdb address. Can only be called by a colony with a registered subdomain
   * @param orbitdb The path of the orbitDB database to be associated with the colony
   */
  updateColonyOrbitDB(
    orbitdb: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Update a colony's orbitdb address. Can only be called by a colony with a registered subdomain
   * @param orbitdb The path of the orbitDB database to be associated with the colony
   */
  "updateColonyOrbitDB(string)"(
    orbitdb: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Install an extension to the colony. Secured function to authorised members.
   * @param extensionId keccak256 hash of the extension name, used as an indentifier
   * @param version The new extension version to install
   */
  installExtension(
    extensionId: Arrayish,
    version: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Install an extension to the colony. Secured function to authorised members.
   * @param extensionId keccak256 hash of the extension name, used as an indentifier
   * @param version The new extension version to install
   */
  "installExtension(bytes32,uint256)"(
    extensionId: Arrayish,
    version: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Upgrade an extension in a colony. Secured function to authorised members.
   * @param extensionId keccak256 hash of the extension name, used as an indentifier
   * @param newVersion The version to upgrade to (must be one larger than the current version)
   */
  upgradeExtension(
    extensionId: Arrayish,
    newVersion: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Upgrade an extension in a colony. Secured function to authorised members.
   * @param extensionId keccak256 hash of the extension name, used as an indentifier
   * @param newVersion The version to upgrade to (must be one larger than the current version)
   */
  "upgradeExtension(bytes32,uint256)"(
    extensionId: Arrayish,
    newVersion: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Set the deprecation of an extension in a colony. Secured function to authorised members.
   * @param deprecated Whether to deprecate the extension or not
   * @param extensionId keccak256 hash of the extension name, used as an indentifier
   */
  deprecateExtension(
    extensionId: Arrayish,
    deprecated: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Set the deprecation of an extension in a colony. Secured function to authorised members.
   * @param deprecated Whether to deprecate the extension or not
   * @param extensionId keccak256 hash of the extension name, used as an indentifier
   */
  "deprecateExtension(bytes32,bool)"(
    extensionId: Arrayish,
    deprecated: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * This is a permanent action -- re-installing the extension will deploy a new contractIt is recommended to deprecate an extension before uninstalling to allow active objects to be resolved
   * Uninstall an extension from a colony. Secured function to authorised members.
   * @param extensionId keccak256 hash of the extension name, used as an indentifier
   */
  uninstallExtension(
    extensionId: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * This is a permanent action -- re-installing the extension will deploy a new contractIt is recommended to deprecate an extension before uninstalling to allow active objects to be resolved
   * Uninstall an extension from a colony. Secured function to authorised members.
   * @param extensionId keccak256 hash of the extension name, used as an indentifier
   */
  "uninstallExtension(bytes32)"(
    extensionId: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Initialise the local skill tree for the colony.
   */
  initialiseRootLocalSkill(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Initialise the local skill tree for the colony.
   */
  "initialiseRootLocalSkill()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Add a new local skill for the colony. Secured function to authorised members.
   */
  addLocalSkill(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  /**
   * Add a new local skill for the colony. Secured function to authorised members.
   */
  "addLocalSkill()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Deprecate a local skill for the colony. Secured function to authorised members.
   * @param deprecated Deprecation status to set for the skill
   * @param localSkillId Id for the local skill
   */
  deprecateLocalSkill(
    localSkillId: BigNumberish,
    deprecated: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Deprecate a local skill for the colony. Secured function to authorised members.
   * @param deprecated Deprecation status to set for the skill
   * @param localSkillId Id for the local skill
   */
  "deprecateLocalSkill(uint256,bool)"(
    localSkillId: BigNumberish,
    deprecated: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Get the root local skill id
   */
  getRootLocalSkill(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Get the root local skill id
   */
  "getRootLocalSkill()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Adding new domains is currently retricted to one level only, i.e. `_parentDomainId` has to be the root domain id: `1`.
   * Add a colony domain, and its respective local skill under skill with id `_parentSkillId`. New funding pot is created and associated with the domain here.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _parentDomainId Id of the domain under which the new one will be added
   * @param _permissionDomainId The domainId in which I have the permission to take this action
   */
  addDomain(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _parentDomainId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Adding new domains is currently retricted to one level only, i.e. `_parentDomainId` has to be the root domain id: `1`.
   * Add a colony domain, and its respective local skill under skill with id `_parentSkillId`. New funding pot is created and associated with the domain here.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _parentDomainId Id of the domain under which the new one will be added
   * @param _permissionDomainId The domainId in which I have the permission to take this action
   */
  "addDomain(uint256,uint256,uint256)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _parentDomainId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Adding new domains is currently retricted to one level only, i.e. `_parentDomainId` has to be the root domain id: `1`.We expect this function to only be used by the dapp
   * Add a colony domain, and its respective local skill under skill with id `_parentSkillId`. New funding pot is created and associated with the domain here.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _metadata Metadata relating to the domain. Expected to be the IPFS hash of a JSON blob, but not enforced by the contracts.
   * @param _parentDomainId Id of the domain under which the new one will be added
   * @param _permissionDomainId The domainId in which I have the permission to take this action
   */
  "addDomain(uint256,uint256,uint256,string)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _parentDomainId: BigNumberish,
    _metadata: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Add a colony domain, and its respective local skill under skill with id `_parentSkillId`. New funding pot is created and associated with the domain here.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _domainId Id of the domain being edited
   * @param _metadata Metadata relating to the domain. Expected to be the IPFS hash of a JSON blob, but not enforced by the contracts.
   * @param _permissionDomainId The domainId in which I have the permission to take this action
   */
  editDomain(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _domainId: BigNumberish,
    _metadata: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Add a colony domain, and its respective local skill under skill with id `_parentSkillId`. New funding pot is created and associated with the domain here.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _domainId Id of the domain being edited
   * @param _metadata Metadata relating to the domain. Expected to be the IPFS hash of a JSON blob, but not enforced by the contracts.
   * @param _permissionDomainId The domainId in which I have the permission to take this action
   */
  "editDomain(uint256,uint256,uint256,string)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _domainId: BigNumberish,
    _metadata: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Get a domain by id.
   * @param _id Id of the domain which details to get
   */
  getDomain(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [BigNumber, BigNumber] & { skillId: BigNumber; fundingPotId: BigNumber }
  >;

  /**
   * Get a domain by id.
   * @param _id Id of the domain which details to get
   */
  "getDomain(uint256)"(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [BigNumber, BigNumber] & { skillId: BigNumber; fundingPotId: BigNumber }
  >;

  /**
   * Get the number of domains in the colony.
   */
  getDomainCount(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Get the number of domains in the colony.
   */
  "getDomainCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * For more detail about branchMask and siblings, examine the PatriciaTree implementation. While external, likely only to be used by the Colony contracts, as it checks that the user is proving their own reputation in the current colony. The `verifyProof` function can be used to verify any proof, though this function is not currently exposed on the Colony's EtherRouter.
   * Helper function that can be used by a client to verify the correctness of a patricia proof they have been supplied with.
   * @param branchMask The branchmask of the proof
   * @param key The key of the element the proof is for.
   * @param siblings The siblings of the proof
   * @param value The value of the element that the proof is for.
   */
  verifyReputationProof(
    key: Arrayish,
    value: Arrayish,
    branchMask: BigNumberish,
    siblings: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  /**
   * For more detail about branchMask and siblings, examine the PatriciaTree implementation. While external, likely only to be used by the Colony contracts, as it checks that the user is proving their own reputation in the current colony. The `verifyProof` function can be used to verify any proof, though this function is not currently exposed on the Colony's EtherRouter.
   * Helper function that can be used by a client to verify the correctness of a patricia proof they have been supplied with.
   * @param branchMask The branchmask of the proof
   * @param key The key of the element the proof is for.
   * @param siblings The siblings of the proof
   * @param value The value of the element that the proof is for.
   */
  "verifyReputationProof(bytes,bytes,uint256,bytes32[])"(
    key: Arrayish,
    value: Arrayish,
    branchMask: BigNumberish,
    siblings: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  /**
   * Update the default global claim delay for expenditures
   * @param _globalClaimDelay The new default global claim delay
   */
  setDefaultGlobalClaimDelay(
    _globalClaimDelay: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Update the default global claim delay for expenditures
   * @param _globalClaimDelay The new default global claim delay
   */
  "setDefaultGlobalClaimDelay(uint256)"(
    _globalClaimDelay: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Add a new expenditure in the colony. Secured function to authorised members.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)
   * @param _domainId The domain where the expenditure belongs
   * @param _permissionDomainId The domainId in which I have the permission to take this action
   */
  makeExpenditure(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _domainId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Add a new expenditure in the colony. Secured function to authorised members.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)
   * @param _domainId The domain where the expenditure belongs
   * @param _permissionDomainId The domainId in which I have the permission to take this action
   */
  "makeExpenditure(uint256,uint256,uint256)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _domainId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Updates the expenditure owner. Can only be called by expenditure owner.
   * @param _id Expenditure identifier
   * @param _newOwner New owner of expenditure
   */
  transferExpenditure(
    _id: BigNumberish,
    _newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Updates the expenditure owner. Can only be called by expenditure owner.
   * @param _id Expenditure identifier
   * @param _newOwner New owner of expenditure
   */
  "transferExpenditure(uint256,address)"(
    _id: BigNumberish,
    _newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * This is now deprecated and will be removed in a future version
   * DEPRECATED Updates the expenditure owner. Can only be called by Arbitration role.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)
   * @param _id Expenditure identifier
   * @param _newOwner New owner of expenditure
   * @param _permissionDomainId The domainId in which I have the permission to take this action
   */
  transferExpenditureViaArbitration(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * This is now deprecated and will be removed in a future version
   * DEPRECATED Updates the expenditure owner. Can only be called by Arbitration role.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)
   * @param _id Expenditure identifier
   * @param _newOwner New owner of expenditure
   * @param _permissionDomainId The domainId in which I have the permission to take this action
   */
  "transferExpenditureViaArbitration(uint256,uint256,uint256,address)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Cancels the expenditure and prevents further editing. Can only be called by expenditure owner.
   * @param _id Expenditure identifier
   */
  cancelExpenditure(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Cancels the expenditure and prevents further editing. Can only be called by expenditure owner.
   * @param _id Expenditure identifier
   */
  "cancelExpenditure(uint256)"(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Locks the expenditure and prevents further editing. Can only be called by expenditure owner.
   * @param _id Expenditure identifier
   */
  lockExpenditure(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Locks the expenditure and prevents further editing. Can only be called by expenditure owner.
   * @param _id Expenditure identifier
   */
  "lockExpenditure(uint256)"(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Finalizes the expenditure and allows for funds to be claimed. Can only be called by expenditure owner.
   * @param _id Expenditure identifier
   */
  finalizeExpenditure(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Finalizes the expenditure and allows for funds to be claimed. Can only be called by expenditure owner.
   * @param _id Expenditure identifier
   */
  "finalizeExpenditure(uint256)"(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Sets the metadata for an expenditure. Can only be called by Arbitration role.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`,
   * @param _id Id of the expenditure
   * @param _metadata IPFS hash of the metadata
   * @param _permissionDomainId The domainId in which I have the permission to take this action
   */
  setExpenditureMetadata(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _metadata: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Sets the metadata for an expenditure. Can only be called by Arbitration role.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`,
   * @param _id Id of the expenditure
   * @param _metadata IPFS hash of the metadata
   * @param _permissionDomainId The domainId in which I have the permission to take this action
   */
  "setExpenditureMetadata(uint256,uint256,uint256,string)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _metadata: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Sets the metadata for an expenditure. Can only be called by expenditure owner.
   * @param _id Id of the expenditure
   * @param _metadata IPFS hash of the metadata
   */
  "setExpenditureMetadata(uint256,string)"(
    _id: BigNumberish,
    _metadata: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * DeprecatedSets the recipient on an expenditure slot. Can only be called by expenditure owner.
   * @param _id Id of the expenditure
   * @param _recipient Address of the recipient
   * @param _slot Slot for the recipient address
   */
  setExpenditureRecipient(
    _id: BigNumberish,
    _slot: BigNumberish,
    _recipient: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * DeprecatedSets the recipient on an expenditure slot. Can only be called by expenditure owner.
   * @param _id Id of the expenditure
   * @param _recipient Address of the recipient
   * @param _slot Slot for the recipient address
   */
  "setExpenditureRecipient(uint256,uint256,address)"(
    _id: BigNumberish,
    _slot: BigNumberish,
    _recipient: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Sets the recipients in given expenditure slots. Can only be called by expenditure owner.
   * @param _id Id of the expenditure
   * @param _recipients Addresses of the recipients
   * @param _slots Array of slots to set recipients
   */
  setExpenditureRecipients(
    _id: BigNumberish,
    _slots: BigNumberish[],
    _recipients: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Sets the recipients in given expenditure slots. Can only be called by expenditure owner.
   * @param _id Id of the expenditure
   * @param _recipients Addresses of the recipients
   * @param _slots Array of slots to set recipients
   */
  "setExpenditureRecipients(uint256,uint256[],address[])"(
    _id: BigNumberish,
    _slots: BigNumberish[],
    _recipients: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * DeprecatedSet the token payout on an expenditure slot. Can only be called by expenditure owner.
   * @param _amount Payout amount
   * @param _id Id of the expenditure
   * @param _slot Number of the slot
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  setExpenditurePayout(
    _id: BigNumberish,
    _slot: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * DeprecatedSet the token payout on an expenditure slot. Can only be called by expenditure owner.
   * @param _amount Payout amount
   * @param _id Id of the expenditure
   * @param _slot Number of the slot
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  "setExpenditurePayout(uint256,uint256,address,uint256)"(
    _id: BigNumberish,
    _slot: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Set the token payouts in given expenditure slots. Can only be called by expenditure owner.
   * @param _amounts Payout amounts
   * @param _id Id of the expenditure
   * @param _slots Array of slots to set payouts
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  setExpenditurePayouts(
    _id: BigNumberish,
    _slots: BigNumberish[],
    _token: string,
    _amounts: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Set the token payouts in given expenditure slots. Can only be called by expenditure owner.
   * @param _amounts Payout amounts
   * @param _id Id of the expenditure
   * @param _slots Array of slots to set payouts
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  "setExpenditurePayouts(uint256,uint256[],address,uint256[])"(
    _id: BigNumberish,
    _slots: BigNumberish[],
    _token: string,
    _amounts: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * DeprecatedSets the skill on an expenditure slot. Can only be called by expenditure owner.
   * @param _id Expenditure identifier
   * @param _skillId Id of the new skill to set
   * @param _slot Number of the slot
   */
  setExpenditureSkill(
    _id: BigNumberish,
    _slot: BigNumberish,
    _skillId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * DeprecatedSets the skill on an expenditure slot. Can only be called by expenditure owner.
   * @param _id Expenditure identifier
   * @param _skillId Id of the new skill to set
   * @param _slot Number of the slot
   */
  "setExpenditureSkill(uint256,uint256,uint256)"(
    _id: BigNumberish,
    _slot: BigNumberish,
    _skillId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Sets the skill on an expenditure slot. Can only be called by expenditure owner.
   * @param _id Expenditure identifier
   * @param _skillIds Ids of the new skills to set
   * @param _slots Array of slots to set skills
   */
  setExpenditureSkills(
    _id: BigNumberish,
    _slots: BigNumberish[],
    _skillIds: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Sets the skill on an expenditure slot. Can only be called by expenditure owner.
   * @param _id Expenditure identifier
   * @param _skillIds Ids of the new skills to set
   * @param _slots Array of slots to set skills
   */
  "setExpenditureSkills(uint256,uint256[],uint256[])"(
    _id: BigNumberish,
    _slots: BigNumberish[],
    _skillIds: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * DeprecatedSets the claim delay on an expenditure slot. Can only be called by expenditure owner.
   * @param _claimDelay Duration of time (in seconds) to delay
   * @param _id Expenditure identifier
   * @param _slot Number of the slot
   */
  setExpenditureClaimDelay(
    _id: BigNumberish,
    _slot: BigNumberish,
    _claimDelay: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * DeprecatedSets the claim delay on an expenditure slot. Can only be called by expenditure owner.
   * @param _claimDelay Duration of time (in seconds) to delay
   * @param _id Expenditure identifier
   * @param _slot Number of the slot
   */
  "setExpenditureClaimDelay(uint256,uint256,uint256)"(
    _id: BigNumberish,
    _slot: BigNumberish,
    _claimDelay: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Sets the claim delays in given expenditure slots. Can only be called by expenditure owner.
   * @param _claimDelays Durations of time (in seconds) to delay
   * @param _id Expenditure identifier
   * @param _slots Array of slots to set claim delays
   */
  setExpenditureClaimDelays(
    _id: BigNumberish,
    _slots: BigNumberish[],
    _claimDelays: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Sets the claim delays in given expenditure slots. Can only be called by expenditure owner.
   * @param _claimDelays Durations of time (in seconds) to delay
   * @param _id Expenditure identifier
   * @param _slots Array of slots to set claim delays
   */
  "setExpenditureClaimDelays(uint256,uint256[],uint256[])"(
    _id: BigNumberish,
    _slots: BigNumberish[],
    _claimDelays: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Sets the payout modifiers in given expenditure slots. Can only be called by expenditure owner.
   * @param _id Expenditure identifier
   * @param _payoutModifiers Values (between +/- WAD) to modify the payout & reputation bonus
   * @param _slots Array of slots to set payout modifiers
   */
  setExpenditurePayoutModifiers(
    _id: BigNumberish,
    _slots: BigNumberish[],
    _payoutModifiers: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Sets the payout modifiers in given expenditure slots. Can only be called by expenditure owner.
   * @param _id Expenditure identifier
   * @param _payoutModifiers Values (between +/- WAD) to modify the payout & reputation bonus
   * @param _slots Array of slots to set payout modifiers
   */
  "setExpenditurePayoutModifiers(uint256,uint256[],int256[])"(
    _id: BigNumberish,
    _slots: BigNumberish[],
    _payoutModifiers: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Set arbitrary state on an expenditure slot. Can only be called by Arbitration role.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)
   * @param _id Expenditure identifier
   * @param _keys Array of additional keys (for mappings & arrays)
   * @param _mask Array of booleans indicated whether a key is a mapping (F) or an array index (T).
   * @param _permissionDomainId The domainId in which I have the permission to take this action
   * @param _storageSlot Number of the top-level storage slot (25, 26, or 27)
   * @param _value Value to set at location
   */
  setExpenditureState(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _storageSlot: BigNumberish,
    _mask: boolean[],
    _keys: Arrayish[],
    _value: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Set arbitrary state on an expenditure slot. Can only be called by Arbitration role.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)
   * @param _id Expenditure identifier
   * @param _keys Array of additional keys (for mappings & arrays)
   * @param _mask Array of booleans indicated whether a key is a mapping (F) or an array index (T).
   * @param _permissionDomainId The domainId in which I have the permission to take this action
   * @param _storageSlot Number of the top-level storage slot (25, 26, or 27)
   * @param _value Value to set at location
   */
  "setExpenditureState(uint256,uint256,uint256,uint256,bool[],bytes32[],bytes32)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _storageSlot: BigNumberish,
    _mask: boolean[],
    _keys: Arrayish[],
    _value: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Claim the payout for an expenditure slot. Here the network receives a fee from each payout.
   * @param _id Expenditure identifier
   * @param _slot Number of the slot
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  claimExpenditurePayout(
    _id: BigNumberish,
    _slot: BigNumberish,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Claim the payout for an expenditure slot. Here the network receives a fee from each payout.
   * @param _id Expenditure identifier
   * @param _slot Number of the slot
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  "claimExpenditurePayout(uint256,uint256,address)"(
    _id: BigNumberish,
    _slot: BigNumberish,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Get the number of expenditures in the colony.
   */
  getExpenditureCount(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Get the number of expenditures in the colony.
   */
  "getExpenditureCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Returns an existing expenditure.
   * @param _id Expenditure identifier
   */
  getExpenditure(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [number, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      status: number;
      owner: string;
      fundingPotId: BigNumber;
      domainId: BigNumber;
      finalizedTimestamp: BigNumber;
      globalClaimDelay: BigNumber;
    }
  >;

  /**
   * Returns an existing expenditure.
   * @param _id Expenditure identifier
   */
  "getExpenditure(uint256)"(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [number, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      status: number;
      owner: string;
      fundingPotId: BigNumber;
      domainId: BigNumber;
      finalizedTimestamp: BigNumber;
      globalClaimDelay: BigNumber;
    }
  >;

  /**
   * Returns an existing expenditure slot.
   * @param _id Expenditure identifier
   * @param _slot Expenditure slot
   */
  getExpenditureSlot(
    _id: BigNumberish,
    _slot: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber[]] & {
      recipient: string;
      claimDelay: BigNumber;
      payoutModifier: BigNumber;
      skills: BigNumber[];
    }
  >;

  /**
   * Returns an existing expenditure slot.
   * @param _id Expenditure identifier
   * @param _slot Expenditure slot
   */
  "getExpenditureSlot(uint256,uint256)"(
    _id: BigNumberish,
    _slot: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber[]] & {
      recipient: string;
      claimDelay: BigNumber;
      payoutModifier: BigNumber;
      skills: BigNumber[];
    }
  >;

  /**
   * Returns an existing expenditure slot's payout for a token.
   * @param _id Expenditure identifier
   * @param _slot Expenditure slot
   * @param _token Token address
   */
  getExpenditureSlotPayout(
    _id: BigNumberish,
    _slot: BigNumberish,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Returns an existing expenditure slot's payout for a token.
   * @param _id Expenditure identifier
   * @param _slot Expenditure slot
   * @param _token Token address
   */
  "getExpenditureSlotPayout(uint256,uint256,address)"(
    _id: BigNumberish,
    _slot: BigNumberish,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Add a new payment in the colony. Secured function to authorised members.
   * @param _amount Payout amount
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)
   * @param _domainId The domain where the payment belongs
   * @param _permissionDomainId The domainId in which I have the permission to take this action
   * @param _recipient Address of the payment recipient
   * @param _skillId The skill associated with the payment
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  addPayment(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _recipient: string,
    _token: string,
    _amount: BigNumberish,
    _domainId: BigNumberish,
    _skillId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Add a new payment in the colony. Secured function to authorised members.
   * @param _amount Payout amount
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)
   * @param _domainId The domain where the payment belongs
   * @param _permissionDomainId The domainId in which I have the permission to take this action
   * @param _recipient Address of the payment recipient
   * @param _skillId The skill associated with the payment
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  "addPayment(uint256,uint256,address,address,uint256,uint256,uint256)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _recipient: string,
    _token: string,
    _amount: BigNumberish,
    _domainId: BigNumberish,
    _skillId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Finalizes the payment and logs the reputation log updates. Allowed to be called once after payment is fully funded. Secured function to authorised members.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _id Payment identifier
   * @param _permissionDomainId The domainId in which I have the permission to take this action
   */
  finalizePayment(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Finalizes the payment and logs the reputation log updates. Allowed to be called once after payment is fully funded. Secured function to authorised members.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _id Payment identifier
   * @param _permissionDomainId The domainId in which I have the permission to take this action
   */
  "finalizePayment(uint256,uint256,uint256)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Sets the recipient on an existing payment. Secured function to authorised members.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _id Payment identifier
   * @param _permissionDomainId The domainId in which I have the permission to take this action
   * @param _recipient Address of the payment recipient
   */
  setPaymentRecipient(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _recipient: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Sets the recipient on an existing payment. Secured function to authorised members.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _id Payment identifier
   * @param _permissionDomainId The domainId in which I have the permission to take this action
   * @param _recipient Address of the payment recipient
   */
  "setPaymentRecipient(uint256,uint256,uint256,address)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _recipient: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Sets the skill on an existing payment. Secured function to authorised members.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _id Payment identifier
   * @param _permissionDomainId The domainId in which I have the permission to take this action
   * @param _skillId Id of the new skill to set
   */
  setPaymentSkill(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _skillId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Sets the skill on an existing payment. Secured function to authorised members.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _id Payment identifier
   * @param _permissionDomainId The domainId in which I have the permission to take this action
   * @param _skillId Id of the new skill to set
   */
  "setPaymentSkill(uint256,uint256,uint256,uint256)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _skillId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Sets the payout for a given token on an existing payment. Secured function to authorised members.
   * @param _amount Payout amount
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _id Payment identifier
   * @param _permissionDomainId The domainId in which I have the permission to take this action
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  setPaymentPayout(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Sets the payout for a given token on an existing payment. Secured function to authorised members.
   * @param _amount Payout amount
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _id Payment identifier
   * @param _permissionDomainId The domainId in which I have the permission to take this action
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  "setPaymentPayout(uint256,uint256,uint256,address,uint256)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Returns an exiting payment.
   * @param _id Payment identifier
   */
  getPayment(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [string, boolean, BigNumber, BigNumber, BigNumber[]] & {
      recipient: string;
      finalized: boolean;
      fundingPotId: BigNumber;
      domainId: BigNumber;
      skills: BigNumber[];
    }
  >;

  /**
   * Returns an exiting payment.
   * @param _id Payment identifier
   */
  "getPayment(uint256)"(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [string, boolean, BigNumber, BigNumber, BigNumber[]] & {
      recipient: string;
      finalized: boolean;
      fundingPotId: BigNumber;
      domainId: BigNumber;
      skills: BigNumber[];
    }
  >;

  /**
   * Claim the payout in `_token` denomination for payment `_id`. Here the network receives its fee from each payout. Same as for tasks, ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off.
   * @param _id Payment identifier
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  claimPayment(
    _id: BigNumberish,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Claim the payout in `_token` denomination for payment `_id`. Here the network receives its fee from each payout. Same as for tasks, ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off.
   * @param _id Payment identifier
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  "claimPayment(uint256,address)"(
    _id: BigNumberish,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Get the number of payments in the colony.
   */
  getPaymentCount(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Get the number of payments in the colony.
   */
  "getPaymentCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Make a new task in the colony. Secured function to authorised members.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _domainId The domain where the task belongs
   * @param _dueDate The due date of the task, can set to `0` for no-op
   * @param _permissionDomainId The domainId in which I have the permission to take this action
   * @param _skillId The skill associated with the task, can set to `0` for no-op
   * @param _specificationHash Database identifier where the task specification is stored
   */
  makeTask(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _specificationHash: Arrayish,
    _domainId: BigNumberish,
    _skillId: BigNumberish,
    _dueDate: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Make a new task in the colony. Secured function to authorised members.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _domainId The domain where the task belongs
   * @param _dueDate The due date of the task, can set to `0` for no-op
   * @param _permissionDomainId The domainId in which I have the permission to take this action
   * @param _skillId The skill associated with the task, can set to `0` for no-op
   * @param _specificationHash Database identifier where the task specification is stored
   */
  "makeTask(uint256,uint256,bytes32,uint256,uint256,uint256)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _specificationHash: Arrayish,
    _domainId: BigNumberish,
    _skillId: BigNumberish,
    _dueDate: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Get the number of tasks in the colony.
   */
  getTaskCount(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Get the number of tasks in the colony.
   */
  "getTaskCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Starts from 0 and is incremented on every co-reviewed task change via `executeTaskChange` call.
   * @param _id Id of the task
   */
  getTaskChangeNonce(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Starts from 0 and is incremented on every co-reviewed task change via `executeTaskChange` call.
   * @param _id Id of the task
   */
  "getTaskChangeNonce(uint256)"(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * The Colony functions which require approval and the task roles to review these are set in `IColony.initialiseColony` at colony creation. Upon successful execution the `taskChangeNonces` entry for the task is incremented.
   * Executes a task update transaction `_data` which is approved and signed by two of its roles (e.g. manager and worker) using the detached signatures for these users.
   * @param _data The transaction data
   * @param _mode How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)
   * @param _sigR r output of the ECDSA signature of the transaction
   * @param _sigS s output of the ECDSA signature of the transaction
   * @param _sigV recovery id
   * @param _value The transaction value, i.e. number of wei to be sent when the transaction is executed Currently we only accept 0 value transactions but this is kept as a future option
   */
  executeTaskChange(
    _sigV: BigNumberish[],
    _sigR: Arrayish[],
    _sigS: Arrayish[],
    _mode: BigNumberish[],
    _value: BigNumberish,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * The Colony functions which require approval and the task roles to review these are set in `IColony.initialiseColony` at colony creation. Upon successful execution the `taskChangeNonces` entry for the task is incremented.
   * Executes a task update transaction `_data` which is approved and signed by two of its roles (e.g. manager and worker) using the detached signatures for these users.
   * @param _data The transaction data
   * @param _mode How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)
   * @param _sigR r output of the ECDSA signature of the transaction
   * @param _sigS s output of the ECDSA signature of the transaction
   * @param _sigV recovery id
   * @param _value The transaction value, i.e. number of wei to be sent when the transaction is executed Currently we only accept 0 value transactions but this is kept as a future option
   */
  "executeTaskChange(uint8[],bytes32[],bytes32[],uint8[],uint256,bytes)"(
    _sigV: BigNumberish[],
    _sigR: Arrayish[],
    _sigS: Arrayish[],
    _mode: BigNumberish[],
    _value: BigNumberish,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Executes a task role update transaction `_data` which is approved and signed by two of addresses. depending of which function we are calling. Allowed functions are `setTaskManagerRole`, `setTaskEvaluatorRole` and `setTaskWorkerRole`. Upon successful execution the `taskChangeNonces` entry for the task is incremented.
   * @param _data The transaction data
   * @param _mode How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)
   * @param _sigR r output of the ECDSA signature of the transaction
   * @param _sigS s output of the ECDSA signature of the transaction
   * @param _sigV recovery id
   * @param _value The transaction value, i.e. number of wei to be sent when the transaction is executed Currently we only accept 0 value transactions but this is kept as a future option
   */
  executeTaskRoleAssignment(
    _sigV: BigNumberish[],
    _sigR: Arrayish[],
    _sigS: Arrayish[],
    _mode: BigNumberish[],
    _value: BigNumberish,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Executes a task role update transaction `_data` which is approved and signed by two of addresses. depending of which function we are calling. Allowed functions are `setTaskManagerRole`, `setTaskEvaluatorRole` and `setTaskWorkerRole`. Upon successful execution the `taskChangeNonces` entry for the task is incremented.
   * @param _data The transaction data
   * @param _mode How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)
   * @param _sigR r output of the ECDSA signature of the transaction
   * @param _sigS s output of the ECDSA signature of the transaction
   * @param _sigV recovery id
   * @param _value The transaction value, i.e. number of wei to be sent when the transaction is executed Currently we only accept 0 value transactions but this is kept as a future option
   */
  "executeTaskRoleAssignment(uint8[],bytes32[],bytes32[],uint8[],uint256,bytes)"(
    _sigV: BigNumberish[],
    _sigR: Arrayish[],
    _sigS: Arrayish[],
    _mode: BigNumberish[],
    _value: BigNumberish,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Submit a hashed secret of the rating for work in task `_id` which was performed by user with task role id `_role`. Allowed within 5 days period starting which whichever is first from either the deliverable being submitted or the dueDate been reached. Allowed only for evaluator to rate worker and for worker to rate manager performance. Once submitted ratings can not be changed or overwritten.
   * @param _id Id of the task
   * @param _ratingSecret `keccak256` hash of a salt and 0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50). Can be generated via `IColony.generateSecret` helper function.
   * @param _role Id of the role, as defined in TaskRole enum
   */
  submitTaskWorkRating(
    _id: BigNumberish,
    _role: BigNumberish,
    _ratingSecret: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Submit a hashed secret of the rating for work in task `_id` which was performed by user with task role id `_role`. Allowed within 5 days period starting which whichever is first from either the deliverable being submitted or the dueDate been reached. Allowed only for evaluator to rate worker and for worker to rate manager performance. Once submitted ratings can not be changed or overwritten.
   * @param _id Id of the task
   * @param _ratingSecret `keccak256` hash of a salt and 0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50). Can be generated via `IColony.generateSecret` helper function.
   * @param _role Id of the role, as defined in TaskRole enum
   */
  "submitTaskWorkRating(uint256,uint8,bytes32)"(
    _id: BigNumberish,
    _role: BigNumberish,
    _ratingSecret: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Compares the `keccak256(_salt, _rating)` output with the previously submitted rating secret and if they match, sets the task role properties `rated` to `true` and `rating` to `_rating`.
   * Reveal the secret rating submitted in `IColony.submitTaskWorkRating` for task `_id` and task role with id `_role`. Allowed within 5 days period starting which whichever is first from either both rating secrets being submitted (via `IColony.submitTaskWorkRating`) or the 5 day rating period expiring.
   * @param _id Id of the task
   * @param _rating 0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50)
   * @param _role Id of the role, as defined in TaskRole enum
   * @param _salt Salt value used to generate the rating secret
   */
  revealTaskWorkRating(
    _id: BigNumberish,
    _role: BigNumberish,
    _rating: BigNumberish,
    _salt: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Compares the `keccak256(_salt, _rating)` output with the previously submitted rating secret and if they match, sets the task role properties `rated` to `true` and `rating` to `_rating`.
   * Reveal the secret rating submitted in `IColony.submitTaskWorkRating` for task `_id` and task role with id `_role`. Allowed within 5 days period starting which whichever is first from either both rating secrets being submitted (via `IColony.submitTaskWorkRating`) or the 5 day rating period expiring.
   * @param _id Id of the task
   * @param _rating 0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50)
   * @param _role Id of the role, as defined in TaskRole enum
   * @param _salt Salt value used to generate the rating secret
   */
  "revealTaskWorkRating(uint256,uint8,uint8,bytes32)"(
    _id: BigNumberish,
    _role: BigNumberish,
    _rating: BigNumberish,
    _salt: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Helper function used to generage consistently the rating secret using salt value `_salt` and value to hide `_value`
   * @param _salt Salt value
   * @param _value Value to hide
   */
  generateSecret(
    _salt: Arrayish,
    _value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  /**
   * Helper function used to generage consistently the rating secret using salt value `_salt` and value to hide `_value`
   * @param _salt Salt value
   * @param _value Value to hide
   */
  "generateSecret(bytes32,uint256)"(
    _salt: Arrayish,
    _value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  /**
   * Get the `ColonyStorage.RatingSecrets` information for task `_id`.
   * @param _id Id of the task
   */
  getTaskWorkRatingSecretsInfo(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [BigNumber, BigNumber] & { nSecrets: BigNumber; lastSubmittedAt: BigNumber }
  >;

  /**
   * Get the `ColonyStorage.RatingSecrets` information for task `_id`.
   * @param _id Id of the task
   */
  "getTaskWorkRatingSecretsInfo(uint256)"(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [BigNumber, BigNumber] & { nSecrets: BigNumber; lastSubmittedAt: BigNumber }
  >;

  /**
   * Get the rating secret submitted for role `_role` in task `_id`
   * @param _id Id of the task
   * @param _role Id of the role, as defined in TaskRole enum
   */
  getTaskWorkRatingSecret(
    _id: BigNumberish,
    _role: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  /**
   * Get the rating secret submitted for role `_role` in task `_id`
   * @param _id Id of the task
   * @param _role Id of the role, as defined in TaskRole enum
   */
  "getTaskWorkRatingSecret(uint256,uint8)"(
    _id: BigNumberish,
    _role: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  /**
   * This function can only be called through `executeTaskRoleAssignment`.
   * Assigning manager role. Current manager and user we want to assign role to both need to agree. User we want to set here also needs to be an admin. Note that the domain proof data comes at the end here to not interfere with the assembly argument unpacking.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _id Id of the task
   * @param _permissionDomainId The domain ID in which _user has the Administration permission
   * @param _user Address of the user we want to give a manager role to
   */
  setTaskManagerRole(
    _id: BigNumberish,
    _user: string,
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * This function can only be called through `executeTaskRoleAssignment`.
   * Assigning manager role. Current manager and user we want to assign role to both need to agree. User we want to set here also needs to be an admin. Note that the domain proof data comes at the end here to not interfere with the assembly argument unpacking.
   * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
   * @param _id Id of the task
   * @param _permissionDomainId The domain ID in which _user has the Administration permission
   * @param _user Address of the user we want to give a manager role to
   */
  "setTaskManagerRole(uint256,address,uint256,uint256)"(
    _id: BigNumberish,
    _user: string,
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * This function can only be called through `executeTaskRoleAssignment`.
   * Assigning evaluator role. Can only be set if there is no one currently assigned to be an evaluator. Manager of the task and user we want to assign role to both need to agree. Managers can assign themselves to this role, if there is no one currently assigned to it.
   * @param _id Id of the task
   * @param _user Address of the user we want to give a evaluator role to
   */
  setTaskEvaluatorRole(
    _id: BigNumberish,
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * This function can only be called through `executeTaskRoleAssignment`.
   * Assigning evaluator role. Can only be set if there is no one currently assigned to be an evaluator. Manager of the task and user we want to assign role to both need to agree. Managers can assign themselves to this role, if there is no one currently assigned to it.
   * @param _id Id of the task
   * @param _user Address of the user we want to give a evaluator role to
   */
  "setTaskEvaluatorRole(uint256,address)"(
    _id: BigNumberish,
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * This function can only be called through `executeTaskRoleAssignment`.
   * Assigning worker role. Can only be set if there is no one currently assigned to be a worker. Manager of the task and user we want to assign role to both need to agree.
   * @param _id Id of the task
   * @param _user Address of the user we want to give a worker role to
   */
  setTaskWorkerRole(
    _id: BigNumberish,
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * This function can only be called through `executeTaskRoleAssignment`.
   * Assigning worker role. Can only be set if there is no one currently assigned to be a worker. Manager of the task and user we want to assign role to both need to agree.
   * @param _id Id of the task
   * @param _user Address of the user we want to give a worker role to
   */
  "setTaskWorkerRole(uint256,address)"(
    _id: BigNumberish,
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Removing evaluator role. Agreed between manager and currently assigned evaluator.
   * @param _id Id of the task
   */
  removeTaskEvaluatorRole(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Removing evaluator role. Agreed between manager and currently assigned evaluator.
   * @param _id Id of the task
   */
  "removeTaskEvaluatorRole(uint256)"(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Removing worker role. Agreed between manager and currently assigned worker.
   * @param _id Id of the task
   */
  removeTaskWorkerRole(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Removing worker role. Agreed between manager and currently assigned worker.
   * @param _id Id of the task
   */
  "removeTaskWorkerRole(uint256)"(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Currently we only allow one skill per task although we have provisioned for an array of skills in `Task` struct. Allowed before a task is finalized.
   * Set the skill for task `_id`.
   * @param _id Id of the task
   * @param _skillId Id of the skill which has to be a global skill
   */
  setTaskSkill(
    _id: BigNumberish,
    _skillId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Currently we only allow one skill per task although we have provisioned for an array of skills in `Task` struct. Allowed before a task is finalized.
   * Set the skill for task `_id`.
   * @param _id Id of the task
   * @param _skillId Id of the skill which has to be a global skill
   */
  "setTaskSkill(uint256,uint256)"(
    _id: BigNumberish,
    _skillId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Set the hash for the task brief, aka task work specification, which identifies the task brief content in ddb. Allowed before a task is finalized.
   * @param _id Id of the task
   * @param _specificationHash Unique hash of the task brief in ddb
   */
  setTaskBrief(
    _id: BigNumberish,
    _specificationHash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Set the hash for the task brief, aka task work specification, which identifies the task brief content in ddb. Allowed before a task is finalized.
   * @param _id Id of the task
   * @param _specificationHash Unique hash of the task brief in ddb
   */
  "setTaskBrief(uint256,bytes32)"(
    _id: BigNumberish,
    _specificationHash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Set the due date on task `_id`. Allowed before a task is finalized.
   * @param _dueDate Due date as seconds since unix epoch
   * @param _id Id of the task
   */
  setTaskDueDate(
    _id: BigNumberish,
    _dueDate: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Set the due date on task `_id`. Allowed before a task is finalized.
   * @param _dueDate Due date as seconds since unix epoch
   * @param _id Id of the task
   */
  "setTaskDueDate(uint256,uint256)"(
    _id: BigNumberish,
    _dueDate: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Set the `task.deliverableHash` and `task.completionTimestamp` properties.
   * Submit the task deliverable, i.e. the output of the work performed for task `_id`. Submission is allowed only to the assigned worker before the task due date. Submissions cannot be overwritten.
   * @param _deliverableHash Unique hash of the task deliverable content in ddb
   * @param _id Id of the task
   */
  submitTaskDeliverable(
    _id: BigNumberish,
    _deliverableHash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Set the `task.deliverableHash` and `task.completionTimestamp` properties.
   * Submit the task deliverable, i.e. the output of the work performed for task `_id`. Submission is allowed only to the assigned worker before the task due date. Submissions cannot be overwritten.
   * @param _deliverableHash Unique hash of the task deliverable content in ddb
   * @param _id Id of the task
   */
  "submitTaskDeliverable(uint256,bytes32)"(
    _id: BigNumberish,
    _deliverableHash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Internally call `submitTaskDeliverable` and `submitTaskWorkRating` in sequence.
   * Submit the task deliverable for Worker and rating for Manager.
   * @param _deliverableHash Unique hash of the task deliverable content in ddb
   * @param _id Id of the task
   * @param _ratingSecret Rating secret for manager
   */
  submitTaskDeliverableAndRating(
    _id: BigNumberish,
    _deliverableHash: Arrayish,
    _ratingSecret: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Internally call `submitTaskDeliverable` and `submitTaskWorkRating` in sequence.
   * Submit the task deliverable for Worker and rating for Manager.
   * @param _deliverableHash Unique hash of the task deliverable content in ddb
   * @param _id Id of the task
   * @param _ratingSecret Rating secret for manager
   */
  "submitTaskDeliverableAndRating(uint256,bytes32,bytes32)"(
    _id: BigNumberish,
    _deliverableHash: Arrayish,
    _ratingSecret: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Set the `task.finalized` property to true
   * Called after task work rating is complete which closes the task and logs the respective reputation log updates. Allowed to be called once per task. Secured function to authorised members.
   * @param _id Id of the task
   */
  finalizeTask(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Set the `task.finalized` property to true
   * Called after task work rating is complete which closes the task and logs the respective reputation log updates. Allowed to be called once per task. Secured function to authorised members.
   * @param _id Id of the task
   */
  "finalizeTask(uint256)"(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Set the `task.status` property to `1`.
   * Cancel a task at any point before it is finalized. Secured function to authorised members. Any funds assigned to its funding pot can be moved back to the domain via `IColony.moveFundsBetweenPots`.
   * @param _id Id of the task
   */
  cancelTask(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Set the `task.status` property to `1`.
   * Cancel a task at any point before it is finalized. Secured function to authorised members. Any funds assigned to its funding pot can be moved back to the domain via `IColony.moveFundsBetweenPots`.
   * @param _id Id of the task
   */
  "cancelTask(uint256)"(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Mark a task as complete after the due date has passed. This allows the task to be rated and finalized (and funds recovered) even in the presence of a worker who has disappeared. Note that if the due date was not set, then this function will throw.
   * @param _id Id of the task
   */
  completeTask(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Mark a task as complete after the due date has passed. This allows the task to be rated and finalized (and funds recovered) even in the presence of a worker who has disappeared. Note that if the due date was not set, then this function will throw.
   * @param _id Id of the task
   */
  "completeTask(uint256)"(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Get a task with id `_id`
   * @param _id Id of the task
   */
  getTask(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [
      string,
      string,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber[]
    ] & {
      specificationHash: string;
      deliverableHash: string;
      status: number;
      dueDate: BigNumber;
      fundingPotId: BigNumber;
      completionTimestamp: BigNumber;
      domainId: BigNumber;
      skillIds: BigNumber[];
    }
  >;

  /**
   * Get a task with id `_id`
   * @param _id Id of the task
   */
  "getTask(uint256)"(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [
      string,
      string,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber[]
    ] & {
      specificationHash: string;
      deliverableHash: string;
      status: number;
      dueDate: BigNumber;
      fundingPotId: BigNumber;
      completionTimestamp: BigNumber;
      domainId: BigNumber;
      skillIds: BigNumber[];
    }
  >;

  /**
   * Get the `Role` properties back for role `_role` in task `_id`.
   * @param _id Id of the task
   * @param _role Id of the role, as defined in TaskRole enum
   */
  getTaskRole(
    _id: BigNumberish,
    _role: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [string, boolean, number] & {
      user: string;
      rateFail: boolean;
      rating: number;
    }
  >;

  /**
   * Get the `Role` properties back for role `_role` in task `_id`.
   * @param _id Id of the task
   * @param _role Id of the role, as defined in TaskRole enum
   */
  "getTaskRole(uint256,uint8)"(
    _id: BigNumberish,
    _role: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [string, boolean, number] & {
      user: string;
      rateFail: boolean;
      rating: number;
    }
  >;

  /**
   * Set the reward inverse to pay out from revenue. e.g. if the fee is 1% (or 0.01), set 100.
   * @param _rewardInverse The inverse of the reward
   */
  setRewardInverse(
    _rewardInverse: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Set the reward inverse to pay out from revenue. e.g. if the fee is 1% (or 0.01), set 100.
   * @param _rewardInverse The inverse of the reward
   */
  "setRewardInverse(uint256)"(
    _rewardInverse: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Return 1 / the reward to pay out from revenue. e.g. if the fee is 1% (or 0.01), return 100.
   */
  getRewardInverse(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Return 1 / the reward to pay out from revenue. e.g. if the fee is 1% (or 0.01), return 100.
   */
  "getRewardInverse()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Get payout amount in `_token` denomination for role `_role` in task `_id`.
   * @param _id Id of the task
   * @param _role Id of the role, as defined in TaskRole enum
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  getTaskPayout(
    _id: BigNumberish,
    _role: BigNumberish,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Get payout amount in `_token` denomination for role `_role` in task `_id`.
   * @param _id Id of the task
   * @param _role Id of the role, as defined in TaskRole enum
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  "getTaskPayout(uint256,uint8,address)"(
    _id: BigNumberish,
    _role: BigNumberish,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Set `_token` payout for manager in task `_id` to `_amount`.
   * @param _amount Payout amount
   * @param _id Id of the task
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  setTaskManagerPayout(
    _id: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Set `_token` payout for manager in task `_id` to `_amount`.
   * @param _amount Payout amount
   * @param _id Id of the task
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  "setTaskManagerPayout(uint256,address,uint256)"(
    _id: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Set `_token` payout for evaluator in task `_id` to `_amount`.
   * @param _amount Payout amount
   * @param _id Id of the task
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  setTaskEvaluatorPayout(
    _id: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Set `_token` payout for evaluator in task `_id` to `_amount`.
   * @param _amount Payout amount
   * @param _id Id of the task
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  "setTaskEvaluatorPayout(uint256,address,uint256)"(
    _id: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Set `_token` payout for worker in task `_id` to `_amount`.
   * @param _amount Payout amount
   * @param _id Id of the task
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  setTaskWorkerPayout(
    _id: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Set `_token` payout for worker in task `_id` to `_amount`.
   * @param _amount Payout amount
   * @param _id Id of the task
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  "setTaskWorkerPayout(uint256,address,uint256)"(
    _id: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Can only call if evaluator and worker are unassigned or manager, otherwise need signature.
   * Set `_token` payout for all roles in task `_id` to the respective amounts.
   * @param _evaluatorAmount Payout amount for evaluator
   * @param _id Id of the task
   * @param _managerAmount Payout amount for manager
   * @param _token Address of the token, `0x0` value indicates Ether
   * @param _workerAmount Payout amount for worker
   */
  setAllTaskPayouts(
    _id: BigNumberish,
    _token: string,
    _managerAmount: BigNumberish,
    _evaluatorAmount: BigNumberish,
    _workerAmount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Can only call if evaluator and worker are unassigned or manager, otherwise need signature.
   * Set `_token` payout for all roles in task `_id` to the respective amounts.
   * @param _evaluatorAmount Payout amount for evaluator
   * @param _id Id of the task
   * @param _managerAmount Payout amount for manager
   * @param _token Address of the token, `0x0` value indicates Ether
   * @param _workerAmount Payout amount for worker
   */
  "setAllTaskPayouts(uint256,address,uint256,uint256,uint256)"(
    _id: BigNumberish,
    _token: string,
    _managerAmount: BigNumberish,
    _evaluatorAmount: BigNumberish,
    _workerAmount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Claim the payout in `_token` denomination for work completed in task `_id` by contributor with role `_role`. Allowed only after task is finalized. Here the network receives its fee from each payout. Ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off.
   * @param _id Id of the task
   * @param _role Id of the role, as defined in TaskRole enum
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  claimTaskPayout(
    _id: BigNumberish,
    _role: BigNumberish,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Claim the payout in `_token` denomination for work completed in task `_id` by contributor with role `_role`. Allowed only after task is finalized. Here the network receives its fee from each payout. Ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off.
   * @param _id Id of the task
   * @param _role Id of the role, as defined in TaskRole enum
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  "claimTaskPayout(uint256,uint8,address)"(
    _id: BigNumberish,
    _role: BigNumberish,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Start next reward payout for `_token`. All funds in the reward pot for `_token` will become unavailable.Add a new payment in the colony. Can only be called by users with root permission. All tokens will be locked, and can be unlocked by calling `waiveRewardPayout` or `claimRewardPayout`.
   * @param _token Address of the token used for reward payout
   * @param branchMask The branchmask of the proof
   * @param key Some Reputation hash tree key
   * @param siblings The siblings of the proof
   * @param value Reputation value
   */
  startNextRewardPayout(
    _token: string,
    key: Arrayish,
    value: Arrayish,
    branchMask: BigNumberish,
    siblings: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Start next reward payout for `_token`. All funds in the reward pot for `_token` will become unavailable.Add a new payment in the colony. Can only be called by users with root permission. All tokens will be locked, and can be unlocked by calling `waiveRewardPayout` or `claimRewardPayout`.
   * @param _token Address of the token used for reward payout
   * @param branchMask The branchmask of the proof
   * @param key Some Reputation hash tree key
   * @param siblings The siblings of the proof
   * @param value Reputation value
   */
  "startNextRewardPayout(address,bytes,bytes,uint256,bytes32[])"(
    _token: string,
    key: Arrayish,
    value: Arrayish,
    branchMask: BigNumberish,
    siblings: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Claim the reward payout at `_payoutId`. User needs to provide their reputation and colony-wide reputation which will be proven via Merkle proof inside this function. Can only be called if payout is active, i.e if 60 days have not passed from its creation. Can only be called if next in queue.
   * @param _payoutId Id of the reward payout
   * @param _squareRoots Square roots of values used in equation: `_squareRoots[0]` - square root of user reputation, `_squareRoots[1]` - square root of user tokens (deposited in TokenLocking), `_squareRoots[2]` - square root of total reputation, `_squareRoots[3]` - square root of total tokens, `_squareRoots[4]` - square root of numerator (user reputation * user tokens), `_squareRoots[5]` - square root of denominator (total reputation * total tokens), `_squareRoots[6]` - square root of payout amount.
   * @param branchMask The branchmask of the proof
   * @param key Some Reputation hash tree key
   * @param siblings The siblings of the proof
   * @param value Reputation value
   */
  claimRewardPayout(
    _payoutId: BigNumberish,
    _squareRoots: BigNumberish[],
    key: Arrayish,
    value: Arrayish,
    branchMask: BigNumberish,
    siblings: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Claim the reward payout at `_payoutId`. User needs to provide their reputation and colony-wide reputation which will be proven via Merkle proof inside this function. Can only be called if payout is active, i.e if 60 days have not passed from its creation. Can only be called if next in queue.
   * @param _payoutId Id of the reward payout
   * @param _squareRoots Square roots of values used in equation: `_squareRoots[0]` - square root of user reputation, `_squareRoots[1]` - square root of user tokens (deposited in TokenLocking), `_squareRoots[2]` - square root of total reputation, `_squareRoots[3]` - square root of total tokens, `_squareRoots[4]` - square root of numerator (user reputation * user tokens), `_squareRoots[5]` - square root of denominator (total reputation * total tokens), `_squareRoots[6]` - square root of payout amount.
   * @param branchMask The branchmask of the proof
   * @param key Some Reputation hash tree key
   * @param siblings The siblings of the proof
   * @param value Reputation value
   */
  "claimRewardPayout(uint256,uint256[7],bytes,bytes,uint256,bytes32[])"(
    _payoutId: BigNumberish,
    _squareRoots: BigNumberish[],
    key: Arrayish,
    value: Arrayish,
    branchMask: BigNumberish,
    siblings: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Get useful information about specific reward payout.
   * @param _payoutId Id of the reward payout
   */
  getRewardPayoutInfo(
    _payoutId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      reputationState: string;
      colonyWideReputation: BigNumber;
      totalTokens: BigNumber;
      amount: BigNumber;
      tokenAddress: string;
      blockTimestamp: BigNumber;
      amountRemaining: BigNumber;
      finalized: boolean;
    }
  >;

  /**
   * Get useful information about specific reward payout.
   * @param _payoutId Id of the reward payout
   */
  "getRewardPayoutInfo(uint256)"(
    _payoutId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      reputationState: string;
      colonyWideReputation: BigNumber;
      totalTokens: BigNumber;
      amount: BigNumber;
      tokenAddress: string;
      blockTimestamp: BigNumber;
      amountRemaining: BigNumber;
      finalized: boolean;
    }
  >;

  /**
   * Finalises the reward payout. Allows creation of next reward payouts for token that has been used in `_payoutId`. Can only be called when reward payout cycle is finished i.e when 60 days have passed from its creation.
   * @param _payoutId Id of the reward payout
   */
  finalizeRewardPayout(
    _payoutId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Finalises the reward payout. Allows creation of next reward payouts for token that has been used in `_payoutId`. Can only be called when reward payout cycle is finished i.e when 60 days have passed from its creation.
   * @param _payoutId Id of the reward payout
   */
  "finalizeRewardPayout(uint256)"(
    _payoutId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * For the reward funding pot (e.g. id: 0) this returns (0, 0, 0).
   * Get the non-mapping properties of a pot by id.
   * @param _id Id of the pot which details to get
   */
  getFundingPot(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [number, BigNumber, BigNumber] & {
      associatedType: number;
      associatedTypeId: BigNumber;
      payoutsWeCannotMake: BigNumber;
    }
  >;

  /**
   * For the reward funding pot (e.g. id: 0) this returns (0, 0, 0).
   * Get the non-mapping properties of a pot by id.
   * @param _id Id of the pot which details to get
   */
  "getFundingPot(uint256)"(
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [number, BigNumber, BigNumber] & {
      associatedType: number;
      associatedTypeId: BigNumber;
      payoutsWeCannotMake: BigNumber;
    }
  >;

  /**
   * Get the number of funding pots in the colony.
   */
  getFundingPotCount(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Get the number of funding pots in the colony.
   */
  "getFundingPotCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Get the `_token` balance of pot with id `_potId`.
   * @param _potId Id of the funding pot
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  getFundingPotBalance(
    _potId: BigNumberish,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Get the `_token` balance of pot with id `_potId`.
   * @param _potId Id of the funding pot
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  "getFundingPotBalance(uint256,address)"(
    _potId: BigNumberish,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Get the assigned `_token` payouts of pot with id `_potId`.
   * @param _potId Id of the funding pot
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  getFundingPotPayout(
    _potId: BigNumberish,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Get the assigned `_token` payouts of pot with id `_potId`.
   * @param _potId Id of the funding pot
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  "getFundingPotPayout(uint256,address)"(
    _potId: BigNumberish,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Move a given amount: `_amount` of `_token` funds from funding pot with id `_fromPot` to one with id `_toPot`.
   * @param _amount Amount of funds
   * @param _childSkillIndex The child index in _permissionDomainId where I will be taking this action
   * @param _domainId The domain where I am taking this action, pointed to by _permissionDomainId and _childSkillIndex
   * @param _fromChildSkillIndex In the array of child skills for the skill associated with the domain pointed to by _permissionDomainId + _childSkillIndex,         the index of the skill associated with the domain that contains _fromPot
   * @param _fromPot Funding pot id providing the funds
   * @param _permissionDomainId The domainId in which I have the permission to take this action
   * @param _toChildSkillIndex The same, but for the _toPot which the funds are being moved to
   * @param _toPot Funding pot id receiving the funds
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  moveFundsBetweenPots(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _domainId: BigNumberish,
    _fromChildSkillIndex: BigNumberish,
    _toChildSkillIndex: BigNumberish,
    _fromPot: BigNumberish,
    _toPot: BigNumberish,
    _amount: BigNumberish,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Move a given amount: `_amount` of `_token` funds from funding pot with id `_fromPot` to one with id `_toPot`.
   * @param _amount Amount of funds
   * @param _childSkillIndex The child index in _permissionDomainId where I will be taking this action
   * @param _domainId The domain where I am taking this action, pointed to by _permissionDomainId and _childSkillIndex
   * @param _fromChildSkillIndex In the array of child skills for the skill associated with the domain pointed to by _permissionDomainId + _childSkillIndex,         the index of the skill associated with the domain that contains _fromPot
   * @param _fromPot Funding pot id providing the funds
   * @param _permissionDomainId The domainId in which I have the permission to take this action
   * @param _toChildSkillIndex The same, but for the _toPot which the funds are being moved to
   * @param _toPot Funding pot id receiving the funds
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _domainId: BigNumberish,
    _fromChildSkillIndex: BigNumberish,
    _toChildSkillIndex: BigNumberish,
    _fromPot: BigNumberish,
    _toPot: BigNumberish,
    _amount: BigNumberish,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * DEPRECATEDMove a given amount: `_amount` of `_token` funds from funding pot with id `_fromPot` to one with id `_toPot`.
   * @param _amount Amount of funds
   * @param _fromChildSkillIndex The child index in `_permissionDomainId` where we can find the domain for `_fromPotId`
   * @param _fromPot Funding pot id providing the funds
   * @param _permissionDomainId The domainId in which I have the permission to take this action
   * @param _toChildSkillIndex The child index in `_permissionDomainId` where we can find the domain for `_toPotId`
   * @param _toPot Funding pot id receiving the funds
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,address)"(
    _permissionDomainId: BigNumberish,
    _fromChildSkillIndex: BigNumberish,
    _toChildSkillIndex: BigNumberish,
    _fromPot: BigNumberish,
    _toPot: BigNumberish,
    _amount: BigNumberish,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Move any funds received by the colony in `_token` denomination to the top-level domain pot, siphoning off a small amount to the reward pot. If called against a colony's own token, no fee is taken.
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  claimColonyFunds(
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Move any funds received by the colony in `_token` denomination to the top-level domain pot, siphoning off a small amount to the reward pot. If called against a colony's own token, no fee is taken.
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  "claimColonyFunds(address)"(
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Get the total amount of tokens `_token` minus amount reserved to be paid to the reputation and token holders as rewards.
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  getNonRewardPotsTotal(
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Get the total amount of tokens `_token` minus amount reserved to be paid to the reputation and token holders as rewards.
   * @param _token Address of the token, `0x0` value indicates Ether
   */
  "getNonRewardPotsTotal(address)"(
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Allow the _approvee to obligate some amount of tokens as a stake.
   * @param _amount Amount of internal token up to which we are willing to be obligated.
   * @param _approvee Address of the account we are willing to let obligate us.
   * @param _domainId Domain in which we are willing to be obligated.
   */
  approveStake(
    _approvee: string,
    _domainId: BigNumberish,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Allow the _approvee to obligate some amount of tokens as a stake.
   * @param _amount Amount of internal token up to which we are willing to be obligated.
   * @param _approvee Address of the account we are willing to let obligate us.
   * @param _domainId Domain in which we are willing to be obligated.
   */
  "approveStake(address,uint256,uint256)"(
    _approvee: string,
    _domainId: BigNumberish,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Obligate the user some amount of tokens as a stake.
   * @param _amount Amount of internal token we are obligating.
   * @param _domainId Domain in which we are obligating the user.
   * @param _user Address of the account we are obligating.
   */
  obligateStake(
    _user: string,
    _domainId: BigNumberish,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Obligate the user some amount of tokens as a stake.
   * @param _amount Amount of internal token we are obligating.
   * @param _domainId Domain in which we are obligating the user.
   * @param _user Address of the account we are obligating.
   */
  "obligateStake(address,uint256,uint256)"(
    _user: string,
    _domainId: BigNumberish,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Deobligate the user some amount of tokens, releasing the stake.
   * @param _amount Amount of internal token we are deobligating.
   * @param _domainId Domain in which we are deobligating the user.
   * @param _user Address of the account we are deobligating.
   */
  deobligateStake(
    _user: string,
    _domainId: BigNumberish,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Deobligate the user some amount of tokens, releasing the stake.
   * @param _amount Amount of internal token we are deobligating.
   * @param _domainId Domain in which we are deobligating the user.
   * @param _user Address of the account we are deobligating.
   */
  "deobligateStake(address,uint256,uint256)"(
    _user: string,
    _domainId: BigNumberish,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Transfer some amount of obligated tokens. Can be called by the arbitration role.
   * @param _amount Amount of internal token we are transferring.
   * @param _childSkillIndex The child index in `_permissionDomainId` where we can find `_domainId`.
   * @param _domainId Domain in which we are transferring the tokens.
   * @param _obligator Address of the account who set the obligation.
   * @param _permissionDomainId The domainId in which I have the permission to take this action.
   * @param _recipient Recipient of the transferred tokens.
   * @param _user Address of the account we are transferring.
   */
  transferStake(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _obligator: string,
    _user: string,
    _domainId: BigNumberish,
    _amount: BigNumberish,
    _recipient: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Transfer some amount of obligated tokens. Can be called by the arbitration role.
   * @param _amount Amount of internal token we are transferring.
   * @param _childSkillIndex The child index in `_permissionDomainId` where we can find `_domainId`.
   * @param _domainId Domain in which we are transferring the tokens.
   * @param _obligator Address of the account who set the obligation.
   * @param _permissionDomainId The domainId in which I have the permission to take this action.
   * @param _recipient Recipient of the transferred tokens.
   * @param _user Address of the account we are transferring.
   */
  "transferStake(uint256,uint256,address,address,uint256,uint256,address)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _obligator: string,
    _user: string,
    _domainId: BigNumberish,
    _amount: BigNumberish,
    _recipient: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * View an approval to obligate tokens.
   * @param _domainId Domain in which we are willing to be obligated.
   * @param _obligator Address of the account we are willing to let obligate us.
   * @param _user User allowing their tokens to be obligated.
   */
  getApproval(
    _user: string,
    _obligator: string,
    _domainId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * View an approval to obligate tokens.
   * @param _domainId Domain in which we are willing to be obligated.
   * @param _obligator Address of the account we are willing to let obligate us.
   * @param _user User allowing their tokens to be obligated.
   */
  "getApproval(address,address,uint256)"(
    _user: string,
    _obligator: string,
    _domainId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * View an obligation of tokens.
   * @param _domainId Domain in which we are obligated.
   * @param _obligator Address of the account who obligated us.
   * @param _user User whose tokens are obligated.
   */
  getObligation(
    _user: string,
    _obligator: string,
    _domainId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * View an obligation of tokens.
   * @param _domainId Domain in which we are obligated.
   * @param _obligator Address of the account who obligated us.
   * @param _user User whose tokens are obligated.
   */
  "getObligation(address,address,uint256)"(
    _user: string,
    _obligator: string,
    _domainId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Get the domain corresponding to a funding pot
   * @param _fundingPotId Id of the funding pot
   */
  getDomainFromFundingPot(
    _fundingPotId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Get the domain corresponding to a funding pot
   * @param _fundingPotId Id of the funding pot
   */
  "getDomainFromFundingPot(uint256)"(
    _fundingPotId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Burn tokens held by the colony. Can only burn tokens held in the root funding pot.
   * @param amount The amount of tokens to burn
   * @param token The address of the token to burn
   */
  burnTokens(
    token: string,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Burn tokens held by the colony. Can only burn tokens held in the root funding pot.
   * @param amount The amount of tokens to burn
   * @param token The address of the token to burn
   */
  "burnTokens(address,uint256)"(
    token: string,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * unlock the native colony token, if possible
   */
  unlockToken(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  /**
   * unlock the native colony token, if possible
   */
  "unlockToken()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Update the internal bookkeeping around external ERC20 approvals
   * @param spender The account we have approved
   * @param token The address of the token which was approved
   */
  updateApprovalAmount(
    token: string,
    spender: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Update the internal bookkeeping around external ERC20 approvals
   * @param spender The account we have approved
   * @param token The address of the token which was approved
   */
  "updateApprovalAmount(address,address)"(
    token: string,
    spender: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Get the current approval amount
   * @param spender The account we have approved
   * @param token The address of the token which was approved
   */
  getTokenApproval(
    token: string,
    spender: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Get the current approval amount
   * @param spender The account we have approved
   * @param token The address of the token which was approved
   */
  "getTokenApproval(address,address)"(
    token: string,
    spender: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Get the current total approval amount across all spenders
   * @param token The address of the token which was approved
   */
  getTotalTokenApproval(
    token: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Get the current total approval amount across all spenders
   * @param token The address of the token which was approved
   */
  "getTotalTokenApproval(address)"(
    token: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  filters: {
    Annotation(
      agent: string | null,
      txHash: Arrayish | null,
      metadata: null
    ): EventFilter;

    ArbitraryReputationUpdate(
      agent: null,
      user: null,
      skillId: null,
      amount: null
    ): EventFilter;

    ColonyBootstrapped(agent: null, users: null, amounts: null): EventFilter;

    ColonyFundsClaimed(
      agent: null,
      token: null,
      fee: null,
      payoutRemainder: null
    ): EventFilter;

    ColonyFundsMovedBetweenFundingPots(
      agent: null,
      fromPot: BigNumberish | null,
      toPot: BigNumberish | null,
      amount: null,
      token: null
    ): EventFilter;

    ColonyInitialised(
      agent: null,
      colonyNetwork: null,
      token: null
    ): EventFilter;

    ColonyMetadata(agent: null, metadata: null): EventFilter;

    ColonyMetadataDelta(agent: null, metadata: null): EventFilter;

    ColonyRewardInverseSet(agent: null, rewardInverse: null): EventFilter;

    ColonyRoleSet(
      agent: null,
      user: string | null,
      domainId: BigNumberish | null,
      role: BigNumberish | null,
      setTo: null
    ): EventFilter;

    ColonyUpgraded(
      agent: null,
      oldVersion: null,
      newVersion: null
    ): EventFilter;

    DomainAdded(agent: null, domainId: null): EventFilter;

    DomainMetadata(
      agent: null,
      domainId: BigNumberish | null,
      metadata: null
    ): EventFilter;

    ExpenditureAdded(agent: null, expenditureId: null): EventFilter;

    ExpenditureCancelled(
      agent: null,
      expenditureId: BigNumberish | null
    ): EventFilter;

    ExpenditureClaimDelaySet(
      agent: null,
      expenditureId: BigNumberish | null,
      slot: BigNumberish | null,
      claimDelay: null
    ): EventFilter;

    ExpenditureFinalized(
      agent: null,
      expenditureId: BigNumberish | null
    ): EventFilter;

    ExpenditureGlobalClaimDelaySet(
      agent: null,
      globalClaimDelay: null
    ): EventFilter;

    ExpenditureLocked(
      agent: null,
      expenditureId: BigNumberish | null
    ): EventFilter;

    ExpenditureMetadataSet(
      agent: null,
      expenditureId: BigNumberish | null,
      metadata: null
    ): EventFilter;

    ExpenditurePayoutModifierSet(
      agent: null,
      expenditureId: BigNumberish | null,
      slot: BigNumberish | null,
      payoutModifier: null
    ): EventFilter;

    ExpenditurePayoutSet(
      agent: null,
      expenditureId: BigNumberish | null,
      slot: BigNumberish | null,
      token: string | null,
      amount: null
    ): EventFilter;

    ExpenditureRecipientSet(
      agent: null,
      expenditureId: BigNumberish | null,
      slot: BigNumberish | null,
      recipient: string | null
    ): EventFilter;

    ExpenditureSkillSet(
      agent: null,
      expenditureId: BigNumberish | null,
      slot: BigNumberish | null,
      skillId: BigNumberish | null
    ): EventFilter;

    ExpenditureTransferred(
      agent: null,
      expenditureId: BigNumberish | null,
      owner: string | null
    ): EventFilter;

    FundingPotAdded(fundingPotId: null): EventFilter;

    LocalSkillAdded(agent: null, localSkillId: null): EventFilter;

    LocalSkillDeprecated(
      agent: null,
      localSkillId: null,
      deprecated: null
    ): EventFilter;

    MetaTransactionExecuted(
      userAddress: null,
      relayerAddress: null,
      payload: null
    ): EventFilter;

    PaymentAdded(agent: null, paymentId: null): EventFilter;

    PaymentFinalized(agent: null, paymentId: BigNumberish | null): EventFilter;

    PaymentPayoutSet(
      agent: null,
      paymentId: BigNumberish | null,
      token: null,
      amount: null
    ): EventFilter;

    PaymentRecipientSet(
      agent: null,
      paymentId: BigNumberish | null,
      recipient: null
    ): EventFilter;

    PaymentSkillSet(
      agent: null,
      paymentId: BigNumberish | null,
      skillId: null
    ): EventFilter;

    PayoutClaimed(
      agent: null,
      fundingPotId: BigNumberish | null,
      token: null,
      amount: null
    ): EventFilter;

    RecoveryModeEntered(user: null): EventFilter;

    RecoveryModeExitApproved(user: null): EventFilter;

    RecoveryModeExited(user: null): EventFilter;

    RecoveryRoleSet(user: string | null, setTo: null): EventFilter;

    RecoveryStorageSlotSet(
      user: null,
      slot: null,
      fromValue: null,
      toValue: null
    ): EventFilter;

    RewardPayoutClaimed(
      rewardPayoutId: null,
      user: null,
      fee: null,
      rewardRemainder: null
    ): EventFilter;

    RewardPayoutCycleEnded(agent: null, rewardPayoutId: null): EventFilter;

    RewardPayoutCycleStarted(agent: null, rewardPayoutId: null): EventFilter;

    TaskAdded(agent: null, taskId: null): EventFilter;

    TaskBriefSet(
      taskId: BigNumberish | null,
      specificationHash: null
    ): EventFilter;

    TaskCanceled(taskId: BigNumberish | null): EventFilter;

    TaskChangedViaSignatures(reviewerAddresses: null): EventFilter;

    TaskCompleted(agent: null, taskId: BigNumberish | null): EventFilter;

    TaskDeliverableSubmitted(
      agent: null,
      taskId: BigNumberish | null,
      deliverableHash: null
    ): EventFilter;

    TaskDueDateSet(taskId: BigNumberish | null, dueDate: null): EventFilter;

    TaskFinalized(agent: null, taskId: BigNumberish | null): EventFilter;

    TaskPayoutSet(
      taskId: BigNumberish | null,
      role: null,
      token: null,
      amount: null
    ): EventFilter;

    TaskRoleUserSet(
      taskId: BigNumberish | null,
      role: null,
      user: string | null
    ): EventFilter;

    TaskSkillSet(
      taskId: BigNumberish | null,
      skillId: BigNumberish | null
    ): EventFilter;

    TaskWorkRatingRevealed(
      agent: null,
      taskId: BigNumberish | null,
      role: null,
      rating: null
    ): EventFilter;

    TokenUnlocked(agent: null): EventFilter;

    TokensBurned(agent: null, token: null, amount: null): EventFilter;

    TokensMinted(agent: null, who: null, amount: null): EventFilter;
  };

  estimate: {
    /**
     * Indicate approval to exit recovery mode. Can only be called by user with recovery role.
     */
    approveExitRecovery(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Indicate approval to exit recovery mode. Can only be called by user with recovery role.
     */
    "approveExitRecovery()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * No return value, but should throw if protected.This is external, but is only expected to be called from ContractRecovery; no need toexpose this to any users.
     * Check whether the supplied slot is a protected variable specific to this contract
     * @param _slot The storage slot number to check.
     */
    checkNotAdditionalProtectedVariable(
      _slot: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * No return value, but should throw if protected.This is external, but is only expected to be called from ContractRecovery; no need toexpose this to any users.
     * Check whether the supplied slot is a protected variable specific to this contract
     * @param _slot The storage slot number to check.
     */
    "checkNotAdditionalProtectedVariable(uint256)"(
      _slot: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Put colony network mining into recovery mode. Can only be called by user with recovery role.
     */
    enterRecoveryMode(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Put colony network mining into recovery mode. Can only be called by user with recovery role.
     */
    "enterRecoveryMode()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Executes a metatransaction targeting this contract
     * @param payload The transaction data that will be executed if signature valid
     * @param sigR The 'r' part of the signature
     * @param sigS The 's' part of the signature
     * @param sigV The 'v' part of the signature
     * @param userAddress The address of the user that signed the metatransaction
     */
    executeMetaTransaction(
      userAddress: string,
      payload: Arrayish,
      sigR: Arrayish,
      sigS: Arrayish,
      sigV: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Executes a metatransaction targeting this contract
     * @param payload The transaction data that will be executed if signature valid
     * @param sigR The 'r' part of the signature
     * @param sigS The 's' part of the signature
     * @param sigV The 'v' part of the signature
     * @param userAddress The address of the user that signed the metatransaction
     */
    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(
      userAddress: string,
      payload: Arrayish,
      sigR: Arrayish,
      sigS: Arrayish,
      sigV: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Exit recovery mode, can be called by anyone if enough whitelist approvals are given.
     */
    exitRecoveryMode(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Exit recovery mode, can be called by anyone if enough whitelist approvals are given.
     */
    "exitRecoveryMode()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Gets the next metatransaction nonce for user that should be used targeting this contract
     * @param userAddress The address of the user that will sign the metatransaction
     */
    getMetatransactionNonce(
      userAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Gets the next metatransaction nonce for user that should be used targeting this contract
     * @param userAddress The address of the user that will sign the metatransaction
     */
    "getMetatransactionNonce(address)"(
      userAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Is colony network in recovery mode.
     */
    isInRecoveryMode(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Is colony network in recovery mode.
     */
    "isInRecoveryMode()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Return number of recovery roles.
     */
    numRecoveryRoles(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Return number of recovery roles.
     */
    "numRecoveryRoles()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Remove colony recovery role. Can only be called by root role.
     * @param _user User we want to remove recovery role from
     */
    removeRecoveryRole(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Remove colony recovery role. Can only be called by root role.
     * @param _user User we want to remove recovery role from
     */
    "removeRecoveryRole(address)"(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set new colony recovery role. Can be called by root.
     * @param _user User we want to give a recovery role to
     */
    setRecoveryRole(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set new colony recovery role. Can be called by root.
     * @param _user User we want to give a recovery role to
     */
    "setRecoveryRole(address)"(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * certain critical variables are protected from editing in this function
     * Update value of arbitrary storage variable. Can only be called by user with recovery role.
     * @param _slot Uint address of storage slot to be updated
     * @param _value word of data to be set
     */
    setStorageSlotRecovery(
      _slot: BigNumberish,
      _value: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * certain critical variables are protected from editing in this function
     * Update value of arbitrary storage variable. Can only be called by user with recovery role.
     * @param _slot Uint address of storage slot to be updated
     * @param _value word of data to be set
     */
    "setStorageSlotRecovery(uint256,bytes32)"(
      _slot: BigNumberish,
      _value: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the `ColonyAuthority` for the colony.
     */
    authority(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the `ColonyAuthority` for the colony.
     */
    "authority()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Used for testing.
     * Get the colony `owner` address. This should be address(0x0) at all times.
     */
    owner(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Used for testing.
     * Get the colony `owner` address. This should be address(0x0) at all times.
     */
    "owner()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the Colony contract version. Starts from 1 and is incremented with every deployed contract change.
     */
    version(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the Colony contract version. Starts from 1 and is incremented with every deployed contract change.
     */
    "version()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Downgrades are not allowed, i.e. `_newVersion` should be higher than the currect colony version.
     * Upgrades a colony to a new Colony contract version `_newVersion`.
     * @param _newVersion The target version for the upgrade
     */
    upgrade(
      _newVersion: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Downgrades are not allowed, i.e. `_newVersion` should be higher than the currect colony version.
     * Upgrades a colony to a new Colony contract version `_newVersion`.
     * @param _newVersion The target version for the upgrade
     */
    "upgrade(uint256)"(
      _newVersion: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Can only be called by the colony itself, and only expected to be called as part of the `upgrade()` call. Required to be external so it can be an external call.
     * A function to be called after an upgrade has been done from v2 to v3.
     */
    finishUpgrade(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Can only be called by the colony itself, and only expected to be called as part of the `upgrade()` call. Required to be external so it can be an external call.
     * A function to be called after an upgrade has been done from v2 to v3.
     */
    "finishUpgrade()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * The colonyNetworkAddress we read here is set once, during `initialiseColony`.
     * Returns the colony network address set on the Colony.
     */
    getColonyNetwork(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * The colonyNetworkAddress we read here is set once, during `initialiseColony`.
     * Returns the colony network address set on the Colony.
     */
    "getColonyNetwork()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the colony token.
     */
    getToken(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the colony token.
     */
    "getToken()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Execute arbitrary transaction on behalf of the Colony DEPRECATED
     * @param _action Bytes array encoding the function call and arguments
     * @param _to Contract to receive the function call (cannot be this contract, network or token locking)
     */
    makeArbitraryTransaction(
      _to: string,
      _action: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Execute arbitrary transaction on behalf of the Colony DEPRECATED
     * @param _action Bytes array encoding the function call and arguments
     * @param _to Contract to receive the function call (cannot be this contract, network or token locking)
     */
    "makeArbitraryTransaction(address,bytes)"(
      _to: string,
      _action: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Execute arbitrary transactions on behalf of the Colony in series
     * @param _actions Array of Bytes arrays encoding the function calls and arguments
     * @param _strict Boolean indicating whether if one transaction fails, the whole call to this function should fail.
     * @param _targets Array of addressed to be targeted
     */
    makeArbitraryTransactions(
      _targets: string[],
      _actions: Arrayish[],
      _strict: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Execute arbitrary transactions on behalf of the Colony in series
     * @param _actions Array of Bytes arrays encoding the function calls and arguments
     * @param _strict Boolean indicating whether if one transaction fails, the whole call to this function should fail.
     * @param _targets Array of addressed to be targeted
     */
    "makeArbitraryTransactions(address[],bytes[],bool)"(
      _targets: string[],
      _actions: Arrayish[],
      _strict: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Only callable by the colony itself. If you wish to use this functionality, you should use the makeAbitraryTransactions function
     * Executes a single arbitrary transaction
     * @param _action Bytes array encoding the function call and arguments
     * @param _target Contract to receive the function call
     */
    makeSingleArbitraryTransaction(
      _target: string,
      _action: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Only callable by the colony itself. If you wish to use this functionality, you should use the makeAbitraryTransactions function
     * Executes a single arbitrary transaction
     * @param _action Bytes array encoding the function call and arguments
     * @param _target Contract to receive the function call
     */
    "makeSingleArbitraryTransaction(address,bytes)"(
      _target: string,
      _action: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Emit a metadata string for a transaction
     * @param _metadata String of metadata for tx
     * @param _txHash Hash of transaction being annotated (0x0 for current tx)
     */
    annotateTransaction(
      _txHash: Arrayish,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Emit a metadata string for a transaction
     * @param _metadata String of metadata for tx
     * @param _txHash Hash of transaction being annotated (0x0 for current tx)
     */
    "annotateTransaction(bytes32,string)"(
      _txHash: Arrayish,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set new colony root role. Can be called by root role only.
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an root role to
     */
    setRootRole(
      _user: string,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set new colony root role. Can be called by root role only.
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an root role to
     */
    "setRootRole(address,bool)"(
      _user: string,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set new colony arbitration role. Can be called by root role or architecture role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Domain in which we are giving user the role
     * @param _permissionDomainId Domain in which the caller has root role
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an arbitration role to
     */
    setArbitrationRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set new colony arbitration role. Can be called by root role or architecture role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Domain in which we are giving user the role
     * @param _permissionDomainId Domain in which the caller has root role
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an arbitration role to
     */
    "setArbitrationRole(uint256,uint256,address,uint256,bool)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set new colony architecture role. Can be called by root role or architecture role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Domain in which we are giving user the role
     * @param _permissionDomainId Domain in which the caller has root/architecture role
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an architecture role to
     */
    setArchitectureRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set new colony architecture role. Can be called by root role or architecture role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Domain in which we are giving user the role
     * @param _permissionDomainId Domain in which the caller has root/architecture role
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an architecture role to
     */
    "setArchitectureRole(uint256,uint256,address,uint256,bool)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set new colony funding role. Can be called by root role or architecture role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Domain in which we are giving user the role
     * @param _permissionDomainId Domain in which the caller has root/architecture role
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an funding role to
     */
    setFundingRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set new colony funding role. Can be called by root role or architecture role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Domain in which we are giving user the role
     * @param _permissionDomainId Domain in which the caller has root/architecture role
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an funding role to
     */
    "setFundingRole(uint256,uint256,address,uint256,bool)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set new colony admin role. Can be called by root role or architecture role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Domain in which we are giving user the role
     * @param _permissionDomainId Domain in which the caller has root/architecture role
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an admin role to
     */
    setAdministrationRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set new colony admin role. Can be called by root role or architecture role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Domain in which we are giving user the role
     * @param _permissionDomainId Domain in which the caller has root/architecture role
     * @param _setTo The state of the role permission (true assign the permission, false revokes it)
     * @param _user User we want to give an admin role to
     */
    "setAdministrationRole(uint256,uint256,address,uint256,bool)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set several roles in one transaction. Can be called by root role or architecture role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Domain in which we are giving user the role
     * @param _permissionDomainId Domain in which the caller has root/architecture role
     * @param _roles Byte array representing the desired role setting (1 for on, 0 for off)
     * @param _user User we want to give a role to
     */
    setUserRoles(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _roles: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set several roles in one transaction. Can be called by root role or architecture role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Domain in which we are giving user the role
     * @param _permissionDomainId Domain in which the caller has root/architecture role
     * @param _roles Byte array representing the desired role setting (1 for on, 0 for off)
     * @param _user User we want to give a role to
     */
    "setUserRoles(uint256,uint256,address,uint256,bytes32)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _roles: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Check whether a given user has a given role for the colony. Calls the function of the same name on the colony's authority contract.
     * @param _domainId The domain where we want to check for the role
     * @param _role The role we want to check for
     * @param _user The user whose role we want to check
     */
    hasUserRole(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Check whether a given user has a given role for the colony. Calls the function of the same name on the colony's authority contract.
     * @param _domainId The domain where we want to check for the role
     * @param _role The role we want to check for
     * @param _user The user whose role we want to check
     */
    "hasUserRole(address,uint256,uint8)"(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Check whether a given user has a given role for the colony, in a child domain. Calls the function of the same name on the colony's authority contract and an internal inheritence validator function
     * @param _childDomainId The domain where we want to use the role
     * @param _childSkillIndex The index that the `_childDomainId` is relative to `_domainId`
     * @param _domainId Domain in which the caller has the role
     * @param _role The role we want to check for
     * @param _user The user whose role we want to check
     */
    hasInheritedUserRole(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      _childSkillIndex: BigNumberish,
      _childDomainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Check whether a given user has a given role for the colony, in a child domain. Calls the function of the same name on the colony's authority contract and an internal inheritence validator function
     * @param _childDomainId The domain where we want to use the role
     * @param _childSkillIndex The index that the `_childDomainId` is relative to `_domainId`
     * @param _domainId Domain in which the caller has the role
     * @param _role The role we want to check for
     * @param _user The user whose role we want to check
     */
    "hasInheritedUserRole(address,uint256,uint8,uint256,uint256)"(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      _childSkillIndex: BigNumberish,
      _childDomainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Check whether a given user can modify roles in the target domain `_childDomainId`. Mostly a convenience function to provide a uniform interface for extension contracts validating permissions
     * @param _childDomainId The domain where we want to edit roles
     * @param _childSkillIndex The index that the `_childDomainId` is relative to `_domainId`
     * @param _domainId Domain in which the caller has the role (currently Root or Architecture)
     * @param _user The user whose permissions we want to check
     */
    userCanSetRoles(
      _user: string,
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _childDomainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Check whether a given user can modify roles in the target domain `_childDomainId`. Mostly a convenience function to provide a uniform interface for extension contracts validating permissions
     * @param _childDomainId The domain where we want to edit roles
     * @param _childSkillIndex The index that the `_childDomainId` is relative to `_domainId`
     * @param _domainId Domain in which the caller has the role (currently Root or Architecture)
     * @param _user The user whose permissions we want to check
     */
    "userCanSetRoles(address,uint256,uint256,uint256)"(
      _user: string,
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _childDomainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Gets the bytes32 representation of the roles for a user in a given domain
     * @param _domain The domain we want to get roles in
     * @param _user The user whose roles we want to get
     */
    getUserRoles(
      _user: string,
      _domain: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Gets the bytes32 representation of the roles for a user in a given domain
     * @param _domain The domain we want to get roles in
     * @param _user The user whose roles we want to get
     */
    "getUserRoles(address,uint256)"(
      _user: string,
      _domain: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Gets the bytes32 representation of the roles authorized to call a function
     * @param _sig The function signature
     */
    getCapabilityRoles(
      _sig: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Gets the bytes32 representation of the roles authorized to call a function
     * @param _sig The function signature
     */
    "getCapabilityRoles(bytes4)"(
      _sig: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Emit a positive domain reputation update. Available only to Root role holders
     * @param _amount The (positive) amount of reputation to gain
     * @param _domainId The domain where the user will gain reputation
     * @param _user The user who will gain reputation
     */
    emitDomainReputationReward(
      _domainId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Emit a positive domain reputation update. Available only to Root role holders
     * @param _amount The (positive) amount of reputation to gain
     * @param _domainId The domain where the user will gain reputation
     * @param _user The user who will gain reputation
     */
    "emitDomainReputationReward(uint256,address,int256)"(
      _domainId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Emit a positive skill reputation update. Available only to Root role holders
     * @param _amount The (positive) amount of reputation to gain
     * @param _skillId The skill where the user will gain reputation
     * @param _user The user who will gain reputation
     */
    emitSkillReputationReward(
      _skillId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Emit a positive skill reputation update. Available only to Root role holders
     * @param _amount The (positive) amount of reputation to gain
     * @param _skillId The skill where the user will gain reputation
     * @param _user The user who will gain reputation
     */
    "emitSkillReputationReward(uint256,address,int256)"(
      _skillId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Emit a negative domain reputation update. Available only to Arbitration role holders
     * @param _amount The (negative) amount of reputation to lose
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId The domain where the user will lose reputation
     * @param _permissionDomainId The domainId in which I hold the Arbitration role
     * @param _user The user who will lose reputation
     */
    emitDomainReputationPenalty(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Emit a negative domain reputation update. Available only to Arbitration role holders
     * @param _amount The (negative) amount of reputation to lose
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId The domain where the user will lose reputation
     * @param _permissionDomainId The domainId in which I hold the Arbitration role
     * @param _user The user who will lose reputation
     */
    "emitDomainReputationPenalty(uint256,uint256,uint256,address,int256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Emit a negative skill reputation update. Available only to Arbitration role holders in the root domain
     * @param _amount The (negative) amount of reputation to lose
     * @param _skillId The skill where the user will lose reputation
     * @param _user The user who will lose reputation
     */
    emitSkillReputationPenalty(
      _skillId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Emit a negative skill reputation update. Available only to Arbitration role holders in the root domain
     * @param _amount The (negative) amount of reputation to lose
     * @param _skillId The skill where the user will lose reputation
     * @param _user The user who will lose reputation
     */
    "emitSkillReputationPenalty(uint256,address,int256)"(
      _skillId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets the reward inverse to the uint max 2**256 - 1.
     * Called once when the colony is created to initialise certain storage slot values.
     * @param _colonyNetworkAddress Address of the colony network
     * @param _token Address of the colony ERC20 Token
     */
    initialiseColony(
      _colonyNetworkAddress: string,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets the reward inverse to the uint max 2**256 - 1.
     * Called once when the colony is created to initialise certain storage slot values.
     * @param _colonyNetworkAddress Address of the colony network
     * @param _token Address of the colony ERC20 Token
     */
    "initialiseColony(address,address)"(
      _colonyNetworkAddress: string,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Called to change the metadata associated with a colony. Expected to be a IPFS hash of a JSON blob, but not enforced to any degree by the contracts
     * @param _metadata IPFS hash of the metadata
     */
    editColony(
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Called to change the metadata associated with a colony. Expected to be a IPFS hash of a JSON blob, but not enforced to any degree by the contracts
     * @param _metadata IPFS hash of the metadata
     */
    "editColony(string)"(
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Called to change the metadata associated with a colony. Expected to be a IPFS hash of a delta to a JSON blob, but not enforced to any degree by the contracts
     * @param _metadataDelta IPFS hash of the metadata delta
     */
    editColonyByDelta(
      _metadataDelta: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Called to change the metadata associated with a colony. Expected to be a IPFS hash of a delta to a JSON blob, but not enforced to any degree by the contracts
     * @param _metadataDelta IPFS hash of the metadata delta
     */
    "editColonyByDelta(string)"(
      _metadataDelta: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Only allowed to be called when `taskCount` is `0` by authorized addresses.
     * Allows the colony to bootstrap itself by having initial reputation and token `_amount` assigned to `_users`. This reputation is assigned in the colony-wide domain. Secured function to authorised members.
     * @param _amount Amount of reputation/tokens for every address
     * @param _users Array of address to bootstrap with reputation
     */
    bootstrapColony(
      _users: string[],
      _amount: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Only allowed to be called when `taskCount` is `0` by authorized addresses.
     * Allows the colony to bootstrap itself by having initial reputation and token `_amount` assigned to `_users`. This reputation is assigned in the colony-wide domain. Secured function to authorised members.
     * @param _amount Amount of reputation/tokens for every address
     * @param _users Array of address to bootstrap with reputation
     */
    "bootstrapColony(address[],int256[])"(
      _users: string[],
      _amount: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Mint `_wad` amount of colony tokens. Secured function to authorised members.
     * @param _wad Amount to mint
     */
    mintTokens(
      _wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Mint `_wad` amount of colony tokens. Secured function to authorised members.
     * @param _wad Amount to mint
     */
    "mintTokens(uint256)"(
      _wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Mint `_wad` amount of colony tokens and send to `_guy`. Secured function to authorised members.
     * @param _guy Recipient of new tokens
     * @param _wad Amount to mint
     */
    mintTokensFor(
      _guy: string,
      _wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Mint `_wad` amount of colony tokens and send to `_guy`. Secured function to authorised members.
     * @param _guy Recipient of new tokens
     * @param _wad Amount to mint
     */
    "mintTokensFor(address,uint256)"(
      _guy: string,
      _wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Lock the colony's token. Can only be called by a network-managed extension.
     */
    lockToken(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Lock the colony's token. Can only be called by a network-managed extension.
     */
    "lockToken()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Unlock the colony's token for a user. Can only be called by a network-managed extension.
     * @param lockId The specific lock to unlock
     * @param user The user to unlock
     */
    unlockTokenForUser(
      user: string,
      lockId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Unlock the colony's token for a user. Can only be called by a network-managed extension.
     * @param lockId The specific lock to unlock
     * @param user The user to unlock
     */
    "unlockTokenForUser(address,uint256)"(
      user: string,
      lockId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Register colony's ENS label.
     * @param colonyName The label to register.
     * @param orbitdb The path of the orbitDB database associated with the colony name
     */
    registerColonyLabel(
      colonyName: string,
      orbitdb: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Register colony's ENS label.
     * @param colonyName The label to register.
     * @param orbitdb The path of the orbitDB database associated with the colony name
     */
    "registerColonyLabel(string,string)"(
      colonyName: string,
      orbitdb: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Update a colony's orbitdb address. Can only be called by a colony with a registered subdomain
     * @param orbitdb The path of the orbitDB database to be associated with the colony
     */
    updateColonyOrbitDB(
      orbitdb: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Update a colony's orbitdb address. Can only be called by a colony with a registered subdomain
     * @param orbitdb The path of the orbitDB database to be associated with the colony
     */
    "updateColonyOrbitDB(string)"(
      orbitdb: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Install an extension to the colony. Secured function to authorised members.
     * @param extensionId keccak256 hash of the extension name, used as an indentifier
     * @param version The new extension version to install
     */
    installExtension(
      extensionId: Arrayish,
      version: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Install an extension to the colony. Secured function to authorised members.
     * @param extensionId keccak256 hash of the extension name, used as an indentifier
     * @param version The new extension version to install
     */
    "installExtension(bytes32,uint256)"(
      extensionId: Arrayish,
      version: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Upgrade an extension in a colony. Secured function to authorised members.
     * @param extensionId keccak256 hash of the extension name, used as an indentifier
     * @param newVersion The version to upgrade to (must be one larger than the current version)
     */
    upgradeExtension(
      extensionId: Arrayish,
      newVersion: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Upgrade an extension in a colony. Secured function to authorised members.
     * @param extensionId keccak256 hash of the extension name, used as an indentifier
     * @param newVersion The version to upgrade to (must be one larger than the current version)
     */
    "upgradeExtension(bytes32,uint256)"(
      extensionId: Arrayish,
      newVersion: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set the deprecation of an extension in a colony. Secured function to authorised members.
     * @param deprecated Whether to deprecate the extension or not
     * @param extensionId keccak256 hash of the extension name, used as an indentifier
     */
    deprecateExtension(
      extensionId: Arrayish,
      deprecated: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set the deprecation of an extension in a colony. Secured function to authorised members.
     * @param deprecated Whether to deprecate the extension or not
     * @param extensionId keccak256 hash of the extension name, used as an indentifier
     */
    "deprecateExtension(bytes32,bool)"(
      extensionId: Arrayish,
      deprecated: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * This is a permanent action -- re-installing the extension will deploy a new contractIt is recommended to deprecate an extension before uninstalling to allow active objects to be resolved
     * Uninstall an extension from a colony. Secured function to authorised members.
     * @param extensionId keccak256 hash of the extension name, used as an indentifier
     */
    uninstallExtension(
      extensionId: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * This is a permanent action -- re-installing the extension will deploy a new contractIt is recommended to deprecate an extension before uninstalling to allow active objects to be resolved
     * Uninstall an extension from a colony. Secured function to authorised members.
     * @param extensionId keccak256 hash of the extension name, used as an indentifier
     */
    "uninstallExtension(bytes32)"(
      extensionId: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Initialise the local skill tree for the colony.
     */
    initialiseRootLocalSkill(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Initialise the local skill tree for the colony.
     */
    "initialiseRootLocalSkill()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Add a new local skill for the colony. Secured function to authorised members.
     */
    addLocalSkill(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Add a new local skill for the colony. Secured function to authorised members.
     */
    "addLocalSkill()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Deprecate a local skill for the colony. Secured function to authorised members.
     * @param deprecated Deprecation status to set for the skill
     * @param localSkillId Id for the local skill
     */
    deprecateLocalSkill(
      localSkillId: BigNumberish,
      deprecated: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Deprecate a local skill for the colony. Secured function to authorised members.
     * @param deprecated Deprecation status to set for the skill
     * @param localSkillId Id for the local skill
     */
    "deprecateLocalSkill(uint256,bool)"(
      localSkillId: BigNumberish,
      deprecated: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the root local skill id
     */
    getRootLocalSkill(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the root local skill id
     */
    "getRootLocalSkill()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Adding new domains is currently retricted to one level only, i.e. `_parentDomainId` has to be the root domain id: `1`.
     * Add a colony domain, and its respective local skill under skill with id `_parentSkillId`. New funding pot is created and associated with the domain here.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _parentDomainId Id of the domain under which the new one will be added
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     */
    addDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _parentDomainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Adding new domains is currently retricted to one level only, i.e. `_parentDomainId` has to be the root domain id: `1`.
     * Add a colony domain, and its respective local skill under skill with id `_parentSkillId`. New funding pot is created and associated with the domain here.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _parentDomainId Id of the domain under which the new one will be added
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     */
    "addDomain(uint256,uint256,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _parentDomainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Adding new domains is currently retricted to one level only, i.e. `_parentDomainId` has to be the root domain id: `1`.We expect this function to only be used by the dapp
     * Add a colony domain, and its respective local skill under skill with id `_parentSkillId`. New funding pot is created and associated with the domain here.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _metadata Metadata relating to the domain. Expected to be the IPFS hash of a JSON blob, but not enforced by the contracts.
     * @param _parentDomainId Id of the domain under which the new one will be added
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     */
    "addDomain(uint256,uint256,uint256,string)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _parentDomainId: BigNumberish,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Add a colony domain, and its respective local skill under skill with id `_parentSkillId`. New funding pot is created and associated with the domain here.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Id of the domain being edited
     * @param _metadata Metadata relating to the domain. Expected to be the IPFS hash of a JSON blob, but not enforced by the contracts.
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     */
    editDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Add a colony domain, and its respective local skill under skill with id `_parentSkillId`. New funding pot is created and associated with the domain here.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId Id of the domain being edited
     * @param _metadata Metadata relating to the domain. Expected to be the IPFS hash of a JSON blob, but not enforced by the contracts.
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     */
    "editDomain(uint256,uint256,uint256,string)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get a domain by id.
     * @param _id Id of the domain which details to get
     */
    getDomain(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get a domain by id.
     * @param _id Id of the domain which details to get
     */
    "getDomain(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the number of domains in the colony.
     */
    getDomainCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the number of domains in the colony.
     */
    "getDomainCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * For more detail about branchMask and siblings, examine the PatriciaTree implementation. While external, likely only to be used by the Colony contracts, as it checks that the user is proving their own reputation in the current colony. The `verifyProof` function can be used to verify any proof, though this function is not currently exposed on the Colony's EtherRouter.
     * Helper function that can be used by a client to verify the correctness of a patricia proof they have been supplied with.
     * @param branchMask The branchmask of the proof
     * @param key The key of the element the proof is for.
     * @param siblings The siblings of the proof
     * @param value The value of the element that the proof is for.
     */
    verifyReputationProof(
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * For more detail about branchMask and siblings, examine the PatriciaTree implementation. While external, likely only to be used by the Colony contracts, as it checks that the user is proving their own reputation in the current colony. The `verifyProof` function can be used to verify any proof, though this function is not currently exposed on the Colony's EtherRouter.
     * Helper function that can be used by a client to verify the correctness of a patricia proof they have been supplied with.
     * @param branchMask The branchmask of the proof
     * @param key The key of the element the proof is for.
     * @param siblings The siblings of the proof
     * @param value The value of the element that the proof is for.
     */
    "verifyReputationProof(bytes,bytes,uint256,bytes32[])"(
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Update the default global claim delay for expenditures
     * @param _globalClaimDelay The new default global claim delay
     */
    setDefaultGlobalClaimDelay(
      _globalClaimDelay: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Update the default global claim delay for expenditures
     * @param _globalClaimDelay The new default global claim delay
     */
    "setDefaultGlobalClaimDelay(uint256)"(
      _globalClaimDelay: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Add a new expenditure in the colony. Secured function to authorised members.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)
     * @param _domainId The domain where the expenditure belongs
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     */
    makeExpenditure(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Add a new expenditure in the colony. Secured function to authorised members.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)
     * @param _domainId The domain where the expenditure belongs
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     */
    "makeExpenditure(uint256,uint256,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Updates the expenditure owner. Can only be called by expenditure owner.
     * @param _id Expenditure identifier
     * @param _newOwner New owner of expenditure
     */
    transferExpenditure(
      _id: BigNumberish,
      _newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Updates the expenditure owner. Can only be called by expenditure owner.
     * @param _id Expenditure identifier
     * @param _newOwner New owner of expenditure
     */
    "transferExpenditure(uint256,address)"(
      _id: BigNumberish,
      _newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * This is now deprecated and will be removed in a future version
     * DEPRECATED Updates the expenditure owner. Can only be called by Arbitration role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)
     * @param _id Expenditure identifier
     * @param _newOwner New owner of expenditure
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     */
    transferExpenditureViaArbitration(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * This is now deprecated and will be removed in a future version
     * DEPRECATED Updates the expenditure owner. Can only be called by Arbitration role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)
     * @param _id Expenditure identifier
     * @param _newOwner New owner of expenditure
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     */
    "transferExpenditureViaArbitration(uint256,uint256,uint256,address)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Cancels the expenditure and prevents further editing. Can only be called by expenditure owner.
     * @param _id Expenditure identifier
     */
    cancelExpenditure(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Cancels the expenditure and prevents further editing. Can only be called by expenditure owner.
     * @param _id Expenditure identifier
     */
    "cancelExpenditure(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Locks the expenditure and prevents further editing. Can only be called by expenditure owner.
     * @param _id Expenditure identifier
     */
    lockExpenditure(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Locks the expenditure and prevents further editing. Can only be called by expenditure owner.
     * @param _id Expenditure identifier
     */
    "lockExpenditure(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Finalizes the expenditure and allows for funds to be claimed. Can only be called by expenditure owner.
     * @param _id Expenditure identifier
     */
    finalizeExpenditure(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Finalizes the expenditure and allows for funds to be claimed. Can only be called by expenditure owner.
     * @param _id Expenditure identifier
     */
    "finalizeExpenditure(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets the metadata for an expenditure. Can only be called by Arbitration role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`,
     * @param _id Id of the expenditure
     * @param _metadata IPFS hash of the metadata
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     */
    setExpenditureMetadata(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets the metadata for an expenditure. Can only be called by Arbitration role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`,
     * @param _id Id of the expenditure
     * @param _metadata IPFS hash of the metadata
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     */
    "setExpenditureMetadata(uint256,uint256,uint256,string)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets the metadata for an expenditure. Can only be called by expenditure owner.
     * @param _id Id of the expenditure
     * @param _metadata IPFS hash of the metadata
     */
    "setExpenditureMetadata(uint256,string)"(
      _id: BigNumberish,
      _metadata: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * DeprecatedSets the recipient on an expenditure slot. Can only be called by expenditure owner.
     * @param _id Id of the expenditure
     * @param _recipient Address of the recipient
     * @param _slot Slot for the recipient address
     */
    setExpenditureRecipient(
      _id: BigNumberish,
      _slot: BigNumberish,
      _recipient: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * DeprecatedSets the recipient on an expenditure slot. Can only be called by expenditure owner.
     * @param _id Id of the expenditure
     * @param _recipient Address of the recipient
     * @param _slot Slot for the recipient address
     */
    "setExpenditureRecipient(uint256,uint256,address)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      _recipient: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets the recipients in given expenditure slots. Can only be called by expenditure owner.
     * @param _id Id of the expenditure
     * @param _recipients Addresses of the recipients
     * @param _slots Array of slots to set recipients
     */
    setExpenditureRecipients(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _recipients: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets the recipients in given expenditure slots. Can only be called by expenditure owner.
     * @param _id Id of the expenditure
     * @param _recipients Addresses of the recipients
     * @param _slots Array of slots to set recipients
     */
    "setExpenditureRecipients(uint256,uint256[],address[])"(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _recipients: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * DeprecatedSet the token payout on an expenditure slot. Can only be called by expenditure owner.
     * @param _amount Payout amount
     * @param _id Id of the expenditure
     * @param _slot Number of the slot
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    setExpenditurePayout(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * DeprecatedSet the token payout on an expenditure slot. Can only be called by expenditure owner.
     * @param _amount Payout amount
     * @param _id Id of the expenditure
     * @param _slot Number of the slot
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    "setExpenditurePayout(uint256,uint256,address,uint256)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set the token payouts in given expenditure slots. Can only be called by expenditure owner.
     * @param _amounts Payout amounts
     * @param _id Id of the expenditure
     * @param _slots Array of slots to set payouts
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    setExpenditurePayouts(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _token: string,
      _amounts: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set the token payouts in given expenditure slots. Can only be called by expenditure owner.
     * @param _amounts Payout amounts
     * @param _id Id of the expenditure
     * @param _slots Array of slots to set payouts
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    "setExpenditurePayouts(uint256,uint256[],address,uint256[])"(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _token: string,
      _amounts: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * DeprecatedSets the skill on an expenditure slot. Can only be called by expenditure owner.
     * @param _id Expenditure identifier
     * @param _skillId Id of the new skill to set
     * @param _slot Number of the slot
     */
    setExpenditureSkill(
      _id: BigNumberish,
      _slot: BigNumberish,
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * DeprecatedSets the skill on an expenditure slot. Can only be called by expenditure owner.
     * @param _id Expenditure identifier
     * @param _skillId Id of the new skill to set
     * @param _slot Number of the slot
     */
    "setExpenditureSkill(uint256,uint256,uint256)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets the skill on an expenditure slot. Can only be called by expenditure owner.
     * @param _id Expenditure identifier
     * @param _skillIds Ids of the new skills to set
     * @param _slots Array of slots to set skills
     */
    setExpenditureSkills(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _skillIds: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets the skill on an expenditure slot. Can only be called by expenditure owner.
     * @param _id Expenditure identifier
     * @param _skillIds Ids of the new skills to set
     * @param _slots Array of slots to set skills
     */
    "setExpenditureSkills(uint256,uint256[],uint256[])"(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _skillIds: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * DeprecatedSets the claim delay on an expenditure slot. Can only be called by expenditure owner.
     * @param _claimDelay Duration of time (in seconds) to delay
     * @param _id Expenditure identifier
     * @param _slot Number of the slot
     */
    setExpenditureClaimDelay(
      _id: BigNumberish,
      _slot: BigNumberish,
      _claimDelay: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * DeprecatedSets the claim delay on an expenditure slot. Can only be called by expenditure owner.
     * @param _claimDelay Duration of time (in seconds) to delay
     * @param _id Expenditure identifier
     * @param _slot Number of the slot
     */
    "setExpenditureClaimDelay(uint256,uint256,uint256)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      _claimDelay: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets the claim delays in given expenditure slots. Can only be called by expenditure owner.
     * @param _claimDelays Durations of time (in seconds) to delay
     * @param _id Expenditure identifier
     * @param _slots Array of slots to set claim delays
     */
    setExpenditureClaimDelays(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _claimDelays: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets the claim delays in given expenditure slots. Can only be called by expenditure owner.
     * @param _claimDelays Durations of time (in seconds) to delay
     * @param _id Expenditure identifier
     * @param _slots Array of slots to set claim delays
     */
    "setExpenditureClaimDelays(uint256,uint256[],uint256[])"(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _claimDelays: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets the payout modifiers in given expenditure slots. Can only be called by expenditure owner.
     * @param _id Expenditure identifier
     * @param _payoutModifiers Values (between +/- WAD) to modify the payout & reputation bonus
     * @param _slots Array of slots to set payout modifiers
     */
    setExpenditurePayoutModifiers(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _payoutModifiers: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets the payout modifiers in given expenditure slots. Can only be called by expenditure owner.
     * @param _id Expenditure identifier
     * @param _payoutModifiers Values (between +/- WAD) to modify the payout & reputation bonus
     * @param _slots Array of slots to set payout modifiers
     */
    "setExpenditurePayoutModifiers(uint256,uint256[],int256[])"(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _payoutModifiers: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set arbitrary state on an expenditure slot. Can only be called by Arbitration role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)
     * @param _id Expenditure identifier
     * @param _keys Array of additional keys (for mappings & arrays)
     * @param _mask Array of booleans indicated whether a key is a mapping (F) or an array index (T).
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _storageSlot Number of the top-level storage slot (25, 26, or 27)
     * @param _value Value to set at location
     */
    setExpenditureState(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _storageSlot: BigNumberish,
      _mask: boolean[],
      _keys: Arrayish[],
      _value: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set arbitrary state on an expenditure slot. Can only be called by Arbitration role.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)
     * @param _id Expenditure identifier
     * @param _keys Array of additional keys (for mappings & arrays)
     * @param _mask Array of booleans indicated whether a key is a mapping (F) or an array index (T).
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _storageSlot Number of the top-level storage slot (25, 26, or 27)
     * @param _value Value to set at location
     */
    "setExpenditureState(uint256,uint256,uint256,uint256,bool[],bytes32[],bytes32)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _storageSlot: BigNumberish,
      _mask: boolean[],
      _keys: Arrayish[],
      _value: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Claim the payout for an expenditure slot. Here the network receives a fee from each payout.
     * @param _id Expenditure identifier
     * @param _slot Number of the slot
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    claimExpenditurePayout(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Claim the payout for an expenditure slot. Here the network receives a fee from each payout.
     * @param _id Expenditure identifier
     * @param _slot Number of the slot
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    "claimExpenditurePayout(uint256,uint256,address)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the number of expenditures in the colony.
     */
    getExpenditureCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the number of expenditures in the colony.
     */
    "getExpenditureCount()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns an existing expenditure.
     * @param _id Expenditure identifier
     */
    getExpenditure(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns an existing expenditure.
     * @param _id Expenditure identifier
     */
    "getExpenditure(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns an existing expenditure slot.
     * @param _id Expenditure identifier
     * @param _slot Expenditure slot
     */
    getExpenditureSlot(
      _id: BigNumberish,
      _slot: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns an existing expenditure slot.
     * @param _id Expenditure identifier
     * @param _slot Expenditure slot
     */
    "getExpenditureSlot(uint256,uint256)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns an existing expenditure slot's payout for a token.
     * @param _id Expenditure identifier
     * @param _slot Expenditure slot
     * @param _token Token address
     */
    getExpenditureSlotPayout(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns an existing expenditure slot's payout for a token.
     * @param _id Expenditure identifier
     * @param _slot Expenditure slot
     * @param _token Token address
     */
    "getExpenditureSlotPayout(uint256,uint256,address)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Add a new payment in the colony. Secured function to authorised members.
     * @param _amount Payout amount
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)
     * @param _domainId The domain where the payment belongs
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _recipient Address of the payment recipient
     * @param _skillId The skill associated with the payment
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    addPayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _recipient: string,
      _token: string,
      _amount: BigNumberish,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Add a new payment in the colony. Secured function to authorised members.
     * @param _amount Payout amount
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)
     * @param _domainId The domain where the payment belongs
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _recipient Address of the payment recipient
     * @param _skillId The skill associated with the payment
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    "addPayment(uint256,uint256,address,address,uint256,uint256,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _recipient: string,
      _token: string,
      _amount: BigNumberish,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Finalizes the payment and logs the reputation log updates. Allowed to be called once after payment is fully funded. Secured function to authorised members.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Payment identifier
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     */
    finalizePayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Finalizes the payment and logs the reputation log updates. Allowed to be called once after payment is fully funded. Secured function to authorised members.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Payment identifier
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     */
    "finalizePayment(uint256,uint256,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets the recipient on an existing payment. Secured function to authorised members.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Payment identifier
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _recipient Address of the payment recipient
     */
    setPaymentRecipient(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _recipient: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets the recipient on an existing payment. Secured function to authorised members.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Payment identifier
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _recipient Address of the payment recipient
     */
    "setPaymentRecipient(uint256,uint256,uint256,address)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _recipient: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets the skill on an existing payment. Secured function to authorised members.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Payment identifier
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _skillId Id of the new skill to set
     */
    setPaymentSkill(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets the skill on an existing payment. Secured function to authorised members.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Payment identifier
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _skillId Id of the new skill to set
     */
    "setPaymentSkill(uint256,uint256,uint256,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets the payout for a given token on an existing payment. Secured function to authorised members.
     * @param _amount Payout amount
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Payment identifier
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    setPaymentPayout(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets the payout for a given token on an existing payment. Secured function to authorised members.
     * @param _amount Payout amount
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Payment identifier
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    "setPaymentPayout(uint256,uint256,uint256,address,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns an exiting payment.
     * @param _id Payment identifier
     */
    getPayment(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns an exiting payment.
     * @param _id Payment identifier
     */
    "getPayment(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Claim the payout in `_token` denomination for payment `_id`. Here the network receives its fee from each payout. Same as for tasks, ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off.
     * @param _id Payment identifier
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    claimPayment(
      _id: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Claim the payout in `_token` denomination for payment `_id`. Here the network receives its fee from each payout. Same as for tasks, ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off.
     * @param _id Payment identifier
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    "claimPayment(uint256,address)"(
      _id: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the number of payments in the colony.
     */
    getPaymentCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the number of payments in the colony.
     */
    "getPaymentCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Make a new task in the colony. Secured function to authorised members.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId The domain where the task belongs
     * @param _dueDate The due date of the task, can set to `0` for no-op
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _skillId The skill associated with the task, can set to `0` for no-op
     * @param _specificationHash Database identifier where the task specification is stored
     */
    makeTask(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _specificationHash: Arrayish,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Make a new task in the colony. Secured function to authorised members.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _domainId The domain where the task belongs
     * @param _dueDate The due date of the task, can set to `0` for no-op
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _skillId The skill associated with the task, can set to `0` for no-op
     * @param _specificationHash Database identifier where the task specification is stored
     */
    "makeTask(uint256,uint256,bytes32,uint256,uint256,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _specificationHash: Arrayish,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the number of tasks in the colony.
     */
    getTaskCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the number of tasks in the colony.
     */
    "getTaskCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Starts from 0 and is incremented on every co-reviewed task change via `executeTaskChange` call.
     * @param _id Id of the task
     */
    getTaskChangeNonce(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Starts from 0 and is incremented on every co-reviewed task change via `executeTaskChange` call.
     * @param _id Id of the task
     */
    "getTaskChangeNonce(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * The Colony functions which require approval and the task roles to review these are set in `IColony.initialiseColony` at colony creation. Upon successful execution the `taskChangeNonces` entry for the task is incremented.
     * Executes a task update transaction `_data` which is approved and signed by two of its roles (e.g. manager and worker) using the detached signatures for these users.
     * @param _data The transaction data
     * @param _mode How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)
     * @param _sigR r output of the ECDSA signature of the transaction
     * @param _sigS s output of the ECDSA signature of the transaction
     * @param _sigV recovery id
     * @param _value The transaction value, i.e. number of wei to be sent when the transaction is executed Currently we only accept 0 value transactions but this is kept as a future option
     */
    executeTaskChange(
      _sigV: BigNumberish[],
      _sigR: Arrayish[],
      _sigS: Arrayish[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * The Colony functions which require approval and the task roles to review these are set in `IColony.initialiseColony` at colony creation. Upon successful execution the `taskChangeNonces` entry for the task is incremented.
     * Executes a task update transaction `_data` which is approved and signed by two of its roles (e.g. manager and worker) using the detached signatures for these users.
     * @param _data The transaction data
     * @param _mode How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)
     * @param _sigR r output of the ECDSA signature of the transaction
     * @param _sigS s output of the ECDSA signature of the transaction
     * @param _sigV recovery id
     * @param _value The transaction value, i.e. number of wei to be sent when the transaction is executed Currently we only accept 0 value transactions but this is kept as a future option
     */
    "executeTaskChange(uint8[],bytes32[],bytes32[],uint8[],uint256,bytes)"(
      _sigV: BigNumberish[],
      _sigR: Arrayish[],
      _sigS: Arrayish[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Executes a task role update transaction `_data` which is approved and signed by two of addresses. depending of which function we are calling. Allowed functions are `setTaskManagerRole`, `setTaskEvaluatorRole` and `setTaskWorkerRole`. Upon successful execution the `taskChangeNonces` entry for the task is incremented.
     * @param _data The transaction data
     * @param _mode How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)
     * @param _sigR r output of the ECDSA signature of the transaction
     * @param _sigS s output of the ECDSA signature of the transaction
     * @param _sigV recovery id
     * @param _value The transaction value, i.e. number of wei to be sent when the transaction is executed Currently we only accept 0 value transactions but this is kept as a future option
     */
    executeTaskRoleAssignment(
      _sigV: BigNumberish[],
      _sigR: Arrayish[],
      _sigS: Arrayish[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Executes a task role update transaction `_data` which is approved and signed by two of addresses. depending of which function we are calling. Allowed functions are `setTaskManagerRole`, `setTaskEvaluatorRole` and `setTaskWorkerRole`. Upon successful execution the `taskChangeNonces` entry for the task is incremented.
     * @param _data The transaction data
     * @param _mode How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)
     * @param _sigR r output of the ECDSA signature of the transaction
     * @param _sigS s output of the ECDSA signature of the transaction
     * @param _sigV recovery id
     * @param _value The transaction value, i.e. number of wei to be sent when the transaction is executed Currently we only accept 0 value transactions but this is kept as a future option
     */
    "executeTaskRoleAssignment(uint8[],bytes32[],bytes32[],uint8[],uint256,bytes)"(
      _sigV: BigNumberish[],
      _sigR: Arrayish[],
      _sigS: Arrayish[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Submit a hashed secret of the rating for work in task `_id` which was performed by user with task role id `_role`. Allowed within 5 days period starting which whichever is first from either the deliverable being submitted or the dueDate been reached. Allowed only for evaluator to rate worker and for worker to rate manager performance. Once submitted ratings can not be changed or overwritten.
     * @param _id Id of the task
     * @param _ratingSecret `keccak256` hash of a salt and 0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50). Can be generated via `IColony.generateSecret` helper function.
     * @param _role Id of the role, as defined in TaskRole enum
     */
    submitTaskWorkRating(
      _id: BigNumberish,
      _role: BigNumberish,
      _ratingSecret: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Submit a hashed secret of the rating for work in task `_id` which was performed by user with task role id `_role`. Allowed within 5 days period starting which whichever is first from either the deliverable being submitted or the dueDate been reached. Allowed only for evaluator to rate worker and for worker to rate manager performance. Once submitted ratings can not be changed or overwritten.
     * @param _id Id of the task
     * @param _ratingSecret `keccak256` hash of a salt and 0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50). Can be generated via `IColony.generateSecret` helper function.
     * @param _role Id of the role, as defined in TaskRole enum
     */
    "submitTaskWorkRating(uint256,uint8,bytes32)"(
      _id: BigNumberish,
      _role: BigNumberish,
      _ratingSecret: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Compares the `keccak256(_salt, _rating)` output with the previously submitted rating secret and if they match, sets the task role properties `rated` to `true` and `rating` to `_rating`.
     * Reveal the secret rating submitted in `IColony.submitTaskWorkRating` for task `_id` and task role with id `_role`. Allowed within 5 days period starting which whichever is first from either both rating secrets being submitted (via `IColony.submitTaskWorkRating`) or the 5 day rating period expiring.
     * @param _id Id of the task
     * @param _rating 0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50)
     * @param _role Id of the role, as defined in TaskRole enum
     * @param _salt Salt value used to generate the rating secret
     */
    revealTaskWorkRating(
      _id: BigNumberish,
      _role: BigNumberish,
      _rating: BigNumberish,
      _salt: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Compares the `keccak256(_salt, _rating)` output with the previously submitted rating secret and if they match, sets the task role properties `rated` to `true` and `rating` to `_rating`.
     * Reveal the secret rating submitted in `IColony.submitTaskWorkRating` for task `_id` and task role with id `_role`. Allowed within 5 days period starting which whichever is first from either both rating secrets being submitted (via `IColony.submitTaskWorkRating`) or the 5 day rating period expiring.
     * @param _id Id of the task
     * @param _rating 0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50)
     * @param _role Id of the role, as defined in TaskRole enum
     * @param _salt Salt value used to generate the rating secret
     */
    "revealTaskWorkRating(uint256,uint8,uint8,bytes32)"(
      _id: BigNumberish,
      _role: BigNumberish,
      _rating: BigNumberish,
      _salt: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Helper function used to generage consistently the rating secret using salt value `_salt` and value to hide `_value`
     * @param _salt Salt value
     * @param _value Value to hide
     */
    generateSecret(
      _salt: Arrayish,
      _value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Helper function used to generage consistently the rating secret using salt value `_salt` and value to hide `_value`
     * @param _salt Salt value
     * @param _value Value to hide
     */
    "generateSecret(bytes32,uint256)"(
      _salt: Arrayish,
      _value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the `ColonyStorage.RatingSecrets` information for task `_id`.
     * @param _id Id of the task
     */
    getTaskWorkRatingSecretsInfo(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the `ColonyStorage.RatingSecrets` information for task `_id`.
     * @param _id Id of the task
     */
    "getTaskWorkRatingSecretsInfo(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the rating secret submitted for role `_role` in task `_id`
     * @param _id Id of the task
     * @param _role Id of the role, as defined in TaskRole enum
     */
    getTaskWorkRatingSecret(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the rating secret submitted for role `_role` in task `_id`
     * @param _id Id of the task
     * @param _role Id of the role, as defined in TaskRole enum
     */
    "getTaskWorkRatingSecret(uint256,uint8)"(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * This function can only be called through `executeTaskRoleAssignment`.
     * Assigning manager role. Current manager and user we want to assign role to both need to agree. User we want to set here also needs to be an admin. Note that the domain proof data comes at the end here to not interfere with the assembly argument unpacking.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Id of the task
     * @param _permissionDomainId The domain ID in which _user has the Administration permission
     * @param _user Address of the user we want to give a manager role to
     */
    setTaskManagerRole(
      _id: BigNumberish,
      _user: string,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * This function can only be called through `executeTaskRoleAssignment`.
     * Assigning manager role. Current manager and user we want to assign role to both need to agree. User we want to set here also needs to be an admin. Note that the domain proof data comes at the end here to not interfere with the assembly argument unpacking.
     * @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`
     * @param _id Id of the task
     * @param _permissionDomainId The domain ID in which _user has the Administration permission
     * @param _user Address of the user we want to give a manager role to
     */
    "setTaskManagerRole(uint256,address,uint256,uint256)"(
      _id: BigNumberish,
      _user: string,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * This function can only be called through `executeTaskRoleAssignment`.
     * Assigning evaluator role. Can only be set if there is no one currently assigned to be an evaluator. Manager of the task and user we want to assign role to both need to agree. Managers can assign themselves to this role, if there is no one currently assigned to it.
     * @param _id Id of the task
     * @param _user Address of the user we want to give a evaluator role to
     */
    setTaskEvaluatorRole(
      _id: BigNumberish,
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * This function can only be called through `executeTaskRoleAssignment`.
     * Assigning evaluator role. Can only be set if there is no one currently assigned to be an evaluator. Manager of the task and user we want to assign role to both need to agree. Managers can assign themselves to this role, if there is no one currently assigned to it.
     * @param _id Id of the task
     * @param _user Address of the user we want to give a evaluator role to
     */
    "setTaskEvaluatorRole(uint256,address)"(
      _id: BigNumberish,
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * This function can only be called through `executeTaskRoleAssignment`.
     * Assigning worker role. Can only be set if there is no one currently assigned to be a worker. Manager of the task and user we want to assign role to both need to agree.
     * @param _id Id of the task
     * @param _user Address of the user we want to give a worker role to
     */
    setTaskWorkerRole(
      _id: BigNumberish,
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * This function can only be called through `executeTaskRoleAssignment`.
     * Assigning worker role. Can only be set if there is no one currently assigned to be a worker. Manager of the task and user we want to assign role to both need to agree.
     * @param _id Id of the task
     * @param _user Address of the user we want to give a worker role to
     */
    "setTaskWorkerRole(uint256,address)"(
      _id: BigNumberish,
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Removing evaluator role. Agreed between manager and currently assigned evaluator.
     * @param _id Id of the task
     */
    removeTaskEvaluatorRole(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Removing evaluator role. Agreed between manager and currently assigned evaluator.
     * @param _id Id of the task
     */
    "removeTaskEvaluatorRole(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Removing worker role. Agreed between manager and currently assigned worker.
     * @param _id Id of the task
     */
    removeTaskWorkerRole(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Removing worker role. Agreed between manager and currently assigned worker.
     * @param _id Id of the task
     */
    "removeTaskWorkerRole(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Currently we only allow one skill per task although we have provisioned for an array of skills in `Task` struct. Allowed before a task is finalized.
     * Set the skill for task `_id`.
     * @param _id Id of the task
     * @param _skillId Id of the skill which has to be a global skill
     */
    setTaskSkill(
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Currently we only allow one skill per task although we have provisioned for an array of skills in `Task` struct. Allowed before a task is finalized.
     * Set the skill for task `_id`.
     * @param _id Id of the task
     * @param _skillId Id of the skill which has to be a global skill
     */
    "setTaskSkill(uint256,uint256)"(
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set the hash for the task brief, aka task work specification, which identifies the task brief content in ddb. Allowed before a task is finalized.
     * @param _id Id of the task
     * @param _specificationHash Unique hash of the task brief in ddb
     */
    setTaskBrief(
      _id: BigNumberish,
      _specificationHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set the hash for the task brief, aka task work specification, which identifies the task brief content in ddb. Allowed before a task is finalized.
     * @param _id Id of the task
     * @param _specificationHash Unique hash of the task brief in ddb
     */
    "setTaskBrief(uint256,bytes32)"(
      _id: BigNumberish,
      _specificationHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set the due date on task `_id`. Allowed before a task is finalized.
     * @param _dueDate Due date as seconds since unix epoch
     * @param _id Id of the task
     */
    setTaskDueDate(
      _id: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set the due date on task `_id`. Allowed before a task is finalized.
     * @param _dueDate Due date as seconds since unix epoch
     * @param _id Id of the task
     */
    "setTaskDueDate(uint256,uint256)"(
      _id: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set the `task.deliverableHash` and `task.completionTimestamp` properties.
     * Submit the task deliverable, i.e. the output of the work performed for task `_id`. Submission is allowed only to the assigned worker before the task due date. Submissions cannot be overwritten.
     * @param _deliverableHash Unique hash of the task deliverable content in ddb
     * @param _id Id of the task
     */
    submitTaskDeliverable(
      _id: BigNumberish,
      _deliverableHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set the `task.deliverableHash` and `task.completionTimestamp` properties.
     * Submit the task deliverable, i.e. the output of the work performed for task `_id`. Submission is allowed only to the assigned worker before the task due date. Submissions cannot be overwritten.
     * @param _deliverableHash Unique hash of the task deliverable content in ddb
     * @param _id Id of the task
     */
    "submitTaskDeliverable(uint256,bytes32)"(
      _id: BigNumberish,
      _deliverableHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Internally call `submitTaskDeliverable` and `submitTaskWorkRating` in sequence.
     * Submit the task deliverable for Worker and rating for Manager.
     * @param _deliverableHash Unique hash of the task deliverable content in ddb
     * @param _id Id of the task
     * @param _ratingSecret Rating secret for manager
     */
    submitTaskDeliverableAndRating(
      _id: BigNumberish,
      _deliverableHash: Arrayish,
      _ratingSecret: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Internally call `submitTaskDeliverable` and `submitTaskWorkRating` in sequence.
     * Submit the task deliverable for Worker and rating for Manager.
     * @param _deliverableHash Unique hash of the task deliverable content in ddb
     * @param _id Id of the task
     * @param _ratingSecret Rating secret for manager
     */
    "submitTaskDeliverableAndRating(uint256,bytes32,bytes32)"(
      _id: BigNumberish,
      _deliverableHash: Arrayish,
      _ratingSecret: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set the `task.finalized` property to true
     * Called after task work rating is complete which closes the task and logs the respective reputation log updates. Allowed to be called once per task. Secured function to authorised members.
     * @param _id Id of the task
     */
    finalizeTask(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set the `task.finalized` property to true
     * Called after task work rating is complete which closes the task and logs the respective reputation log updates. Allowed to be called once per task. Secured function to authorised members.
     * @param _id Id of the task
     */
    "finalizeTask(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set the `task.status` property to `1`.
     * Cancel a task at any point before it is finalized. Secured function to authorised members. Any funds assigned to its funding pot can be moved back to the domain via `IColony.moveFundsBetweenPots`.
     * @param _id Id of the task
     */
    cancelTask(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set the `task.status` property to `1`.
     * Cancel a task at any point before it is finalized. Secured function to authorised members. Any funds assigned to its funding pot can be moved back to the domain via `IColony.moveFundsBetweenPots`.
     * @param _id Id of the task
     */
    "cancelTask(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Mark a task as complete after the due date has passed. This allows the task to be rated and finalized (and funds recovered) even in the presence of a worker who has disappeared. Note that if the due date was not set, then this function will throw.
     * @param _id Id of the task
     */
    completeTask(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Mark a task as complete after the due date has passed. This allows the task to be rated and finalized (and funds recovered) even in the presence of a worker who has disappeared. Note that if the due date was not set, then this function will throw.
     * @param _id Id of the task
     */
    "completeTask(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get a task with id `_id`
     * @param _id Id of the task
     */
    getTask(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get a task with id `_id`
     * @param _id Id of the task
     */
    "getTask(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the `Role` properties back for role `_role` in task `_id`.
     * @param _id Id of the task
     * @param _role Id of the role, as defined in TaskRole enum
     */
    getTaskRole(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the `Role` properties back for role `_role` in task `_id`.
     * @param _id Id of the task
     * @param _role Id of the role, as defined in TaskRole enum
     */
    "getTaskRole(uint256,uint8)"(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set the reward inverse to pay out from revenue. e.g. if the fee is 1% (or 0.01), set 100.
     * @param _rewardInverse The inverse of the reward
     */
    setRewardInverse(
      _rewardInverse: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set the reward inverse to pay out from revenue. e.g. if the fee is 1% (or 0.01), set 100.
     * @param _rewardInverse The inverse of the reward
     */
    "setRewardInverse(uint256)"(
      _rewardInverse: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Return 1 / the reward to pay out from revenue. e.g. if the fee is 1% (or 0.01), return 100.
     */
    getRewardInverse(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Return 1 / the reward to pay out from revenue. e.g. if the fee is 1% (or 0.01), return 100.
     */
    "getRewardInverse()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get payout amount in `_token` denomination for role `_role` in task `_id`.
     * @param _id Id of the task
     * @param _role Id of the role, as defined in TaskRole enum
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    getTaskPayout(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get payout amount in `_token` denomination for role `_role` in task `_id`.
     * @param _id Id of the task
     * @param _role Id of the role, as defined in TaskRole enum
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    "getTaskPayout(uint256,uint8,address)"(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set `_token` payout for manager in task `_id` to `_amount`.
     * @param _amount Payout amount
     * @param _id Id of the task
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    setTaskManagerPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set `_token` payout for manager in task `_id` to `_amount`.
     * @param _amount Payout amount
     * @param _id Id of the task
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    "setTaskManagerPayout(uint256,address,uint256)"(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set `_token` payout for evaluator in task `_id` to `_amount`.
     * @param _amount Payout amount
     * @param _id Id of the task
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    setTaskEvaluatorPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set `_token` payout for evaluator in task `_id` to `_amount`.
     * @param _amount Payout amount
     * @param _id Id of the task
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    "setTaskEvaluatorPayout(uint256,address,uint256)"(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set `_token` payout for worker in task `_id` to `_amount`.
     * @param _amount Payout amount
     * @param _id Id of the task
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    setTaskWorkerPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set `_token` payout for worker in task `_id` to `_amount`.
     * @param _amount Payout amount
     * @param _id Id of the task
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    "setTaskWorkerPayout(uint256,address,uint256)"(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Can only call if evaluator and worker are unassigned or manager, otherwise need signature.
     * Set `_token` payout for all roles in task `_id` to the respective amounts.
     * @param _evaluatorAmount Payout amount for evaluator
     * @param _id Id of the task
     * @param _managerAmount Payout amount for manager
     * @param _token Address of the token, `0x0` value indicates Ether
     * @param _workerAmount Payout amount for worker
     */
    setAllTaskPayouts(
      _id: BigNumberish,
      _token: string,
      _managerAmount: BigNumberish,
      _evaluatorAmount: BigNumberish,
      _workerAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Can only call if evaluator and worker are unassigned or manager, otherwise need signature.
     * Set `_token` payout for all roles in task `_id` to the respective amounts.
     * @param _evaluatorAmount Payout amount for evaluator
     * @param _id Id of the task
     * @param _managerAmount Payout amount for manager
     * @param _token Address of the token, `0x0` value indicates Ether
     * @param _workerAmount Payout amount for worker
     */
    "setAllTaskPayouts(uint256,address,uint256,uint256,uint256)"(
      _id: BigNumberish,
      _token: string,
      _managerAmount: BigNumberish,
      _evaluatorAmount: BigNumberish,
      _workerAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Claim the payout in `_token` denomination for work completed in task `_id` by contributor with role `_role`. Allowed only after task is finalized. Here the network receives its fee from each payout. Ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off.
     * @param _id Id of the task
     * @param _role Id of the role, as defined in TaskRole enum
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    claimTaskPayout(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Claim the payout in `_token` denomination for work completed in task `_id` by contributor with role `_role`. Allowed only after task is finalized. Here the network receives its fee from each payout. Ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off.
     * @param _id Id of the task
     * @param _role Id of the role, as defined in TaskRole enum
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    "claimTaskPayout(uint256,uint8,address)"(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Start next reward payout for `_token`. All funds in the reward pot for `_token` will become unavailable.Add a new payment in the colony. Can only be called by users with root permission. All tokens will be locked, and can be unlocked by calling `waiveRewardPayout` or `claimRewardPayout`.
     * @param _token Address of the token used for reward payout
     * @param branchMask The branchmask of the proof
     * @param key Some Reputation hash tree key
     * @param siblings The siblings of the proof
     * @param value Reputation value
     */
    startNextRewardPayout(
      _token: string,
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Start next reward payout for `_token`. All funds in the reward pot for `_token` will become unavailable.Add a new payment in the colony. Can only be called by users with root permission. All tokens will be locked, and can be unlocked by calling `waiveRewardPayout` or `claimRewardPayout`.
     * @param _token Address of the token used for reward payout
     * @param branchMask The branchmask of the proof
     * @param key Some Reputation hash tree key
     * @param siblings The siblings of the proof
     * @param value Reputation value
     */
    "startNextRewardPayout(address,bytes,bytes,uint256,bytes32[])"(
      _token: string,
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Claim the reward payout at `_payoutId`. User needs to provide their reputation and colony-wide reputation which will be proven via Merkle proof inside this function. Can only be called if payout is active, i.e if 60 days have not passed from its creation. Can only be called if next in queue.
     * @param _payoutId Id of the reward payout
     * @param _squareRoots Square roots of values used in equation: `_squareRoots[0]` - square root of user reputation, `_squareRoots[1]` - square root of user tokens (deposited in TokenLocking), `_squareRoots[2]` - square root of total reputation, `_squareRoots[3]` - square root of total tokens, `_squareRoots[4]` - square root of numerator (user reputation * user tokens), `_squareRoots[5]` - square root of denominator (total reputation * total tokens), `_squareRoots[6]` - square root of payout amount.
     * @param branchMask The branchmask of the proof
     * @param key Some Reputation hash tree key
     * @param siblings The siblings of the proof
     * @param value Reputation value
     */
    claimRewardPayout(
      _payoutId: BigNumberish,
      _squareRoots: BigNumberish[],
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Claim the reward payout at `_payoutId`. User needs to provide their reputation and colony-wide reputation which will be proven via Merkle proof inside this function. Can only be called if payout is active, i.e if 60 days have not passed from its creation. Can only be called if next in queue.
     * @param _payoutId Id of the reward payout
     * @param _squareRoots Square roots of values used in equation: `_squareRoots[0]` - square root of user reputation, `_squareRoots[1]` - square root of user tokens (deposited in TokenLocking), `_squareRoots[2]` - square root of total reputation, `_squareRoots[3]` - square root of total tokens, `_squareRoots[4]` - square root of numerator (user reputation * user tokens), `_squareRoots[5]` - square root of denominator (total reputation * total tokens), `_squareRoots[6]` - square root of payout amount.
     * @param branchMask The branchmask of the proof
     * @param key Some Reputation hash tree key
     * @param siblings The siblings of the proof
     * @param value Reputation value
     */
    "claimRewardPayout(uint256,uint256[7],bytes,bytes,uint256,bytes32[])"(
      _payoutId: BigNumberish,
      _squareRoots: BigNumberish[],
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get useful information about specific reward payout.
     * @param _payoutId Id of the reward payout
     */
    getRewardPayoutInfo(
      _payoutId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get useful information about specific reward payout.
     * @param _payoutId Id of the reward payout
     */
    "getRewardPayoutInfo(uint256)"(
      _payoutId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Finalises the reward payout. Allows creation of next reward payouts for token that has been used in `_payoutId`. Can only be called when reward payout cycle is finished i.e when 60 days have passed from its creation.
     * @param _payoutId Id of the reward payout
     */
    finalizeRewardPayout(
      _payoutId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Finalises the reward payout. Allows creation of next reward payouts for token that has been used in `_payoutId`. Can only be called when reward payout cycle is finished i.e when 60 days have passed from its creation.
     * @param _payoutId Id of the reward payout
     */
    "finalizeRewardPayout(uint256)"(
      _payoutId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * For the reward funding pot (e.g. id: 0) this returns (0, 0, 0).
     * Get the non-mapping properties of a pot by id.
     * @param _id Id of the pot which details to get
     */
    getFundingPot(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * For the reward funding pot (e.g. id: 0) this returns (0, 0, 0).
     * Get the non-mapping properties of a pot by id.
     * @param _id Id of the pot which details to get
     */
    "getFundingPot(uint256)"(
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the number of funding pots in the colony.
     */
    getFundingPotCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the number of funding pots in the colony.
     */
    "getFundingPotCount()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the `_token` balance of pot with id `_potId`.
     * @param _potId Id of the funding pot
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    getFundingPotBalance(
      _potId: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the `_token` balance of pot with id `_potId`.
     * @param _potId Id of the funding pot
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    "getFundingPotBalance(uint256,address)"(
      _potId: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the assigned `_token` payouts of pot with id `_potId`.
     * @param _potId Id of the funding pot
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    getFundingPotPayout(
      _potId: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the assigned `_token` payouts of pot with id `_potId`.
     * @param _potId Id of the funding pot
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    "getFundingPotPayout(uint256,address)"(
      _potId: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Move a given amount: `_amount` of `_token` funds from funding pot with id `_fromPot` to one with id `_toPot`.
     * @param _amount Amount of funds
     * @param _childSkillIndex The child index in _permissionDomainId where I will be taking this action
     * @param _domainId The domain where I am taking this action, pointed to by _permissionDomainId and _childSkillIndex
     * @param _fromChildSkillIndex In the array of child skills for the skill associated with the domain pointed to by _permissionDomainId + _childSkillIndex,         the index of the skill associated with the domain that contains _fromPot
     * @param _fromPot Funding pot id providing the funds
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _toChildSkillIndex The same, but for the _toPot which the funds are being moved to
     * @param _toPot Funding pot id receiving the funds
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    moveFundsBetweenPots(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _fromPot: BigNumberish,
      _toPot: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Move a given amount: `_amount` of `_token` funds from funding pot with id `_fromPot` to one with id `_toPot`.
     * @param _amount Amount of funds
     * @param _childSkillIndex The child index in _permissionDomainId where I will be taking this action
     * @param _domainId The domain where I am taking this action, pointed to by _permissionDomainId and _childSkillIndex
     * @param _fromChildSkillIndex In the array of child skills for the skill associated with the domain pointed to by _permissionDomainId + _childSkillIndex,         the index of the skill associated with the domain that contains _fromPot
     * @param _fromPot Funding pot id providing the funds
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _toChildSkillIndex The same, but for the _toPot which the funds are being moved to
     * @param _toPot Funding pot id receiving the funds
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _fromPot: BigNumberish,
      _toPot: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * DEPRECATEDMove a given amount: `_amount` of `_token` funds from funding pot with id `_fromPot` to one with id `_toPot`.
     * @param _amount Amount of funds
     * @param _fromChildSkillIndex The child index in `_permissionDomainId` where we can find the domain for `_fromPotId`
     * @param _fromPot Funding pot id providing the funds
     * @param _permissionDomainId The domainId in which I have the permission to take this action
     * @param _toChildSkillIndex The child index in `_permissionDomainId` where we can find the domain for `_toPotId`
     * @param _toPot Funding pot id receiving the funds
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,address)"(
      _permissionDomainId: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _fromPot: BigNumberish,
      _toPot: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Move any funds received by the colony in `_token` denomination to the top-level domain pot, siphoning off a small amount to the reward pot. If called against a colony's own token, no fee is taken.
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    claimColonyFunds(
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Move any funds received by the colony in `_token` denomination to the top-level domain pot, siphoning off a small amount to the reward pot. If called against a colony's own token, no fee is taken.
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    "claimColonyFunds(address)"(
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the total amount of tokens `_token` minus amount reserved to be paid to the reputation and token holders as rewards.
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    getNonRewardPotsTotal(
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the total amount of tokens `_token` minus amount reserved to be paid to the reputation and token holders as rewards.
     * @param _token Address of the token, `0x0` value indicates Ether
     */
    "getNonRewardPotsTotal(address)"(
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Allow the _approvee to obligate some amount of tokens as a stake.
     * @param _amount Amount of internal token up to which we are willing to be obligated.
     * @param _approvee Address of the account we are willing to let obligate us.
     * @param _domainId Domain in which we are willing to be obligated.
     */
    approveStake(
      _approvee: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Allow the _approvee to obligate some amount of tokens as a stake.
     * @param _amount Amount of internal token up to which we are willing to be obligated.
     * @param _approvee Address of the account we are willing to let obligate us.
     * @param _domainId Domain in which we are willing to be obligated.
     */
    "approveStake(address,uint256,uint256)"(
      _approvee: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Obligate the user some amount of tokens as a stake.
     * @param _amount Amount of internal token we are obligating.
     * @param _domainId Domain in which we are obligating the user.
     * @param _user Address of the account we are obligating.
     */
    obligateStake(
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Obligate the user some amount of tokens as a stake.
     * @param _amount Amount of internal token we are obligating.
     * @param _domainId Domain in which we are obligating the user.
     * @param _user Address of the account we are obligating.
     */
    "obligateStake(address,uint256,uint256)"(
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Deobligate the user some amount of tokens, releasing the stake.
     * @param _amount Amount of internal token we are deobligating.
     * @param _domainId Domain in which we are deobligating the user.
     * @param _user Address of the account we are deobligating.
     */
    deobligateStake(
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Deobligate the user some amount of tokens, releasing the stake.
     * @param _amount Amount of internal token we are deobligating.
     * @param _domainId Domain in which we are deobligating the user.
     * @param _user Address of the account we are deobligating.
     */
    "deobligateStake(address,uint256,uint256)"(
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Transfer some amount of obligated tokens. Can be called by the arbitration role.
     * @param _amount Amount of internal token we are transferring.
     * @param _childSkillIndex The child index in `_permissionDomainId` where we can find `_domainId`.
     * @param _domainId Domain in which we are transferring the tokens.
     * @param _obligator Address of the account who set the obligation.
     * @param _permissionDomainId The domainId in which I have the permission to take this action.
     * @param _recipient Recipient of the transferred tokens.
     * @param _user Address of the account we are transferring.
     */
    transferStake(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _obligator: string,
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      _recipient: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Transfer some amount of obligated tokens. Can be called by the arbitration role.
     * @param _amount Amount of internal token we are transferring.
     * @param _childSkillIndex The child index in `_permissionDomainId` where we can find `_domainId`.
     * @param _domainId Domain in which we are transferring the tokens.
     * @param _obligator Address of the account who set the obligation.
     * @param _permissionDomainId The domainId in which I have the permission to take this action.
     * @param _recipient Recipient of the transferred tokens.
     * @param _user Address of the account we are transferring.
     */
    "transferStake(uint256,uint256,address,address,uint256,uint256,address)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _obligator: string,
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      _recipient: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * View an approval to obligate tokens.
     * @param _domainId Domain in which we are willing to be obligated.
     * @param _obligator Address of the account we are willing to let obligate us.
     * @param _user User allowing their tokens to be obligated.
     */
    getApproval(
      _user: string,
      _obligator: string,
      _domainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * View an approval to obligate tokens.
     * @param _domainId Domain in which we are willing to be obligated.
     * @param _obligator Address of the account we are willing to let obligate us.
     * @param _user User allowing their tokens to be obligated.
     */
    "getApproval(address,address,uint256)"(
      _user: string,
      _obligator: string,
      _domainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * View an obligation of tokens.
     * @param _domainId Domain in which we are obligated.
     * @param _obligator Address of the account who obligated us.
     * @param _user User whose tokens are obligated.
     */
    getObligation(
      _user: string,
      _obligator: string,
      _domainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * View an obligation of tokens.
     * @param _domainId Domain in which we are obligated.
     * @param _obligator Address of the account who obligated us.
     * @param _user User whose tokens are obligated.
     */
    "getObligation(address,address,uint256)"(
      _user: string,
      _obligator: string,
      _domainId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the domain corresponding to a funding pot
     * @param _fundingPotId Id of the funding pot
     */
    getDomainFromFundingPot(
      _fundingPotId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the domain corresponding to a funding pot
     * @param _fundingPotId Id of the funding pot
     */
    "getDomainFromFundingPot(uint256)"(
      _fundingPotId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Burn tokens held by the colony. Can only burn tokens held in the root funding pot.
     * @param amount The amount of tokens to burn
     * @param token The address of the token to burn
     */
    burnTokens(
      token: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Burn tokens held by the colony. Can only burn tokens held in the root funding pot.
     * @param amount The amount of tokens to burn
     * @param token The address of the token to burn
     */
    "burnTokens(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * unlock the native colony token, if possible
     */
    unlockToken(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * unlock the native colony token, if possible
     */
    "unlockToken()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Update the internal bookkeeping around external ERC20 approvals
     * @param spender The account we have approved
     * @param token The address of the token which was approved
     */
    updateApprovalAmount(
      token: string,
      spender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Update the internal bookkeeping around external ERC20 approvals
     * @param spender The account we have approved
     * @param token The address of the token which was approved
     */
    "updateApprovalAmount(address,address)"(
      token: string,
      spender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the current approval amount
     * @param spender The account we have approved
     * @param token The address of the token which was approved
     */
    getTokenApproval(
      token: string,
      spender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the current approval amount
     * @param spender The account we have approved
     * @param token The address of the token which was approved
     */
    "getTokenApproval(address,address)"(
      token: string,
      spender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the current total approval amount across all spenders
     * @param token The address of the token which was approved
     */
    getTotalTokenApproval(
      token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the current total approval amount across all spenders
     * @param token The address of the token which was approved
     */
    "getTotalTokenApproval(address)"(
      token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
