/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface OneTxPaymentDeployerInterface extends Interface {
  functions: {
    deployedExtensions: TypedFunctionDescription<{
      encode([]: [string]): string;
    }>;

    deployExtension: TypedFunctionDescription<{
      encode([_colony]: [string]): string;
    }>;

    removeExtension: TypedFunctionDescription<{
      encode([_colony]: [string]): string;
    }>;
  };

  events: {
    ColonyInitialised: TypedEventDescription<{
      encodeTopics([colonyNetwork, token]: [null, null]): string[];
    }>;

    ColonyBootstrapped: TypedEventDescription<{
      encodeTopics([users, amounts]: [null, null]): string[];
    }>;

    ColonyUpgraded: TypedEventDescription<{
      encodeTopics([oldVersion, newVersion]: [null, null]): string[];
    }>;

    ColonyRoleSet: TypedEventDescription<{
      encodeTopics([user, domainId, role, setTo]: [
        string | null,
        BigNumberish | null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    ColonyFundsMovedBetweenFundingPots: TypedEventDescription<{
      encodeTopics([fromPot, toPot, amount, token]: [
        BigNumberish | null,
        BigNumberish | null,
        null,
        null
      ]): string[];
    }>;

    ColonyFundsClaimed: TypedEventDescription<{
      encodeTopics([token, fee, payoutRemainder]: [null, null, null]): string[];
    }>;

    RewardPayoutCycleStarted: TypedEventDescription<{
      encodeTopics([rewardPayoutId]: [null]): string[];
    }>;

    RewardPayoutCycleEnded: TypedEventDescription<{
      encodeTopics([rewardPayoutId]: [null]): string[];
    }>;

    RewardPayoutClaimed: TypedEventDescription<{
      encodeTopics([rewardPayoutId, user, fee, rewardRemainder]: [
        null,
        null,
        null,
        null
      ]): string[];
    }>;

    ColonyRewardInverseSet: TypedEventDescription<{
      encodeTopics([rewardInverse]: [null]): string[];
    }>;

    PaymentAdded: TypedEventDescription<{
      encodeTopics([paymentId]: [null]): string[];
    }>;

    TaskAdded: TypedEventDescription<{
      encodeTopics([taskId]: [null]): string[];
    }>;

    TaskBriefSet: TypedEventDescription<{
      encodeTopics([taskId, specificationHash]: [
        BigNumberish | null,
        null
      ]): string[];
    }>;

    TaskDueDateSet: TypedEventDescription<{
      encodeTopics([taskId, dueDate]: [BigNumberish | null, null]): string[];
    }>;

    TaskDomainSet: TypedEventDescription<{
      encodeTopics([taskId, domainId]: [
        BigNumberish | null,
        BigNumberish | null
      ]): string[];
    }>;

    TaskSkillSet: TypedEventDescription<{
      encodeTopics([taskId, skillId]: [
        BigNumberish | null,
        BigNumberish | null
      ]): string[];
    }>;

    TaskRoleUserSet: TypedEventDescription<{
      encodeTopics([taskId, role, user]: [
        BigNumberish | null,
        null,
        string | null
      ]): string[];
    }>;

    TaskPayoutSet: TypedEventDescription<{
      encodeTopics([taskId, role, token, amount]: [
        BigNumberish | null,
        null,
        null,
        null
      ]): string[];
    }>;

    TaskDeliverableSubmitted: TypedEventDescription<{
      encodeTopics([taskId, deliverableHash]: [
        BigNumberish | null,
        null
      ]): string[];
    }>;

    TaskCompleted: TypedEventDescription<{
      encodeTopics([taskId]: [BigNumberish | null]): string[];
    }>;

    TaskWorkRatingRevealed: TypedEventDescription<{
      encodeTopics([taskId, role, rating]: [
        BigNumberish | null,
        null,
        null
      ]): string[];
    }>;

    TaskFinalized: TypedEventDescription<{
      encodeTopics([taskId]: [BigNumberish | null]): string[];
    }>;

    PayoutClaimed: TypedEventDescription<{
      encodeTopics([fundingPotId, token, amount]: [
        BigNumberish | null,
        null,
        null
      ]): string[];
    }>;

    TaskCanceled: TypedEventDescription<{
      encodeTopics([taskId]: [BigNumberish | null]): string[];
    }>;

    DomainAdded: TypedEventDescription<{
      encodeTopics([domainId]: [null]): string[];
    }>;

    FundingPotAdded: TypedEventDescription<{
      encodeTopics([fundingPotId]: [null]): string[];
    }>;

    ExtensionDeployed: TypedEventDescription<{
      encodeTopics([_name, _colony, _extension]: [null, null, null]): string[];
    }>;

    ExtensionRemoved: TypedEventDescription<{
      encodeTopics([_name, _colony]: [null, null]): string[];
    }>;
  };
}

export class OneTxPaymentDeployer extends Contract {
  connect(signerOrProvider: Signer | Provider | string): OneTxPaymentDeployer;
  attach(addressOrName: string): OneTxPaymentDeployer;
  deployed(): Promise<OneTxPaymentDeployer>;

  on(event: EventFilter | string, listener: Listener): OneTxPaymentDeployer;
  once(event: EventFilter | string, listener: Listener): OneTxPaymentDeployer;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): OneTxPaymentDeployer;
  removeAllListeners(eventName: EventFilter | string): OneTxPaymentDeployer;
  removeListener(eventName: any, listener: Listener): OneTxPaymentDeployer;

  interface: OneTxPaymentDeployerInterface;

  functions: {
    deployedExtensions(arg0: string): Promise<string>;

    deployExtension(
      _colony: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    removeExtension(
      _colony: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  deployedExtensions(arg0: string): Promise<string>;

  deployExtension(
    _colony: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  removeExtension(
    _colony: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    ColonyInitialised(colonyNetwork: null, token: null): EventFilter;

    ColonyBootstrapped(users: null, amounts: null): EventFilter;

    ColonyUpgraded(oldVersion: null, newVersion: null): EventFilter;

    ColonyRoleSet(
      user: string | null,
      domainId: BigNumberish | null,
      role: BigNumberish | null,
      setTo: null
    ): EventFilter;

    ColonyFundsMovedBetweenFundingPots(
      fromPot: BigNumberish | null,
      toPot: BigNumberish | null,
      amount: null,
      token: null
    ): EventFilter;

    ColonyFundsClaimed(
      token: null,
      fee: null,
      payoutRemainder: null
    ): EventFilter;

    RewardPayoutCycleStarted(rewardPayoutId: null): EventFilter;

    RewardPayoutCycleEnded(rewardPayoutId: null): EventFilter;

    RewardPayoutClaimed(
      rewardPayoutId: null,
      user: null,
      fee: null,
      rewardRemainder: null
    ): EventFilter;

    ColonyRewardInverseSet(rewardInverse: null): EventFilter;

    PaymentAdded(paymentId: null): EventFilter;

    TaskAdded(taskId: null): EventFilter;

    TaskBriefSet(
      taskId: BigNumberish | null,
      specificationHash: null
    ): EventFilter;

    TaskDueDateSet(taskId: BigNumberish | null, dueDate: null): EventFilter;

    TaskDomainSet(
      taskId: BigNumberish | null,
      domainId: BigNumberish | null
    ): EventFilter;

    TaskSkillSet(
      taskId: BigNumberish | null,
      skillId: BigNumberish | null
    ): EventFilter;

    TaskRoleUserSet(
      taskId: BigNumberish | null,
      role: null,
      user: string | null
    ): EventFilter;

    TaskPayoutSet(
      taskId: BigNumberish | null,
      role: null,
      token: null,
      amount: null
    ): EventFilter;

    TaskDeliverableSubmitted(
      taskId: BigNumberish | null,
      deliverableHash: null
    ): EventFilter;

    TaskCompleted(taskId: BigNumberish | null): EventFilter;

    TaskWorkRatingRevealed(
      taskId: BigNumberish | null,
      role: null,
      rating: null
    ): EventFilter;

    TaskFinalized(taskId: BigNumberish | null): EventFilter;

    PayoutClaimed(
      fundingPotId: BigNumberish | null,
      token: null,
      amount: null
    ): EventFilter;

    TaskCanceled(taskId: BigNumberish | null): EventFilter;

    DomainAdded(domainId: null): EventFilter;

    FundingPotAdded(fundingPotId: null): EventFilter;

    ExtensionDeployed(
      _name: null,
      _colony: null,
      _extension: null
    ): EventFilter;

    ExtensionRemoved(_name: null, _colony: null): EventFilter;
  };

  estimate: {
    deployedExtensions(arg0: string): Promise<BigNumber>;

    deployExtension(_colony: string): Promise<BigNumber>;

    removeExtension(_colony: string): Promise<BigNumber>;
  };
}
