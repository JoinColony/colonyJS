/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface IPatriciaTreeBaseInterface extends Interface {
  functions: {
    getRootHash: TypedFunctionDescription<{ encode([]: []): string }>;

    getRootEdge: TypedFunctionDescription<{ encode([]: []): string }>;

    getNode: TypedFunctionDescription<{ encode([hash]: [Arrayish]): string }>;
  };

  events: {};
}

export class IPatriciaTreeBase extends Contract {
  connect(signerOrProvider: Signer | Provider | string): IPatriciaTreeBase;
  attach(addressOrName: string): IPatriciaTreeBase;
  deployed(): Promise<IPatriciaTreeBase>;

  on(event: EventFilter | string, listener: Listener): IPatriciaTreeBase;
  once(event: EventFilter | string, listener: Listener): IPatriciaTreeBase;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): IPatriciaTreeBase;
  removeAllListeners(eventName: EventFilter | string): IPatriciaTreeBase;
  removeListener(eventName: any, listener: Listener): IPatriciaTreeBase;

  interface: IPatriciaTreeBaseInterface;

  functions: {
    getRootHash(): Promise<string>;

    getRootEdge(): Promise<{
      node: string;
      label: { data: string; length: BigNumber };
    }>;

    getNode(
      hash: Arrayish
    ): Promise<{
      children: { node: string; label: { data: string; length: BigNumber } }[];
    }>;
  };

  getRootHash(): Promise<string>;

  getRootEdge(): Promise<{
    node: string;
    label: { data: string; length: BigNumber };
  }>;

  getNode(
    hash: Arrayish
  ): Promise<{
    children: { node: string; label: { data: string; length: BigNumber } }[];
  }>;

  filters: {};

  estimate: {
    getRootHash(): Promise<BigNumber>;

    getRootEdge(): Promise<BigNumber>;

    getNode(hash: Arrayish): Promise<BigNumber>;
  };
}
