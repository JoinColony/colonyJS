/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface TokenSupplierInterface extends utils.Interface {
  functions: {
    "authority()": FunctionFragment;
    "getColony()": FunctionFragment;
    "getDeprecated()": FunctionFragment;
    "owner()": FunctionFragment;
    "setAuthority(address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "identifier()": FunctionFragment;
    "version()": FunctionFragment;
    "install(address)": FunctionFragment;
    "finishUpgrade()": FunctionFragment;
    "deprecate(bool)": FunctionFragment;
    "uninstall()": FunctionFragment;
    "initialise(uint256,uint256)": FunctionFragment;
    "setTokenSupplyCeiling(uint256)": FunctionFragment;
    "setTokenIssuanceRate(uint256)": FunctionFragment;
    "issueTokens()": FunctionFragment;
    "getTokenSupplyCeiling()": FunctionFragment;
    "getTokenIssuanceRate()": FunctionFragment;
    "getLastPinged()": FunctionFragment;
    "getLastRateUpdate()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "authority"
      | "getColony"
      | "getDeprecated"
      | "owner"
      | "setAuthority"
      | "setOwner"
      | "identifier"
      | "version"
      | "install"
      | "finishUpgrade"
      | "deprecate"
      | "uninstall"
      | "initialise"
      | "setTokenSupplyCeiling"
      | "setTokenIssuanceRate"
      | "issueTokens"
      | "getTokenSupplyCeiling"
      | "getTokenIssuanceRate"
      | "getLastPinged"
      | "getLastRateUpdate"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(functionFragment: "getColony", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getDeprecated",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "identifier",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "install", values: [string]): string;
  encodeFunctionData(
    functionFragment: "finishUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deprecate", values: [boolean]): string;
  encodeFunctionData(functionFragment: "uninstall", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialise",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenSupplyCeiling",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenIssuanceRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "issueTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenSupplyCeiling",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenIssuanceRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastPinged",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastRateUpdate",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getColony", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDeprecated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "identifier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "install", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finishUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deprecate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uninstall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialise", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenSupplyCeiling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenIssuanceRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenSupplyCeiling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenIssuanceRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastPinged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastRateUpdate",
    data: BytesLike
  ): Result;

  events: {
    "ExtensionInitialised()": EventFragment;
    "LogSetAuthority(address)": EventFragment;
    "LogSetOwner(address)": EventFragment;
    "TokenIssuanceRateSet(uint256)": EventFragment;
    "TokenSupplyCeilingSet(uint256)": EventFragment;
    "TokensIssued(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExtensionInitialised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetAuthority"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenIssuanceRateSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenSupplyCeilingSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensIssued"): EventFragment;
}

export interface ExtensionInitialisedEventObject {}
export type ExtensionInitialisedEvent = TypedEvent<
  [],
  ExtensionInitialisedEventObject
>;

export type ExtensionInitialisedEventFilter =
  TypedEventFilter<ExtensionInitialisedEvent>;

export interface LogSetAuthorityEventObject {
  authority: string;
}
export type LogSetAuthorityEvent = TypedEvent<
  [string],
  LogSetAuthorityEventObject
>;

export type LogSetAuthorityEventFilter = TypedEventFilter<LogSetAuthorityEvent>;

export interface LogSetOwnerEventObject {
  owner: string;
}
export type LogSetOwnerEvent = TypedEvent<[string], LogSetOwnerEventObject>;

export type LogSetOwnerEventFilter = TypedEventFilter<LogSetOwnerEvent>;

export interface TokenIssuanceRateSetEventObject {
  tokenIssuanceRate: BigNumber;
}
export type TokenIssuanceRateSetEvent = TypedEvent<
  [BigNumber],
  TokenIssuanceRateSetEventObject
>;

export type TokenIssuanceRateSetEventFilter =
  TypedEventFilter<TokenIssuanceRateSetEvent>;

export interface TokenSupplyCeilingSetEventObject {
  tokenSupplyCeiling: BigNumber;
}
export type TokenSupplyCeilingSetEvent = TypedEvent<
  [BigNumber],
  TokenSupplyCeilingSetEventObject
>;

export type TokenSupplyCeilingSetEventFilter =
  TypedEventFilter<TokenSupplyCeilingSetEvent>;

export interface TokensIssuedEventObject {
  numTokens: BigNumber;
}
export type TokensIssuedEvent = TypedEvent<
  [BigNumber],
  TokensIssuedEventObject
>;

export type TokensIssuedEventFilter = TypedEventFilter<TokensIssuedEvent>;

export interface TokenSupplier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenSupplierInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    authority(overrides?: CallOverrides): Promise<[string]>;

    getColony(overrides?: CallOverrides): Promise<[string]>;

    getDeprecated(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setAuthority(
      authority_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      owner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns the identifier of the extension
     */
    identifier(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the version of the extension
     */
    version(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Configures the extension
     * @param _colony The colony in which the extension holds permissions
     */
    install(
      _colony: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Called when upgrading the extension (currently a no-op)
     */
    finishUpgrade(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Called when deprecating (or undeprecating) the extension (currently a no-op)
     */
    deprecate(
      _deprecated: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Called when uninstalling the extension
     */
    uninstall(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Initialise the extension, must be called before any tokens can be issued
     * @param _tokenIssuanceRate Number of tokens to issue per day
     * @param _tokenSupplyCeiling Total amount of tokens to issue
     */
    initialise(
      _tokenSupplyCeiling: BigNumberish,
      _tokenIssuanceRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Update the tokenSupplyCeiling, cannot set below current tokenSupply
     * @param _tokenSupplyCeiling Total amount of tokens to issue
     */
    setTokenSupplyCeiling(
      _tokenSupplyCeiling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Update the tokenIssuanceRate
     * @param _tokenIssuanceRate Number of tokens to issue per day
     */
    setTokenIssuanceRate(
      _tokenIssuanceRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Issue the appropriate amount of tokens
     */
    issueTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTokenSupplyCeiling(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokenIssuanceRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLastPinged(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLastRateUpdate(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  authority(overrides?: CallOverrides): Promise<string>;

  getColony(overrides?: CallOverrides): Promise<string>;

  getDeprecated(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  setAuthority(
    authority_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    owner_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns the identifier of the extension
   */
  identifier(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the version of the extension
   */
  version(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Configures the extension
   * @param _colony The colony in which the extension holds permissions
   */
  install(
    _colony: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Called when upgrading the extension (currently a no-op)
   */
  finishUpgrade(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Called when deprecating (or undeprecating) the extension (currently a no-op)
   */
  deprecate(
    _deprecated: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Called when uninstalling the extension
   */
  uninstall(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Initialise the extension, must be called before any tokens can be issued
   * @param _tokenIssuanceRate Number of tokens to issue per day
   * @param _tokenSupplyCeiling Total amount of tokens to issue
   */
  initialise(
    _tokenSupplyCeiling: BigNumberish,
    _tokenIssuanceRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Update the tokenSupplyCeiling, cannot set below current tokenSupply
   * @param _tokenSupplyCeiling Total amount of tokens to issue
   */
  setTokenSupplyCeiling(
    _tokenSupplyCeiling: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Update the tokenIssuanceRate
   * @param _tokenIssuanceRate Number of tokens to issue per day
   */
  setTokenIssuanceRate(
    _tokenIssuanceRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Issue the appropriate amount of tokens
   */
  issueTokens(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTokenSupplyCeiling(overrides?: CallOverrides): Promise<BigNumber>;

  getTokenIssuanceRate(overrides?: CallOverrides): Promise<BigNumber>;

  getLastPinged(overrides?: CallOverrides): Promise<BigNumber>;

  getLastRateUpdate(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    authority(overrides?: CallOverrides): Promise<string>;

    getColony(overrides?: CallOverrides): Promise<string>;

    getDeprecated(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    setAuthority(authority_: string, overrides?: CallOverrides): Promise<void>;

    setOwner(owner_: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Returns the identifier of the extension
     */
    identifier(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the version of the extension
     */
    version(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Configures the extension
     * @param _colony The colony in which the extension holds permissions
     */
    install(_colony: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Called when upgrading the extension (currently a no-op)
     */
    finishUpgrade(overrides?: CallOverrides): Promise<void>;

    /**
     * Called when deprecating (or undeprecating) the extension (currently a no-op)
     */
    deprecate(_deprecated: boolean, overrides?: CallOverrides): Promise<void>;

    /**
     * Called when uninstalling the extension
     */
    uninstall(overrides?: CallOverrides): Promise<void>;

    /**
     * Initialise the extension, must be called before any tokens can be issued
     * @param _tokenIssuanceRate Number of tokens to issue per day
     * @param _tokenSupplyCeiling Total amount of tokens to issue
     */
    initialise(
      _tokenSupplyCeiling: BigNumberish,
      _tokenIssuanceRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Update the tokenSupplyCeiling, cannot set below current tokenSupply
     * @param _tokenSupplyCeiling Total amount of tokens to issue
     */
    setTokenSupplyCeiling(
      _tokenSupplyCeiling: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Update the tokenIssuanceRate
     * @param _tokenIssuanceRate Number of tokens to issue per day
     */
    setTokenIssuanceRate(
      _tokenIssuanceRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Issue the appropriate amount of tokens
     */
    issueTokens(overrides?: CallOverrides): Promise<void>;

    getTokenSupplyCeiling(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenIssuanceRate(overrides?: CallOverrides): Promise<BigNumber>;

    getLastPinged(overrides?: CallOverrides): Promise<BigNumber>;

    getLastRateUpdate(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ExtensionInitialised()"(): ExtensionInitialisedEventFilter;
    ExtensionInitialised(): ExtensionInitialisedEventFilter;

    "LogSetAuthority(address)"(
      authority?: string | null
    ): LogSetAuthorityEventFilter;
    LogSetAuthority(authority?: string | null): LogSetAuthorityEventFilter;

    "LogSetOwner(address)"(owner?: string | null): LogSetOwnerEventFilter;
    LogSetOwner(owner?: string | null): LogSetOwnerEventFilter;

    "TokenIssuanceRateSet(uint256)"(
      tokenIssuanceRate?: null
    ): TokenIssuanceRateSetEventFilter;
    TokenIssuanceRateSet(
      tokenIssuanceRate?: null
    ): TokenIssuanceRateSetEventFilter;

    "TokenSupplyCeilingSet(uint256)"(
      tokenSupplyCeiling?: null
    ): TokenSupplyCeilingSetEventFilter;
    TokenSupplyCeilingSet(
      tokenSupplyCeiling?: null
    ): TokenSupplyCeilingSetEventFilter;

    "TokensIssued(uint256)"(numTokens?: null): TokensIssuedEventFilter;
    TokensIssued(numTokens?: null): TokensIssuedEventFilter;
  };

  estimateGas: {
    authority(overrides?: CallOverrides): Promise<BigNumber>;

    getColony(overrides?: CallOverrides): Promise<BigNumber>;

    getDeprecated(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setAuthority(
      authority_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      owner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Returns the identifier of the extension
     */
    identifier(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the version of the extension
     */
    version(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Configures the extension
     * @param _colony The colony in which the extension holds permissions
     */
    install(
      _colony: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Called when upgrading the extension (currently a no-op)
     */
    finishUpgrade(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Called when deprecating (or undeprecating) the extension (currently a no-op)
     */
    deprecate(
      _deprecated: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Called when uninstalling the extension
     */
    uninstall(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Initialise the extension, must be called before any tokens can be issued
     * @param _tokenIssuanceRate Number of tokens to issue per day
     * @param _tokenSupplyCeiling Total amount of tokens to issue
     */
    initialise(
      _tokenSupplyCeiling: BigNumberish,
      _tokenIssuanceRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Update the tokenSupplyCeiling, cannot set below current tokenSupply
     * @param _tokenSupplyCeiling Total amount of tokens to issue
     */
    setTokenSupplyCeiling(
      _tokenSupplyCeiling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Update the tokenIssuanceRate
     * @param _tokenIssuanceRate Number of tokens to issue per day
     */
    setTokenIssuanceRate(
      _tokenIssuanceRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Issue the appropriate amount of tokens
     */
    issueTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTokenSupplyCeiling(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenIssuanceRate(overrides?: CallOverrides): Promise<BigNumber>;

    getLastPinged(overrides?: CallOverrides): Promise<BigNumber>;

    getLastRateUpdate(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getColony(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDeprecated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAuthority(
      authority_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      owner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the identifier of the extension
     */
    identifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the version of the extension
     */
    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Configures the extension
     * @param _colony The colony in which the extension holds permissions
     */
    install(
      _colony: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Called when upgrading the extension (currently a no-op)
     */
    finishUpgrade(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Called when deprecating (or undeprecating) the extension (currently a no-op)
     */
    deprecate(
      _deprecated: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Called when uninstalling the extension
     */
    uninstall(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Initialise the extension, must be called before any tokens can be issued
     * @param _tokenIssuanceRate Number of tokens to issue per day
     * @param _tokenSupplyCeiling Total amount of tokens to issue
     */
    initialise(
      _tokenSupplyCeiling: BigNumberish,
      _tokenIssuanceRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Update the tokenSupplyCeiling, cannot set below current tokenSupply
     * @param _tokenSupplyCeiling Total amount of tokens to issue
     */
    setTokenSupplyCeiling(
      _tokenSupplyCeiling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Update the tokenIssuanceRate
     * @param _tokenIssuanceRate Number of tokens to issue per day
     */
    setTokenIssuanceRate(
      _tokenIssuanceRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Issue the appropriate amount of tokens
     */
    issueTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTokenSupplyCeiling(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenIssuanceRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastPinged(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastRateUpdate(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
