/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace StreamingPayments {
  export type StreamingPaymentStruct = {
    recipient: string;
    domainId: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    interval: BigNumberish;
  };

  export type StreamingPaymentStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    recipient: string;
    domainId: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
    interval: BigNumber;
  };

  export type PaymentTokenStruct = {
    amount: BigNumberish;
    pseudoAmountClaimedFromStart: BigNumberish;
  };

  export type PaymentTokenStructOutput = [BigNumber, BigNumber] & {
    amount: BigNumber;
    pseudoAmountClaimedFromStart: BigNumber;
  };
}

export interface StreamingPaymentsInterface extends utils.Interface {
  functions: {
    "authority()": FunctionFragment;
    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": FunctionFragment;
    "getCapabilityRoles(bytes4)": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getColony()": FunctionFragment;
    "getDeprecated()": FunctionFragment;
    "getMetatransactionNonce(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "setAuthority(address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "verify(address,uint256,uint256,bytes,bytes32,bytes32,uint8)": FunctionFragment;
    "identifier()": FunctionFragment;
    "version()": FunctionFragment;
    "install(address)": FunctionFragment;
    "finishUpgrade()": FunctionFragment;
    "deprecate(bool)": FunctionFragment;
    "uninstall()": FunctionFragment;
    "create(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address[],uint256[])": FunctionFragment;
    "claim(uint256,uint256,uint256,uint256,uint256,address[])": FunctionFragment;
    "addToken(uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "setTokenAmount(uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "setStartTime(uint256,uint256,uint256,uint256)": FunctionFragment;
    "setEndTime(uint256,uint256,uint256,uint256)": FunctionFragment;
    "cancel(uint256,uint256,uint256)": FunctionFragment;
    "cancelAndWaive(uint256,address[])": FunctionFragment;
    "getStreamingPayment(uint256)": FunctionFragment;
    "getPaymentToken(uint256,address)": FunctionFragment;
    "getNumStreamingPayments()": FunctionFragment;
    "getAmountEntitledFromStart(uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "authority"
      | "executeMetaTransaction"
      | "getCapabilityRoles"
      | "getChainId"
      | "getColony"
      | "getDeprecated"
      | "getMetatransactionNonce"
      | "owner"
      | "setAuthority"
      | "setOwner"
      | "verify"
      | "identifier"
      | "version"
      | "install"
      | "finishUpgrade"
      | "deprecate"
      | "uninstall"
      | "create"
      | "claim"
      | "addToken"
      | "setTokenAmount"
      | "setStartTime"
      | "setEndTime"
      | "cancel"
      | "cancelAndWaive"
      | "getStreamingPayment"
      | "getPaymentToken"
      | "getNumStreamingPayments"
      | "getAmountEntitledFromStart"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeMetaTransaction",
    values: [string, BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCapabilityRoles",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getColony", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getDeprecated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMetatransactionNonce",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "identifier",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "install", values: [string]): string;
  encodeFunctionData(
    functionFragment: "finishUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deprecate", values: [boolean]): string;
  encodeFunctionData(functionFragment: "uninstall", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addToken",
    values: [BigNumberish, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAmount",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setStartTime",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEndTime",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAndWaive",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getStreamingPayment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentToken",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumStreamingPayments",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountEntitledFromStart",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeMetaTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCapabilityRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getColony", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDeprecated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetatransactionNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "identifier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "install", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finishUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deprecate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uninstall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setEndTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelAndWaive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStreamingPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumStreamingPayments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountEntitledFromStart",
    data: BytesLike
  ): Result;

  events: {
    "ExtensionInitialised()": EventFragment;
    "LogSetAuthority(address)": EventFragment;
    "LogSetOwner(address)": EventFragment;
    "MetaTransactionExecuted(address,address,bytes)": EventFragment;
    "PaymentTokenUpdated(address,uint256,address,uint256)": EventFragment;
    "StreamingPaymentClaimed(address,uint256,address,uint256)": EventFragment;
    "StreamingPaymentCreated(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExtensionInitialised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetAuthority"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentTokenUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StreamingPaymentClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StreamingPaymentCreated"): EventFragment;
}

export interface ExtensionInitialisedEventObject {}
export type ExtensionInitialisedEvent = TypedEvent<
  [],
  ExtensionInitialisedEventObject
>;

export type ExtensionInitialisedEventFilter =
  TypedEventFilter<ExtensionInitialisedEvent>;

export interface LogSetAuthorityEventObject {
  authority: string;
}
export type LogSetAuthorityEvent = TypedEvent<
  [string],
  LogSetAuthorityEventObject
>;

export type LogSetAuthorityEventFilter = TypedEventFilter<LogSetAuthorityEvent>;

export interface LogSetOwnerEventObject {
  owner: string;
}
export type LogSetOwnerEvent = TypedEvent<[string], LogSetOwnerEventObject>;

export type LogSetOwnerEventFilter = TypedEventFilter<LogSetOwnerEvent>;

export interface MetaTransactionExecutedEventObject {
  user: string;
  relayerAddress: string;
  functionSignature: string;
}
export type MetaTransactionExecutedEvent = TypedEvent<
  [string, string, string],
  MetaTransactionExecutedEventObject
>;

export type MetaTransactionExecutedEventFilter =
  TypedEventFilter<MetaTransactionExecutedEvent>;

export interface PaymentTokenUpdatedEventObject {
  agent: string;
  streamingPaymentId: BigNumber;
  token: string;
  amount: BigNumber;
}
export type PaymentTokenUpdatedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  PaymentTokenUpdatedEventObject
>;

export type PaymentTokenUpdatedEventFilter =
  TypedEventFilter<PaymentTokenUpdatedEvent>;

export interface StreamingPaymentClaimedEventObject {
  agent: string;
  streamingPaymentId: BigNumber;
  token: string;
  amount: BigNumber;
}
export type StreamingPaymentClaimedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  StreamingPaymentClaimedEventObject
>;

export type StreamingPaymentClaimedEventFilter =
  TypedEventFilter<StreamingPaymentClaimedEvent>;

export interface StreamingPaymentCreatedEventObject {
  agent: string;
  streamingPaymentId: BigNumber;
}
export type StreamingPaymentCreatedEvent = TypedEvent<
  [string, BigNumber],
  StreamingPaymentCreatedEventObject
>;

export type StreamingPaymentCreatedEventFilter =
  TypedEventFilter<StreamingPaymentCreatedEvent>;

export interface StreamingPayments extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StreamingPaymentsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    authority(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Main function to be called when user wants to execute meta transaction. The actual function to be called should be passed as param with name functionSignature Here the basic signature recovery is being used. Signature is expected to be generated using personal_sign method.
     * @param _payload Function call to make via meta transaction
     * @param _sigR R part of the signature
     * @param _sigS S part of the signature
     * @param _sigV V part of the signature
     * @param _user Address of user trying to do meta transaction
     */
    executeMetaTransaction(
      _user: string,
      _payload: BytesLike,
      _sigR: BytesLike,
      _sigS: BytesLike,
      _sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCapabilityRoles(
      _sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getColony(overrides?: CallOverrides): Promise<[string]>;

    getDeprecated(overrides?: CallOverrides): Promise<[boolean]>;

    getMetatransactionNonce(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setAuthority(
      authority_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      owner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verify(
      _owner: string,
      _nonce: BigNumberish,
      _chainId: BigNumberish,
      _payload: BytesLike,
      _sigR: BytesLike,
      _sigS: BytesLike,
      _sigV: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Returns the identifier of the extension
     */
    identifier(
      overrides?: CallOverrides
    ): Promise<[string] & { _identifier: string }>;

    /**
     * Returns the version of the extension
     */
    version(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _version: BigNumber }>;

    /**
     * Configures the extension
     * @param _colony The colony in which the extension holds permissions
     */
    install(
      _colony: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Called when upgrading the extension
     */
    finishUpgrade(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Called when deprecating (or undeprecating) the extension
     * @param _deprecated Indicates whether the extension should be deprecated or undeprecated
     */
    deprecate(
      _deprecated: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Called when uninstalling the extension
     */
    uninstall(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Creates a new streaming payment
     * @param _adminChildSkillIndex The index linking the adminPermissionDomainId to the domainId
     * @param _adminPermissionDomainId The domain in which the caller holds the admin permission
     * @param _amounts The amounts to be paid out (per _interval of time)
     * @param _domainId The domain out of which the streaming payment will be paid
     * @param _endTime The time at which the payment ends paying out
     * @param _fundingChildSkillIndex The index linking the fundingPermissionDomainId to the domainId
     * @param _fundingPermissionDomainId The domain in which the caller holds the funding permission
     * @param _interval The period of time over which _amounts are paid out
     * @param _recipient The recipient of the streaming payment
     * @param _startTime The time at which the payment begins paying out
     * @param _tokens The tokens to be paid out
     */
    create(
      _fundingPermissionDomainId: BigNumberish,
      _fundingChildSkillIndex: BigNumberish,
      _adminPermissionDomainId: BigNumberish,
      _adminChildSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _interval: BigNumberish,
      _recipient: string,
      _tokens: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Claim a streaming payment
     * @param _childSkillIndex The index linking the permissionDomainId to the domainId the payment is in
     * @param _fromChildSkillIndex The linking the domainId to the fromPot domain
     * @param _id The id of the streaming payment
     * @param _permissionDomainId The domain in which the extension holds the funding & admin permissions
     * @param _toChildSkillIndex The linking the domainId to the toPot domain
     * @param _tokens The tokens to be paid out
     */
    claim(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _id: BigNumberish,
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Add a new token/amount pair
     * @param _amount The amount to pay out
     * @param _fundingChildSkillIndex The index linking the fundingPermissionDomainId to the domainId
     * @param _fundingPermissionDomainId The domain in which the caller holds the funding permission
     * @param _id The id of the streaming payment
     * @param _token The address of the token
     */
    addToken(
      _fundingPermissionDomainId: BigNumberish,
      _fundingChildSkillIndex: BigNumberish,
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Update the token amount to be paid out. Claims existing payout prior to the change
     * @param _amount The new amount to pay out
     * @param _childSkillIndex The index linking the permissionDomainId to the domainId
     * @param _fromChildSkillIndex The linking the domainId to the fromPot domain
     * @param _fundingChildSkillIndex The index linking the fundingPermissionDomainId to the domainId
     * @param _fundingPermissionDomainId The domain in which the caller holds the funding permission
     * @param _id The id of the streaming payment
     * @param _permissionDomainId The domain in which the extension holds the funding & admin permissions
     * @param _toChildSkillIndex The linking the domainId to the toPot domain
     * @param _token The address of the token
     */
    setTokenAmount(
      _fundingPermissionDomainId: BigNumberish,
      _fundingChildSkillIndex: BigNumberish,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Update the startTime, only if the current startTime is in the future
     * @param _adminChildSkillIndex The index linking the adminPermissionDomainId to the domainId
     * @param _adminPermissionDomainId The domain in which the caller holds the admin permission
     * @param _id The id of the streaming payment
     * @param _startTime The new startTime to set
     */
    setStartTime(
      _adminPermissionDomainId: BigNumberish,
      _adminChildSkillIndex: BigNumberish,
      _id: BigNumberish,
      _startTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Update the endTime, only if the new endTime is in the future
     * @param _adminChildSkillIndex The index linking the adminPermissionDomainId to the domainId
     * @param _adminPermissionDomainId The domain in which the caller holds the admin permission
     * @param _endTime The new endTime to set
     * @param _id The id of the streaming payment
     */
    setEndTime(
      _adminPermissionDomainId: BigNumberish,
      _adminChildSkillIndex: BigNumberish,
      _id: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Cancel the streaming payment, specifically by setting endTime to block.timestamp
     * @param _adminChildSkillIndex The index linking the adminPermissionDomainId to the domainId
     * @param _adminPermissionDomainId The domain in which the caller holds the admin permission
     * @param _id The id of the streaming payment
     */
    cancel(
      _adminPermissionDomainId: BigNumberish,
      _adminChildSkillIndex: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Cancel the streaming payment, specifically by setting endTime to block.timestamp, and waive claim to specified tokens already earned. Only callable by the recipient.
     * @param _id The id of the streaming payment
     * @param _tokens The tokens to waive any claims to.
     */
    cancelAndWaive(
      _id: BigNumberish,
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Get the streaming payment struct by Id
     * @param _id The id of the streaming payment
     */
    getStreamingPayment(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [StreamingPayments.StreamingPaymentStructOutput] & {
        streamingPayment: StreamingPayments.StreamingPaymentStructOutput;
      }
    >;

    /**
     * Get the payment token struct by Id and token
     * @param _id The id of the streaming payment
     * @param _token The address of the token
     */
    getPaymentToken(
      _id: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<
      [StreamingPayments.PaymentTokenStructOutput] & {
        paymentToken: StreamingPayments.PaymentTokenStructOutput;
      }
    >;

    /**
     * Get the total number of streaming payments
     */
    getNumStreamingPayments(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numPayments: BigNumber }>;

    /**
     * Get the amount entitled to claim from the start of the stream
     * @param _id The id of the streaming payment
     * @param _token The address of the token
     */
    getAmountEntitledFromStart(
      _id: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;
  };

  authority(overrides?: CallOverrides): Promise<string>;

  /**
   * Main function to be called when user wants to execute meta transaction. The actual function to be called should be passed as param with name functionSignature Here the basic signature recovery is being used. Signature is expected to be generated using personal_sign method.
   * @param _payload Function call to make via meta transaction
   * @param _sigR R part of the signature
   * @param _sigS S part of the signature
   * @param _sigV V part of the signature
   * @param _user Address of user trying to do meta transaction
   */
  executeMetaTransaction(
    _user: string,
    _payload: BytesLike,
    _sigR: BytesLike,
    _sigS: BytesLike,
    _sigV: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCapabilityRoles(
    _sig: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  getColony(overrides?: CallOverrides): Promise<string>;

  getDeprecated(overrides?: CallOverrides): Promise<boolean>;

  getMetatransactionNonce(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  setAuthority(
    authority_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    owner_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verify(
    _owner: string,
    _nonce: BigNumberish,
    _chainId: BigNumberish,
    _payload: BytesLike,
    _sigR: BytesLike,
    _sigS: BytesLike,
    _sigV: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Returns the identifier of the extension
   */
  identifier(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the version of the extension
   */
  version(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Configures the extension
   * @param _colony The colony in which the extension holds permissions
   */
  install(
    _colony: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Called when upgrading the extension
   */
  finishUpgrade(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Called when deprecating (or undeprecating) the extension
   * @param _deprecated Indicates whether the extension should be deprecated or undeprecated
   */
  deprecate(
    _deprecated: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Called when uninstalling the extension
   */
  uninstall(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Creates a new streaming payment
   * @param _adminChildSkillIndex The index linking the adminPermissionDomainId to the domainId
   * @param _adminPermissionDomainId The domain in which the caller holds the admin permission
   * @param _amounts The amounts to be paid out (per _interval of time)
   * @param _domainId The domain out of which the streaming payment will be paid
   * @param _endTime The time at which the payment ends paying out
   * @param _fundingChildSkillIndex The index linking the fundingPermissionDomainId to the domainId
   * @param _fundingPermissionDomainId The domain in which the caller holds the funding permission
   * @param _interval The period of time over which _amounts are paid out
   * @param _recipient The recipient of the streaming payment
   * @param _startTime The time at which the payment begins paying out
   * @param _tokens The tokens to be paid out
   */
  create(
    _fundingPermissionDomainId: BigNumberish,
    _fundingChildSkillIndex: BigNumberish,
    _adminPermissionDomainId: BigNumberish,
    _adminChildSkillIndex: BigNumberish,
    _domainId: BigNumberish,
    _startTime: BigNumberish,
    _endTime: BigNumberish,
    _interval: BigNumberish,
    _recipient: string,
    _tokens: string[],
    _amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Claim a streaming payment
   * @param _childSkillIndex The index linking the permissionDomainId to the domainId the payment is in
   * @param _fromChildSkillIndex The linking the domainId to the fromPot domain
   * @param _id The id of the streaming payment
   * @param _permissionDomainId The domain in which the extension holds the funding & admin permissions
   * @param _toChildSkillIndex The linking the domainId to the toPot domain
   * @param _tokens The tokens to be paid out
   */
  claim(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _fromChildSkillIndex: BigNumberish,
    _toChildSkillIndex: BigNumberish,
    _id: BigNumberish,
    _tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Add a new token/amount pair
   * @param _amount The amount to pay out
   * @param _fundingChildSkillIndex The index linking the fundingPermissionDomainId to the domainId
   * @param _fundingPermissionDomainId The domain in which the caller holds the funding permission
   * @param _id The id of the streaming payment
   * @param _token The address of the token
   */
  addToken(
    _fundingPermissionDomainId: BigNumberish,
    _fundingChildSkillIndex: BigNumberish,
    _id: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Update the token amount to be paid out. Claims existing payout prior to the change
   * @param _amount The new amount to pay out
   * @param _childSkillIndex The index linking the permissionDomainId to the domainId
   * @param _fromChildSkillIndex The linking the domainId to the fromPot domain
   * @param _fundingChildSkillIndex The index linking the fundingPermissionDomainId to the domainId
   * @param _fundingPermissionDomainId The domain in which the caller holds the funding permission
   * @param _id The id of the streaming payment
   * @param _permissionDomainId The domain in which the extension holds the funding & admin permissions
   * @param _toChildSkillIndex The linking the domainId to the toPot domain
   * @param _token The address of the token
   */
  setTokenAmount(
    _fundingPermissionDomainId: BigNumberish,
    _fundingChildSkillIndex: BigNumberish,
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _fromChildSkillIndex: BigNumberish,
    _toChildSkillIndex: BigNumberish,
    _id: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Update the startTime, only if the current startTime is in the future
   * @param _adminChildSkillIndex The index linking the adminPermissionDomainId to the domainId
   * @param _adminPermissionDomainId The domain in which the caller holds the admin permission
   * @param _id The id of the streaming payment
   * @param _startTime The new startTime to set
   */
  setStartTime(
    _adminPermissionDomainId: BigNumberish,
    _adminChildSkillIndex: BigNumberish,
    _id: BigNumberish,
    _startTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Update the endTime, only if the new endTime is in the future
   * @param _adminChildSkillIndex The index linking the adminPermissionDomainId to the domainId
   * @param _adminPermissionDomainId The domain in which the caller holds the admin permission
   * @param _endTime The new endTime to set
   * @param _id The id of the streaming payment
   */
  setEndTime(
    _adminPermissionDomainId: BigNumberish,
    _adminChildSkillIndex: BigNumberish,
    _id: BigNumberish,
    _endTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Cancel the streaming payment, specifically by setting endTime to block.timestamp
   * @param _adminChildSkillIndex The index linking the adminPermissionDomainId to the domainId
   * @param _adminPermissionDomainId The domain in which the caller holds the admin permission
   * @param _id The id of the streaming payment
   */
  cancel(
    _adminPermissionDomainId: BigNumberish,
    _adminChildSkillIndex: BigNumberish,
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Cancel the streaming payment, specifically by setting endTime to block.timestamp, and waive claim to specified tokens already earned. Only callable by the recipient.
   * @param _id The id of the streaming payment
   * @param _tokens The tokens to waive any claims to.
   */
  cancelAndWaive(
    _id: BigNumberish,
    _tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Get the streaming payment struct by Id
   * @param _id The id of the streaming payment
   */
  getStreamingPayment(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<StreamingPayments.StreamingPaymentStructOutput>;

  /**
   * Get the payment token struct by Id and token
   * @param _id The id of the streaming payment
   * @param _token The address of the token
   */
  getPaymentToken(
    _id: BigNumberish,
    _token: string,
    overrides?: CallOverrides
  ): Promise<StreamingPayments.PaymentTokenStructOutput>;

  /**
   * Get the total number of streaming payments
   */
  getNumStreamingPayments(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Get the amount entitled to claim from the start of the stream
   * @param _id The id of the streaming payment
   * @param _token The address of the token
   */
  getAmountEntitledFromStart(
    _id: BigNumberish,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    authority(overrides?: CallOverrides): Promise<string>;

    /**
     * Main function to be called when user wants to execute meta transaction. The actual function to be called should be passed as param with name functionSignature Here the basic signature recovery is being used. Signature is expected to be generated using personal_sign method.
     * @param _payload Function call to make via meta transaction
     * @param _sigR R part of the signature
     * @param _sigS S part of the signature
     * @param _sigV V part of the signature
     * @param _user Address of user trying to do meta transaction
     */
    executeMetaTransaction(
      _user: string,
      _payload: BytesLike,
      _sigR: BytesLike,
      _sigS: BytesLike,
      _sigV: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getCapabilityRoles(
      _sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getColony(overrides?: CallOverrides): Promise<string>;

    getDeprecated(overrides?: CallOverrides): Promise<boolean>;

    getMetatransactionNonce(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    setAuthority(authority_: string, overrides?: CallOverrides): Promise<void>;

    setOwner(owner_: string, overrides?: CallOverrides): Promise<void>;

    verify(
      _owner: string,
      _nonce: BigNumberish,
      _chainId: BigNumberish,
      _payload: BytesLike,
      _sigR: BytesLike,
      _sigS: BytesLike,
      _sigV: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Returns the identifier of the extension
     */
    identifier(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the version of the extension
     */
    version(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Configures the extension
     * @param _colony The colony in which the extension holds permissions
     */
    install(_colony: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Called when upgrading the extension
     */
    finishUpgrade(overrides?: CallOverrides): Promise<void>;

    /**
     * Called when deprecating (or undeprecating) the extension
     * @param _deprecated Indicates whether the extension should be deprecated or undeprecated
     */
    deprecate(_deprecated: boolean, overrides?: CallOverrides): Promise<void>;

    /**
     * Called when uninstalling the extension
     */
    uninstall(overrides?: CallOverrides): Promise<void>;

    /**
     * Creates a new streaming payment
     * @param _adminChildSkillIndex The index linking the adminPermissionDomainId to the domainId
     * @param _adminPermissionDomainId The domain in which the caller holds the admin permission
     * @param _amounts The amounts to be paid out (per _interval of time)
     * @param _domainId The domain out of which the streaming payment will be paid
     * @param _endTime The time at which the payment ends paying out
     * @param _fundingChildSkillIndex The index linking the fundingPermissionDomainId to the domainId
     * @param _fundingPermissionDomainId The domain in which the caller holds the funding permission
     * @param _interval The period of time over which _amounts are paid out
     * @param _recipient The recipient of the streaming payment
     * @param _startTime The time at which the payment begins paying out
     * @param _tokens The tokens to be paid out
     */
    create(
      _fundingPermissionDomainId: BigNumberish,
      _fundingChildSkillIndex: BigNumberish,
      _adminPermissionDomainId: BigNumberish,
      _adminChildSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _interval: BigNumberish,
      _recipient: string,
      _tokens: string[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Claim a streaming payment
     * @param _childSkillIndex The index linking the permissionDomainId to the domainId the payment is in
     * @param _fromChildSkillIndex The linking the domainId to the fromPot domain
     * @param _id The id of the streaming payment
     * @param _permissionDomainId The domain in which the extension holds the funding & admin permissions
     * @param _toChildSkillIndex The linking the domainId to the toPot domain
     * @param _tokens The tokens to be paid out
     */
    claim(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _id: BigNumberish,
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Add a new token/amount pair
     * @param _amount The amount to pay out
     * @param _fundingChildSkillIndex The index linking the fundingPermissionDomainId to the domainId
     * @param _fundingPermissionDomainId The domain in which the caller holds the funding permission
     * @param _id The id of the streaming payment
     * @param _token The address of the token
     */
    addToken(
      _fundingPermissionDomainId: BigNumberish,
      _fundingChildSkillIndex: BigNumberish,
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Update the token amount to be paid out. Claims existing payout prior to the change
     * @param _amount The new amount to pay out
     * @param _childSkillIndex The index linking the permissionDomainId to the domainId
     * @param _fromChildSkillIndex The linking the domainId to the fromPot domain
     * @param _fundingChildSkillIndex The index linking the fundingPermissionDomainId to the domainId
     * @param _fundingPermissionDomainId The domain in which the caller holds the funding permission
     * @param _id The id of the streaming payment
     * @param _permissionDomainId The domain in which the extension holds the funding & admin permissions
     * @param _toChildSkillIndex The linking the domainId to the toPot domain
     * @param _token The address of the token
     */
    setTokenAmount(
      _fundingPermissionDomainId: BigNumberish,
      _fundingChildSkillIndex: BigNumberish,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Update the startTime, only if the current startTime is in the future
     * @param _adminChildSkillIndex The index linking the adminPermissionDomainId to the domainId
     * @param _adminPermissionDomainId The domain in which the caller holds the admin permission
     * @param _id The id of the streaming payment
     * @param _startTime The new startTime to set
     */
    setStartTime(
      _adminPermissionDomainId: BigNumberish,
      _adminChildSkillIndex: BigNumberish,
      _id: BigNumberish,
      _startTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Update the endTime, only if the new endTime is in the future
     * @param _adminChildSkillIndex The index linking the adminPermissionDomainId to the domainId
     * @param _adminPermissionDomainId The domain in which the caller holds the admin permission
     * @param _endTime The new endTime to set
     * @param _id The id of the streaming payment
     */
    setEndTime(
      _adminPermissionDomainId: BigNumberish,
      _adminChildSkillIndex: BigNumberish,
      _id: BigNumberish,
      _endTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Cancel the streaming payment, specifically by setting endTime to block.timestamp
     * @param _adminChildSkillIndex The index linking the adminPermissionDomainId to the domainId
     * @param _adminPermissionDomainId The domain in which the caller holds the admin permission
     * @param _id The id of the streaming payment
     */
    cancel(
      _adminPermissionDomainId: BigNumberish,
      _adminChildSkillIndex: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Cancel the streaming payment, specifically by setting endTime to block.timestamp, and waive claim to specified tokens already earned. Only callable by the recipient.
     * @param _id The id of the streaming payment
     * @param _tokens The tokens to waive any claims to.
     */
    cancelAndWaive(
      _id: BigNumberish,
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Get the streaming payment struct by Id
     * @param _id The id of the streaming payment
     */
    getStreamingPayment(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<StreamingPayments.StreamingPaymentStructOutput>;

    /**
     * Get the payment token struct by Id and token
     * @param _id The id of the streaming payment
     * @param _token The address of the token
     */
    getPaymentToken(
      _id: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<StreamingPayments.PaymentTokenStructOutput>;

    /**
     * Get the total number of streaming payments
     */
    getNumStreamingPayments(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the amount entitled to claim from the start of the stream
     * @param _id The id of the streaming payment
     * @param _token The address of the token
     */
    getAmountEntitledFromStart(
      _id: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "ExtensionInitialised()"(): ExtensionInitialisedEventFilter;
    ExtensionInitialised(): ExtensionInitialisedEventFilter;

    "LogSetAuthority(address)"(
      authority?: string | null
    ): LogSetAuthorityEventFilter;
    LogSetAuthority(authority?: string | null): LogSetAuthorityEventFilter;

    "LogSetOwner(address)"(owner?: string | null): LogSetOwnerEventFilter;
    LogSetOwner(owner?: string | null): LogSetOwnerEventFilter;

    "MetaTransactionExecuted(address,address,bytes)"(
      user?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;
    MetaTransactionExecuted(
      user?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;

    "PaymentTokenUpdated(address,uint256,address,uint256)"(
      agent?: null,
      streamingPaymentId?: BigNumberish | null,
      token?: null,
      amount?: null
    ): PaymentTokenUpdatedEventFilter;
    PaymentTokenUpdated(
      agent?: null,
      streamingPaymentId?: BigNumberish | null,
      token?: null,
      amount?: null
    ): PaymentTokenUpdatedEventFilter;

    "StreamingPaymentClaimed(address,uint256,address,uint256)"(
      agent?: null,
      streamingPaymentId?: BigNumberish | null,
      token?: null,
      amount?: null
    ): StreamingPaymentClaimedEventFilter;
    StreamingPaymentClaimed(
      agent?: null,
      streamingPaymentId?: BigNumberish | null,
      token?: null,
      amount?: null
    ): StreamingPaymentClaimedEventFilter;

    "StreamingPaymentCreated(address,uint256)"(
      agent?: null,
      streamingPaymentId?: null
    ): StreamingPaymentCreatedEventFilter;
    StreamingPaymentCreated(
      agent?: null,
      streamingPaymentId?: null
    ): StreamingPaymentCreatedEventFilter;
  };

  estimateGas: {
    authority(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Main function to be called when user wants to execute meta transaction. The actual function to be called should be passed as param with name functionSignature Here the basic signature recovery is being used. Signature is expected to be generated using personal_sign method.
     * @param _payload Function call to make via meta transaction
     * @param _sigR R part of the signature
     * @param _sigS S part of the signature
     * @param _sigV V part of the signature
     * @param _user Address of user trying to do meta transaction
     */
    executeMetaTransaction(
      _user: string,
      _payload: BytesLike,
      _sigR: BytesLike,
      _sigS: BytesLike,
      _sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCapabilityRoles(
      _sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getColony(overrides?: CallOverrides): Promise<BigNumber>;

    getDeprecated(overrides?: CallOverrides): Promise<BigNumber>;

    getMetatransactionNonce(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setAuthority(
      authority_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      owner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verify(
      _owner: string,
      _nonce: BigNumberish,
      _chainId: BigNumberish,
      _payload: BytesLike,
      _sigR: BytesLike,
      _sigS: BytesLike,
      _sigV: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the identifier of the extension
     */
    identifier(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the version of the extension
     */
    version(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Configures the extension
     * @param _colony The colony in which the extension holds permissions
     */
    install(
      _colony: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Called when upgrading the extension
     */
    finishUpgrade(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Called when deprecating (or undeprecating) the extension
     * @param _deprecated Indicates whether the extension should be deprecated or undeprecated
     */
    deprecate(
      _deprecated: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Called when uninstalling the extension
     */
    uninstall(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Creates a new streaming payment
     * @param _adminChildSkillIndex The index linking the adminPermissionDomainId to the domainId
     * @param _adminPermissionDomainId The domain in which the caller holds the admin permission
     * @param _amounts The amounts to be paid out (per _interval of time)
     * @param _domainId The domain out of which the streaming payment will be paid
     * @param _endTime The time at which the payment ends paying out
     * @param _fundingChildSkillIndex The index linking the fundingPermissionDomainId to the domainId
     * @param _fundingPermissionDomainId The domain in which the caller holds the funding permission
     * @param _interval The period of time over which _amounts are paid out
     * @param _recipient The recipient of the streaming payment
     * @param _startTime The time at which the payment begins paying out
     * @param _tokens The tokens to be paid out
     */
    create(
      _fundingPermissionDomainId: BigNumberish,
      _fundingChildSkillIndex: BigNumberish,
      _adminPermissionDomainId: BigNumberish,
      _adminChildSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _interval: BigNumberish,
      _recipient: string,
      _tokens: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Claim a streaming payment
     * @param _childSkillIndex The index linking the permissionDomainId to the domainId the payment is in
     * @param _fromChildSkillIndex The linking the domainId to the fromPot domain
     * @param _id The id of the streaming payment
     * @param _permissionDomainId The domain in which the extension holds the funding & admin permissions
     * @param _toChildSkillIndex The linking the domainId to the toPot domain
     * @param _tokens The tokens to be paid out
     */
    claim(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _id: BigNumberish,
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Add a new token/amount pair
     * @param _amount The amount to pay out
     * @param _fundingChildSkillIndex The index linking the fundingPermissionDomainId to the domainId
     * @param _fundingPermissionDomainId The domain in which the caller holds the funding permission
     * @param _id The id of the streaming payment
     * @param _token The address of the token
     */
    addToken(
      _fundingPermissionDomainId: BigNumberish,
      _fundingChildSkillIndex: BigNumberish,
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Update the token amount to be paid out. Claims existing payout prior to the change
     * @param _amount The new amount to pay out
     * @param _childSkillIndex The index linking the permissionDomainId to the domainId
     * @param _fromChildSkillIndex The linking the domainId to the fromPot domain
     * @param _fundingChildSkillIndex The index linking the fundingPermissionDomainId to the domainId
     * @param _fundingPermissionDomainId The domain in which the caller holds the funding permission
     * @param _id The id of the streaming payment
     * @param _permissionDomainId The domain in which the extension holds the funding & admin permissions
     * @param _toChildSkillIndex The linking the domainId to the toPot domain
     * @param _token The address of the token
     */
    setTokenAmount(
      _fundingPermissionDomainId: BigNumberish,
      _fundingChildSkillIndex: BigNumberish,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Update the startTime, only if the current startTime is in the future
     * @param _adminChildSkillIndex The index linking the adminPermissionDomainId to the domainId
     * @param _adminPermissionDomainId The domain in which the caller holds the admin permission
     * @param _id The id of the streaming payment
     * @param _startTime The new startTime to set
     */
    setStartTime(
      _adminPermissionDomainId: BigNumberish,
      _adminChildSkillIndex: BigNumberish,
      _id: BigNumberish,
      _startTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Update the endTime, only if the new endTime is in the future
     * @param _adminChildSkillIndex The index linking the adminPermissionDomainId to the domainId
     * @param _adminPermissionDomainId The domain in which the caller holds the admin permission
     * @param _endTime The new endTime to set
     * @param _id The id of the streaming payment
     */
    setEndTime(
      _adminPermissionDomainId: BigNumberish,
      _adminChildSkillIndex: BigNumberish,
      _id: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Cancel the streaming payment, specifically by setting endTime to block.timestamp
     * @param _adminChildSkillIndex The index linking the adminPermissionDomainId to the domainId
     * @param _adminPermissionDomainId The domain in which the caller holds the admin permission
     * @param _id The id of the streaming payment
     */
    cancel(
      _adminPermissionDomainId: BigNumberish,
      _adminChildSkillIndex: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Cancel the streaming payment, specifically by setting endTime to block.timestamp, and waive claim to specified tokens already earned. Only callable by the recipient.
     * @param _id The id of the streaming payment
     * @param _tokens The tokens to waive any claims to.
     */
    cancelAndWaive(
      _id: BigNumberish,
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Get the streaming payment struct by Id
     * @param _id The id of the streaming payment
     */
    getStreamingPayment(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get the payment token struct by Id and token
     * @param _id The id of the streaming payment
     * @param _token The address of the token
     */
    getPaymentToken(
      _id: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get the total number of streaming payments
     */
    getNumStreamingPayments(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the amount entitled to claim from the start of the stream
     * @param _id The id of the streaming payment
     * @param _token The address of the token
     */
    getAmountEntitledFromStart(
      _id: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Main function to be called when user wants to execute meta transaction. The actual function to be called should be passed as param with name functionSignature Here the basic signature recovery is being used. Signature is expected to be generated using personal_sign method.
     * @param _payload Function call to make via meta transaction
     * @param _sigR R part of the signature
     * @param _sigS S part of the signature
     * @param _sigV V part of the signature
     * @param _user Address of user trying to do meta transaction
     */
    executeMetaTransaction(
      _user: string,
      _payload: BytesLike,
      _sigR: BytesLike,
      _sigS: BytesLike,
      _sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCapabilityRoles(
      _sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getColony(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDeprecated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMetatransactionNonce(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAuthority(
      authority_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      owner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verify(
      _owner: string,
      _nonce: BigNumberish,
      _chainId: BigNumberish,
      _payload: BytesLike,
      _sigR: BytesLike,
      _sigS: BytesLike,
      _sigV: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the identifier of the extension
     */
    identifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the version of the extension
     */
    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Configures the extension
     * @param _colony The colony in which the extension holds permissions
     */
    install(
      _colony: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Called when upgrading the extension
     */
    finishUpgrade(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Called when deprecating (or undeprecating) the extension
     * @param _deprecated Indicates whether the extension should be deprecated or undeprecated
     */
    deprecate(
      _deprecated: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Called when uninstalling the extension
     */
    uninstall(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Creates a new streaming payment
     * @param _adminChildSkillIndex The index linking the adminPermissionDomainId to the domainId
     * @param _adminPermissionDomainId The domain in which the caller holds the admin permission
     * @param _amounts The amounts to be paid out (per _interval of time)
     * @param _domainId The domain out of which the streaming payment will be paid
     * @param _endTime The time at which the payment ends paying out
     * @param _fundingChildSkillIndex The index linking the fundingPermissionDomainId to the domainId
     * @param _fundingPermissionDomainId The domain in which the caller holds the funding permission
     * @param _interval The period of time over which _amounts are paid out
     * @param _recipient The recipient of the streaming payment
     * @param _startTime The time at which the payment begins paying out
     * @param _tokens The tokens to be paid out
     */
    create(
      _fundingPermissionDomainId: BigNumberish,
      _fundingChildSkillIndex: BigNumberish,
      _adminPermissionDomainId: BigNumberish,
      _adminChildSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _interval: BigNumberish,
      _recipient: string,
      _tokens: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Claim a streaming payment
     * @param _childSkillIndex The index linking the permissionDomainId to the domainId the payment is in
     * @param _fromChildSkillIndex The linking the domainId to the fromPot domain
     * @param _id The id of the streaming payment
     * @param _permissionDomainId The domain in which the extension holds the funding & admin permissions
     * @param _toChildSkillIndex The linking the domainId to the toPot domain
     * @param _tokens The tokens to be paid out
     */
    claim(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _id: BigNumberish,
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Add a new token/amount pair
     * @param _amount The amount to pay out
     * @param _fundingChildSkillIndex The index linking the fundingPermissionDomainId to the domainId
     * @param _fundingPermissionDomainId The domain in which the caller holds the funding permission
     * @param _id The id of the streaming payment
     * @param _token The address of the token
     */
    addToken(
      _fundingPermissionDomainId: BigNumberish,
      _fundingChildSkillIndex: BigNumberish,
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Update the token amount to be paid out. Claims existing payout prior to the change
     * @param _amount The new amount to pay out
     * @param _childSkillIndex The index linking the permissionDomainId to the domainId
     * @param _fromChildSkillIndex The linking the domainId to the fromPot domain
     * @param _fundingChildSkillIndex The index linking the fundingPermissionDomainId to the domainId
     * @param _fundingPermissionDomainId The domain in which the caller holds the funding permission
     * @param _id The id of the streaming payment
     * @param _permissionDomainId The domain in which the extension holds the funding & admin permissions
     * @param _toChildSkillIndex The linking the domainId to the toPot domain
     * @param _token The address of the token
     */
    setTokenAmount(
      _fundingPermissionDomainId: BigNumberish,
      _fundingChildSkillIndex: BigNumberish,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Update the startTime, only if the current startTime is in the future
     * @param _adminChildSkillIndex The index linking the adminPermissionDomainId to the domainId
     * @param _adminPermissionDomainId The domain in which the caller holds the admin permission
     * @param _id The id of the streaming payment
     * @param _startTime The new startTime to set
     */
    setStartTime(
      _adminPermissionDomainId: BigNumberish,
      _adminChildSkillIndex: BigNumberish,
      _id: BigNumberish,
      _startTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Update the endTime, only if the new endTime is in the future
     * @param _adminChildSkillIndex The index linking the adminPermissionDomainId to the domainId
     * @param _adminPermissionDomainId The domain in which the caller holds the admin permission
     * @param _endTime The new endTime to set
     * @param _id The id of the streaming payment
     */
    setEndTime(
      _adminPermissionDomainId: BigNumberish,
      _adminChildSkillIndex: BigNumberish,
      _id: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Cancel the streaming payment, specifically by setting endTime to block.timestamp
     * @param _adminChildSkillIndex The index linking the adminPermissionDomainId to the domainId
     * @param _adminPermissionDomainId The domain in which the caller holds the admin permission
     * @param _id The id of the streaming payment
     */
    cancel(
      _adminPermissionDomainId: BigNumberish,
      _adminChildSkillIndex: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Cancel the streaming payment, specifically by setting endTime to block.timestamp, and waive claim to specified tokens already earned. Only callable by the recipient.
     * @param _id The id of the streaming payment
     * @param _tokens The tokens to waive any claims to.
     */
    cancelAndWaive(
      _id: BigNumberish,
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Get the streaming payment struct by Id
     * @param _id The id of the streaming payment
     */
    getStreamingPayment(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get the payment token struct by Id and token
     * @param _id The id of the streaming payment
     * @param _token The address of the token
     */
    getPaymentToken(
      _id: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get the total number of streaming payments
     */
    getNumStreamingPayments(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get the amount entitled to claim from the start of the stream
     * @param _id The id of the streaming payment
     * @param _token The address of the token
     */
    getAmountEntitledFromStart(
      _id: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
