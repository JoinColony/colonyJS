/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface VotingReputationInterface extends Interface {
  functions: {
    authority: TypedFunctionDescription<{ encode([]: []): string }>;

    createMotion: TypedFunctionDescription<{
      encode([
        _domainId,
        _childSkillIndex,
        _altTarget,
        _action,
        _key,
        _value,
        _branchMask,
        _siblings,
      ]: [
        BigNumberish,
        BigNumberish,
        string,
        Arrayish,
        Arrayish,
        Arrayish,
        BigNumberish,
        Arrayish[]
      ]): string;
    }>;

    deprecate: TypedFunctionDescription<{
      encode([_deprecated]: [boolean]): string;
    }>;

    escalateMotion: TypedFunctionDescription<{
      encode([
        _motionId,
        _newDomainId,
        _childSkillIndex,
        _key,
        _value,
        _branchMask,
        _siblings,
      ]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        Arrayish,
        Arrayish,
        BigNumberish,
        Arrayish[]
      ]): string;
    }>;

    executeMetaTransaction: TypedFunctionDescription<{
      encode([_user, _payload, _sigR, _sigS, _sigV]: [
        string,
        Arrayish,
        Arrayish,
        Arrayish,
        BigNumberish
      ]): string;
    }>;

    failingExecutionAllowed: TypedFunctionDescription<{
      encode([_motionId]: [BigNumberish]): string;
    }>;

    finalizeMotion: TypedFunctionDescription<{
      encode([_motionId]: [BigNumberish]): string;
    }>;

    finalizeMotionWithoutFailure: TypedFunctionDescription<{
      encode([_motionId]: [BigNumberish]): string;
    }>;

    finishUpgrade: TypedFunctionDescription<{ encode([]: []): string }>;

    getActionSummary: TypedFunctionDescription<{
      encode([_action, _altTarget]: [Arrayish, string]): string;
    }>;

    getCapabilityRoles: TypedFunctionDescription<{
      encode([_sig]: [Arrayish]): string;
    }>;

    getColony: TypedFunctionDescription<{ encode([]: []): string }>;

    getDeprecated: TypedFunctionDescription<{ encode([]: []): string }>;

    getEscalationPeriod: TypedFunctionDescription<{ encode([]: []): string }>;

    getExpenditureMotionCount: TypedFunctionDescription<{
      encode([_structHash]: [Arrayish]): string;
    }>;

    getExpenditureMotionLock: TypedFunctionDescription<{
      encode([_expenditureId]: [BigNumberish]): string;
    }>;

    getExpenditurePastVote: TypedFunctionDescription<{
      encode([_expenditureId]: [BigNumberish]): string;
    }>;

    getExpenditurePastVotes_DEPRECATED: TypedFunctionDescription<{
      encode([_slotSignature]: [Arrayish]): string;
    }>;

    getMaxVoteFraction: TypedFunctionDescription<{ encode([]: []): string }>;

    getMetatransactionNonce: TypedFunctionDescription<{
      encode([_userAddress]: [string]): string;
    }>;

    getMotion: TypedFunctionDescription<{
      encode([_motionId]: [BigNumberish]): string;
    }>;

    getMotionCount: TypedFunctionDescription<{ encode([]: []): string }>;

    getMotionState: TypedFunctionDescription<{
      encode([_motionId]: [BigNumberish]): string;
    }>;

    getRevealPeriod: TypedFunctionDescription<{ encode([]: []): string }>;

    getStake: TypedFunctionDescription<{
      encode([_motionId, _staker, _vote]: [
        BigNumberish,
        string,
        BigNumberish
      ]): string;
    }>;

    getStakePeriod: TypedFunctionDescription<{ encode([]: []): string }>;

    getSubmitPeriod: TypedFunctionDescription<{ encode([]: []): string }>;

    getTotalStakeFraction: TypedFunctionDescription<{ encode([]: []): string }>;

    getUserMinStakeFraction: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    getVoterReward: TypedFunctionDescription<{
      encode([_motionId, _voterRep]: [BigNumberish, BigNumberish]): string;
    }>;

    getVoterRewardFraction: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    getVoterRewardRange: TypedFunctionDescription<{
      encode([_motionId, _voterRep, _voterAddress]: [
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    identifier: TypedFunctionDescription<{ encode([]: []): string }>;

    initialise: TypedFunctionDescription<{
      encode([
        _totalStakeFraction,
        _voterRewardFraction,
        _userMinStakeFraction,
        _maxVoteFraction,
        _stakePeriod,
        _submitPeriod,
        _revealPeriod,
        _escalationPeriod,
      ]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    install: TypedFunctionDescription<{ encode([_colony]: [string]): string }>;

    multicall: TypedFunctionDescription<{
      encode([data]: [Arrayish[]]): string;
    }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    revealVote: TypedFunctionDescription<{
      encode([_motionId, _salt, _vote, _key, _value, _branchMask, _siblings]: [
        BigNumberish,
        Arrayish,
        BigNumberish,
        Arrayish,
        Arrayish,
        BigNumberish,
        Arrayish[]
      ]): string;
    }>;

    setAuthority: TypedFunctionDescription<{
      encode([authority_]: [string]): string;
    }>;

    setOwner: TypedFunctionDescription<{ encode([owner_]: [string]): string }>;

    submitVote: TypedFunctionDescription<{
      encode([_motionId, _voteSecret, _key, _value, _branchMask, _siblings]: [
        BigNumberish,
        Arrayish,
        Arrayish,
        Arrayish,
        BigNumberish,
        Arrayish[]
      ]): string;
    }>;

    uninstall: TypedFunctionDescription<{ encode([]: []): string }>;

    verify: TypedFunctionDescription<{
      encode([_user, _nonce, _chainId, _payload, _sigR, _sigS, _sigV]: [
        string,
        BigNumberish,
        BigNumberish,
        Arrayish,
        Arrayish,
        Arrayish,
        BigNumberish
      ]): string;
    }>;

    version: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    ExtensionInitialised: TypedEventDescription<{
      encodeTopics([]: []): string[];
    }>;

    LogSetAuthority: TypedEventDescription<{
      encodeTopics([authority]: [string | null]): string[];
    }>;

    LogSetOwner: TypedEventDescription<{
      encodeTopics([owner]: [string | null]): string[];
    }>;

    MetaTransactionExecuted: TypedEventDescription<{
      encodeTopics([user, relayerAddress, functionSignature]: [
        null,
        null,
        null
      ]): string[];
    }>;

    MotionCreated: TypedEventDescription<{
      encodeTopics([motionId, creator, domainId]: [
        BigNumberish | null,
        null,
        BigNumberish | null
      ]): string[];
    }>;

    MotionEscalated: TypedEventDescription<{
      encodeTopics([motionId, escalator, domainId, newDomainId]: [
        BigNumberish | null,
        null,
        BigNumberish | null,
        BigNumberish | null
      ]): string[];
    }>;

    MotionEventSet: TypedEventDescription<{
      encodeTopics([motionId, eventIndex]: [
        BigNumberish | null,
        null
      ]): string[];
    }>;

    MotionFinalized: TypedEventDescription<{
      encodeTopics([motionId, action, executed]: [
        BigNumberish | null,
        null,
        null
      ]): string[];
    }>;

    MotionRewardClaimed: TypedEventDescription<{
      encodeTopics([motionId, staker, vote, amount]: [
        BigNumberish | null,
        string | null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    MotionStaked: TypedEventDescription<{
      encodeTopics([motionId, staker, vote, amount]: [
        BigNumberish | null,
        string | null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    MotionVoteRevealed: TypedEventDescription<{
      encodeTopics([motionId, voter, vote]: [
        BigNumberish | null,
        string | null,
        BigNumberish | null
      ]): string[];
    }>;

    MotionVoteSubmitted: TypedEventDescription<{
      encodeTopics([motionId, voter]: [
        BigNumberish | null,
        string | null
      ]): string[];
    }>;
  };
}

export class VotingReputation extends Contract {
  connect(signerOrProvider: Signer | Provider | string): VotingReputation;
  attach(addressOrName: string): VotingReputation;
  deployed(): Promise<VotingReputation>;

  on(event: EventFilter | string, listener: Listener): VotingReputation;
  once(event: EventFilter | string, listener: Listener): VotingReputation;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): VotingReputation;
  removeAllListeners(eventName: EventFilter | string): VotingReputation;
  removeListener(eventName: any, listener: Listener): VotingReputation;

  interface: VotingReputationInterface;

  functions: {
    authority(overrides?: TransactionOverrides): Promise<string>;

    "authority()"(overrides?: TransactionOverrides): Promise<string>;

    createMotion(
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _altTarget: string,
      _action: Arrayish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "createMotion(uint256,uint256,address,bytes,bytes,bytes,uint256,bytes32[])"(
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _altTarget: string,
      _action: Arrayish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    deprecate(
      _deprecated: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "deprecate(bool)"(
      _deprecated: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    escalateMotion(
      _motionId: BigNumberish,
      _newDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "escalateMotion(uint256,uint256,uint256,bytes,bytes,uint256,bytes32[])"(
      _motionId: BigNumberish,
      _newDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    executeMetaTransaction(
      _user: string,
      _payload: Arrayish,
      _sigR: Arrayish,
      _sigS: Arrayish,
      _sigV: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(
      _user: string,
      _payload: Arrayish,
      _sigR: Arrayish,
      _sigS: Arrayish,
      _sigV: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    failingExecutionAllowed(
      _motionId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "failingExecutionAllowed(uint256)"(
      _motionId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    finalizeMotion(
      _motionId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "finalizeMotion(uint256)"(
      _motionId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    finalizeMotionWithoutFailure(
      _motionId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "finalizeMotionWithoutFailure(uint256)"(
      _motionId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    finishUpgrade(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "finishUpgrade()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getActionSummary(
      _action: Arrayish,
      _altTarget: string,
      overrides?: TransactionOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        sig: string;
        domainSkillId: BigNumber;
        expenditureId: BigNumber;
      }
    >;

    "getActionSummary(bytes,address)"(
      _action: Arrayish,
      _altTarget: string,
      overrides?: TransactionOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        sig: string;
        domainSkillId: BigNumber;
        expenditureId: BigNumber;
      }
    >;

    getCapabilityRoles(
      _sig: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "getCapabilityRoles(bytes4)"(
      _sig: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    getColony(overrides?: TransactionOverrides): Promise<string>;

    "getColony()"(overrides?: TransactionOverrides): Promise<string>;

    getDeprecated(overrides?: TransactionOverrides): Promise<boolean>;

    "getDeprecated()"(overrides?: TransactionOverrides): Promise<boolean>;

    getEscalationPeriod(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getEscalationPeriod()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getExpenditureMotionCount(
      _structHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getExpenditureMotionCount(bytes32)"(
      _structHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getExpenditureMotionLock(
      _expenditureId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getExpenditureMotionLock(uint256)"(
      _expenditureId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getExpenditurePastVote(
      _expenditureId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getExpenditurePastVote(uint256)"(
      _expenditureId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getExpenditurePastVotes_DEPRECATED(
      _slotSignature: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getExpenditurePastVotes_DEPRECATED(bytes32)"(
      _slotSignature: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getMaxVoteFraction(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getMaxVoteFraction()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getMetatransactionNonce(
      _userAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getMetatransactionNonce(address)"(
      _userAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getMotion(
      _motionId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [
        BigNumber[],
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[],
        BigNumber[],
        BigNumber[],
        boolean,
        boolean,
        string,
        string,
        string
      ] & {
        events: BigNumber[];
        rootHash: string;
        domainId: BigNumber;
        skillId: BigNumber;
        skillRep: BigNumber;
        repSubmitted: BigNumber;
        paidVoterComp: BigNumber;
        pastVoterComp: BigNumber[];
        stakes: BigNumber[];
        votes: BigNumber[];
        escalated: boolean;
        finalized: boolean;
        altTarget: string;
        sig: string;
        action: string;
      }
    >;

    "getMotion(uint256)"(
      _motionId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [
        BigNumber[],
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[],
        BigNumber[],
        BigNumber[],
        boolean,
        boolean,
        string,
        string,
        string
      ] & {
        events: BigNumber[];
        rootHash: string;
        domainId: BigNumber;
        skillId: BigNumber;
        skillRep: BigNumber;
        repSubmitted: BigNumber;
        paidVoterComp: BigNumber;
        pastVoterComp: BigNumber[];
        stakes: BigNumber[];
        votes: BigNumber[];
        escalated: boolean;
        finalized: boolean;
        altTarget: string;
        sig: string;
        action: string;
      }
    >;

    getMotionCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getMotionCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getMotionState(
      _motionId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<number>;

    "getMotionState(uint256)"(
      _motionId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<number>;

    getRevealPeriod(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getRevealPeriod()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getStake(
      _motionId: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getStake(uint256,address,uint256)"(
      _motionId: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getStakePeriod(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getStakePeriod()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getSubmitPeriod(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getSubmitPeriod()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getTotalStakeFraction(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getTotalStakeFraction()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getUserMinStakeFraction(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getUserMinStakeFraction()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getVoterReward(
      _motionId: BigNumberish,
      _voterRep: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getVoterReward(uint256,uint256)"(
      _motionId: BigNumberish,
      _voterRep: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getVoterRewardFraction(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getVoterRewardFraction()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getVoterRewardRange(
      _motionId: BigNumberish,
      _voterRep: BigNumberish,
      _voterAddress: string,
      overrides?: TransactionOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _rewardMin: BigNumber; _rewardMax: BigNumber }
    >;

    "getVoterRewardRange(uint256,uint256,address)"(
      _motionId: BigNumberish,
      _voterRep: BigNumberish,
      _voterAddress: string,
      overrides?: TransactionOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _rewardMin: BigNumber; _rewardMax: BigNumber }
    >;

    identifier(overrides?: TransactionOverrides): Promise<string>;

    "identifier()"(overrides?: TransactionOverrides): Promise<string>;

    initialise(
      _totalStakeFraction: BigNumberish,
      _voterRewardFraction: BigNumberish,
      _userMinStakeFraction: BigNumberish,
      _maxVoteFraction: BigNumberish,
      _stakePeriod: BigNumberish,
      _submitPeriod: BigNumberish,
      _revealPeriod: BigNumberish,
      _escalationPeriod: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "initialise(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      _totalStakeFraction: BigNumberish,
      _voterRewardFraction: BigNumberish,
      _userMinStakeFraction: BigNumberish,
      _maxVoteFraction: BigNumberish,
      _stakePeriod: BigNumberish,
      _submitPeriod: BigNumberish,
      _revealPeriod: BigNumberish,
      _escalationPeriod: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    install(
      _colony: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "install(address)"(
      _colony: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    multicall(
      data: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "multicall(bytes[])"(
      data: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    owner(overrides?: TransactionOverrides): Promise<string>;

    "owner()"(overrides?: TransactionOverrides): Promise<string>;

    revealVote(
      _motionId: BigNumberish,
      _salt: Arrayish,
      _vote: BigNumberish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "revealVote(uint256,bytes32,uint256,bytes,bytes,uint256,bytes32[])"(
      _motionId: BigNumberish,
      _salt: Arrayish,
      _vote: BigNumberish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setAuthority(
      authority_: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setAuthority(address)"(
      authority_: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setOwner(
      owner_: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setOwner(address)"(
      owner_: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    submitVote(
      _motionId: BigNumberish,
      _voteSecret: Arrayish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "submitVote(uint256,bytes32,bytes,bytes,uint256,bytes32[])"(
      _motionId: BigNumberish,
      _voteSecret: Arrayish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    uninstall(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    "uninstall()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    verify(
      _user: string,
      _nonce: BigNumberish,
      _chainId: BigNumberish,
      _payload: Arrayish,
      _sigR: Arrayish,
      _sigS: Arrayish,
      _sigV: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "verify(address,uint256,uint256,bytes,bytes32,bytes32,uint8)"(
      _user: string,
      _nonce: BigNumberish,
      _chainId: BigNumberish,
      _payload: Arrayish,
      _sigR: Arrayish,
      _sigS: Arrayish,
      _sigV: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    version(overrides?: TransactionOverrides): Promise<BigNumber>;

    "version()"(overrides?: TransactionOverrides): Promise<BigNumber>;
  };

  authority(overrides?: TransactionOverrides): Promise<string>;

  "authority()"(overrides?: TransactionOverrides): Promise<string>;

  createMotion(
    _domainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _altTarget: string,
    _action: Arrayish,
    _key: Arrayish,
    _value: Arrayish,
    _branchMask: BigNumberish,
    _siblings: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "createMotion(uint256,uint256,address,bytes,bytes,bytes,uint256,bytes32[])"(
    _domainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _altTarget: string,
    _action: Arrayish,
    _key: Arrayish,
    _value: Arrayish,
    _branchMask: BigNumberish,
    _siblings: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  deprecate(
    _deprecated: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "deprecate(bool)"(
    _deprecated: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  escalateMotion(
    _motionId: BigNumberish,
    _newDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _key: Arrayish,
    _value: Arrayish,
    _branchMask: BigNumberish,
    _siblings: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "escalateMotion(uint256,uint256,uint256,bytes,bytes,uint256,bytes32[])"(
    _motionId: BigNumberish,
    _newDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _key: Arrayish,
    _value: Arrayish,
    _branchMask: BigNumberish,
    _siblings: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  executeMetaTransaction(
    _user: string,
    _payload: Arrayish,
    _sigR: Arrayish,
    _sigS: Arrayish,
    _sigV: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(
    _user: string,
    _payload: Arrayish,
    _sigR: Arrayish,
    _sigS: Arrayish,
    _sigV: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  failingExecutionAllowed(
    _motionId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "failingExecutionAllowed(uint256)"(
    _motionId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  finalizeMotion(
    _motionId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "finalizeMotion(uint256)"(
    _motionId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  finalizeMotionWithoutFailure(
    _motionId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "finalizeMotionWithoutFailure(uint256)"(
    _motionId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  finishUpgrade(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  "finishUpgrade()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getActionSummary(
    _action: Arrayish,
    _altTarget: string,
    overrides?: TransactionOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      sig: string;
      domainSkillId: BigNumber;
      expenditureId: BigNumber;
    }
  >;

  "getActionSummary(bytes,address)"(
    _action: Arrayish,
    _altTarget: string,
    overrides?: TransactionOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      sig: string;
      domainSkillId: BigNumber;
      expenditureId: BigNumber;
    }
  >;

  getCapabilityRoles(
    _sig: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "getCapabilityRoles(bytes4)"(
    _sig: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  getColony(overrides?: TransactionOverrides): Promise<string>;

  "getColony()"(overrides?: TransactionOverrides): Promise<string>;

  getDeprecated(overrides?: TransactionOverrides): Promise<boolean>;

  "getDeprecated()"(overrides?: TransactionOverrides): Promise<boolean>;

  getEscalationPeriod(overrides?: TransactionOverrides): Promise<BigNumber>;

  "getEscalationPeriod()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  getExpenditureMotionCount(
    _structHash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getExpenditureMotionCount(bytes32)"(
    _structHash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getExpenditureMotionLock(
    _expenditureId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getExpenditureMotionLock(uint256)"(
    _expenditureId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getExpenditurePastVote(
    _expenditureId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getExpenditurePastVote(uint256)"(
    _expenditureId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getExpenditurePastVotes_DEPRECATED(
    _slotSignature: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getExpenditurePastVotes_DEPRECATED(bytes32)"(
    _slotSignature: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getMaxVoteFraction(overrides?: TransactionOverrides): Promise<BigNumber>;

  "getMaxVoteFraction()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  getMetatransactionNonce(
    _userAddress: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getMetatransactionNonce(address)"(
    _userAddress: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getMotion(
    _motionId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [
      BigNumber[],
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber[],
      BigNumber[],
      BigNumber[],
      boolean,
      boolean,
      string,
      string,
      string
    ] & {
      events: BigNumber[];
      rootHash: string;
      domainId: BigNumber;
      skillId: BigNumber;
      skillRep: BigNumber;
      repSubmitted: BigNumber;
      paidVoterComp: BigNumber;
      pastVoterComp: BigNumber[];
      stakes: BigNumber[];
      votes: BigNumber[];
      escalated: boolean;
      finalized: boolean;
      altTarget: string;
      sig: string;
      action: string;
    }
  >;

  "getMotion(uint256)"(
    _motionId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [
      BigNumber[],
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber[],
      BigNumber[],
      BigNumber[],
      boolean,
      boolean,
      string,
      string,
      string
    ] & {
      events: BigNumber[];
      rootHash: string;
      domainId: BigNumber;
      skillId: BigNumber;
      skillRep: BigNumber;
      repSubmitted: BigNumber;
      paidVoterComp: BigNumber;
      pastVoterComp: BigNumber[];
      stakes: BigNumber[];
      votes: BigNumber[];
      escalated: boolean;
      finalized: boolean;
      altTarget: string;
      sig: string;
      action: string;
    }
  >;

  getMotionCount(overrides?: TransactionOverrides): Promise<BigNumber>;

  "getMotionCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  getMotionState(
    _motionId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<number>;

  "getMotionState(uint256)"(
    _motionId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<number>;

  getRevealPeriod(overrides?: TransactionOverrides): Promise<BigNumber>;

  "getRevealPeriod()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  getStake(
    _motionId: BigNumberish,
    _staker: string,
    _vote: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getStake(uint256,address,uint256)"(
    _motionId: BigNumberish,
    _staker: string,
    _vote: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getStakePeriod(overrides?: TransactionOverrides): Promise<BigNumber>;

  "getStakePeriod()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  getSubmitPeriod(overrides?: TransactionOverrides): Promise<BigNumber>;

  "getSubmitPeriod()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  getTotalStakeFraction(overrides?: TransactionOverrides): Promise<BigNumber>;

  "getTotalStakeFraction()"(
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getUserMinStakeFraction(overrides?: TransactionOverrides): Promise<BigNumber>;

  "getUserMinStakeFraction()"(
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getVoterReward(
    _motionId: BigNumberish,
    _voterRep: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getVoterReward(uint256,uint256)"(
    _motionId: BigNumberish,
    _voterRep: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getVoterRewardFraction(overrides?: TransactionOverrides): Promise<BigNumber>;

  "getVoterRewardFraction()"(
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getVoterRewardRange(
    _motionId: BigNumberish,
    _voterRep: BigNumberish,
    _voterAddress: string,
    overrides?: TransactionOverrides
  ): Promise<
    [BigNumber, BigNumber] & { _rewardMin: BigNumber; _rewardMax: BigNumber }
  >;

  "getVoterRewardRange(uint256,uint256,address)"(
    _motionId: BigNumberish,
    _voterRep: BigNumberish,
    _voterAddress: string,
    overrides?: TransactionOverrides
  ): Promise<
    [BigNumber, BigNumber] & { _rewardMin: BigNumber; _rewardMax: BigNumber }
  >;

  identifier(overrides?: TransactionOverrides): Promise<string>;

  "identifier()"(overrides?: TransactionOverrides): Promise<string>;

  initialise(
    _totalStakeFraction: BigNumberish,
    _voterRewardFraction: BigNumberish,
    _userMinStakeFraction: BigNumberish,
    _maxVoteFraction: BigNumberish,
    _stakePeriod: BigNumberish,
    _submitPeriod: BigNumberish,
    _revealPeriod: BigNumberish,
    _escalationPeriod: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "initialise(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
    _totalStakeFraction: BigNumberish,
    _voterRewardFraction: BigNumberish,
    _userMinStakeFraction: BigNumberish,
    _maxVoteFraction: BigNumberish,
    _stakePeriod: BigNumberish,
    _submitPeriod: BigNumberish,
    _revealPeriod: BigNumberish,
    _escalationPeriod: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  install(
    _colony: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "install(address)"(
    _colony: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  multicall(
    data: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "multicall(bytes[])"(
    data: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  owner(overrides?: TransactionOverrides): Promise<string>;

  "owner()"(overrides?: TransactionOverrides): Promise<string>;

  revealVote(
    _motionId: BigNumberish,
    _salt: Arrayish,
    _vote: BigNumberish,
    _key: Arrayish,
    _value: Arrayish,
    _branchMask: BigNumberish,
    _siblings: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "revealVote(uint256,bytes32,uint256,bytes,bytes,uint256,bytes32[])"(
    _motionId: BigNumberish,
    _salt: Arrayish,
    _vote: BigNumberish,
    _key: Arrayish,
    _value: Arrayish,
    _branchMask: BigNumberish,
    _siblings: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setAuthority(
    authority_: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setAuthority(address)"(
    authority_: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setOwner(
    owner_: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setOwner(address)"(
    owner_: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  submitVote(
    _motionId: BigNumberish,
    _voteSecret: Arrayish,
    _key: Arrayish,
    _value: Arrayish,
    _branchMask: BigNumberish,
    _siblings: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "submitVote(uint256,bytes32,bytes,bytes,uint256,bytes32[])"(
    _motionId: BigNumberish,
    _voteSecret: Arrayish,
    _key: Arrayish,
    _value: Arrayish,
    _branchMask: BigNumberish,
    _siblings: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  uninstall(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  "uninstall()"(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  verify(
    _user: string,
    _nonce: BigNumberish,
    _chainId: BigNumberish,
    _payload: Arrayish,
    _sigR: Arrayish,
    _sigS: Arrayish,
    _sigV: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "verify(address,uint256,uint256,bytes,bytes32,bytes32,uint8)"(
    _user: string,
    _nonce: BigNumberish,
    _chainId: BigNumberish,
    _payload: Arrayish,
    _sigR: Arrayish,
    _sigS: Arrayish,
    _sigV: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  version(overrides?: TransactionOverrides): Promise<BigNumber>;

  "version()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  filters: {
    ExtensionInitialised(): EventFilter;

    LogSetAuthority(authority: string | null): EventFilter;

    LogSetOwner(owner: string | null): EventFilter;

    MetaTransactionExecuted(
      user: null,
      relayerAddress: null,
      functionSignature: null
    ): EventFilter;

    MotionCreated(
      motionId: BigNumberish | null,
      creator: null,
      domainId: BigNumberish | null
    ): EventFilter;

    MotionEscalated(
      motionId: BigNumberish | null,
      escalator: null,
      domainId: BigNumberish | null,
      newDomainId: BigNumberish | null
    ): EventFilter;

    MotionEventSet(
      motionId: BigNumberish | null,
      eventIndex: null
    ): EventFilter;

    MotionFinalized(
      motionId: BigNumberish | null,
      action: null,
      executed: null
    ): EventFilter;

    MotionRewardClaimed(
      motionId: BigNumberish | null,
      staker: string | null,
      vote: BigNumberish | null,
      amount: null
    ): EventFilter;

    MotionStaked(
      motionId: BigNumberish | null,
      staker: string | null,
      vote: BigNumberish | null,
      amount: null
    ): EventFilter;

    MotionVoteRevealed(
      motionId: BigNumberish | null,
      voter: string | null,
      vote: BigNumberish | null
    ): EventFilter;

    MotionVoteSubmitted(
      motionId: BigNumberish | null,
      voter: string | null
    ): EventFilter;
  };

  estimate: {
    authority(overrides?: TransactionOverrides): Promise<BigNumber>;

    "authority()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    createMotion(
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _altTarget: string,
      _action: Arrayish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "createMotion(uint256,uint256,address,bytes,bytes,bytes,uint256,bytes32[])"(
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _altTarget: string,
      _action: Arrayish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    deprecate(
      _deprecated: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "deprecate(bool)"(
      _deprecated: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    escalateMotion(
      _motionId: BigNumberish,
      _newDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "escalateMotion(uint256,uint256,uint256,bytes,bytes,uint256,bytes32[])"(
      _motionId: BigNumberish,
      _newDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    executeMetaTransaction(
      _user: string,
      _payload: Arrayish,
      _sigR: Arrayish,
      _sigS: Arrayish,
      _sigV: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(
      _user: string,
      _payload: Arrayish,
      _sigR: Arrayish,
      _sigS: Arrayish,
      _sigV: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    failingExecutionAllowed(
      _motionId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "failingExecutionAllowed(uint256)"(
      _motionId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    finalizeMotion(
      _motionId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "finalizeMotion(uint256)"(
      _motionId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    finalizeMotionWithoutFailure(
      _motionId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "finalizeMotionWithoutFailure(uint256)"(
      _motionId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    finishUpgrade(overrides?: TransactionOverrides): Promise<BigNumber>;

    "finishUpgrade()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getActionSummary(
      _action: Arrayish,
      _altTarget: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getActionSummary(bytes,address)"(
      _action: Arrayish,
      _altTarget: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getCapabilityRoles(
      _sig: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getCapabilityRoles(bytes4)"(
      _sig: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getColony(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getColony()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getDeprecated(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getDeprecated()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getEscalationPeriod(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getEscalationPeriod()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getExpenditureMotionCount(
      _structHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getExpenditureMotionCount(bytes32)"(
      _structHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getExpenditureMotionLock(
      _expenditureId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getExpenditureMotionLock(uint256)"(
      _expenditureId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getExpenditurePastVote(
      _expenditureId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getExpenditurePastVote(uint256)"(
      _expenditureId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getExpenditurePastVotes_DEPRECATED(
      _slotSignature: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getExpenditurePastVotes_DEPRECATED(bytes32)"(
      _slotSignature: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getMaxVoteFraction(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getMaxVoteFraction()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getMetatransactionNonce(
      _userAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getMetatransactionNonce(address)"(
      _userAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getMotion(
      _motionId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getMotion(uint256)"(
      _motionId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getMotionCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getMotionCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getMotionState(
      _motionId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getMotionState(uint256)"(
      _motionId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getRevealPeriod(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getRevealPeriod()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getStake(
      _motionId: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getStake(uint256,address,uint256)"(
      _motionId: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getStakePeriod(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getStakePeriod()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getSubmitPeriod(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getSubmitPeriod()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getTotalStakeFraction(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getTotalStakeFraction()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getUserMinStakeFraction(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getUserMinStakeFraction()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getVoterReward(
      _motionId: BigNumberish,
      _voterRep: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getVoterReward(uint256,uint256)"(
      _motionId: BigNumberish,
      _voterRep: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getVoterRewardFraction(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getVoterRewardFraction()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getVoterRewardRange(
      _motionId: BigNumberish,
      _voterRep: BigNumberish,
      _voterAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getVoterRewardRange(uint256,uint256,address)"(
      _motionId: BigNumberish,
      _voterRep: BigNumberish,
      _voterAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    identifier(overrides?: TransactionOverrides): Promise<BigNumber>;

    "identifier()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    initialise(
      _totalStakeFraction: BigNumberish,
      _voterRewardFraction: BigNumberish,
      _userMinStakeFraction: BigNumberish,
      _maxVoteFraction: BigNumberish,
      _stakePeriod: BigNumberish,
      _submitPeriod: BigNumberish,
      _revealPeriod: BigNumberish,
      _escalationPeriod: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "initialise(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      _totalStakeFraction: BigNumberish,
      _voterRewardFraction: BigNumberish,
      _userMinStakeFraction: BigNumberish,
      _maxVoteFraction: BigNumberish,
      _stakePeriod: BigNumberish,
      _submitPeriod: BigNumberish,
      _revealPeriod: BigNumberish,
      _escalationPeriod: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    install(
      _colony: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "install(address)"(
      _colony: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    multicall(
      data: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "multicall(bytes[])"(
      data: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    owner(overrides?: TransactionOverrides): Promise<BigNumber>;

    "owner()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    revealVote(
      _motionId: BigNumberish,
      _salt: Arrayish,
      _vote: BigNumberish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "revealVote(uint256,bytes32,uint256,bytes,bytes,uint256,bytes32[])"(
      _motionId: BigNumberish,
      _salt: Arrayish,
      _vote: BigNumberish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setAuthority(
      authority_: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setAuthority(address)"(
      authority_: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setOwner(
      owner_: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setOwner(address)"(
      owner_: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    submitVote(
      _motionId: BigNumberish,
      _voteSecret: Arrayish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "submitVote(uint256,bytes32,bytes,bytes,uint256,bytes32[])"(
      _motionId: BigNumberish,
      _voteSecret: Arrayish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    uninstall(overrides?: TransactionOverrides): Promise<BigNumber>;

    "uninstall()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    verify(
      _user: string,
      _nonce: BigNumberish,
      _chainId: BigNumberish,
      _payload: Arrayish,
      _sigR: Arrayish,
      _sigS: Arrayish,
      _sigV: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "verify(address,uint256,uint256,bytes,bytes32,bytes32,uint8)"(
      _user: string,
      _nonce: BigNumberish,
      _chainId: BigNumberish,
      _payload: Arrayish,
      _sigR: Arrayish,
      _sigS: Arrayish,
      _sigV: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    version(overrides?: TransactionOverrides): Promise<BigNumber>;

    "version()"(overrides?: TransactionOverrides): Promise<BigNumber>;
  };
}
