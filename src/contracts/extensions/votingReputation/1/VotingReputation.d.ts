/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface VotingReputationInterface extends Interface {
  functions: {
    authority: TypedFunctionDescription<{ encode([]: []): string }>;

    getColony: TypedFunctionDescription<{ encode([]: []): string }>;

    getDeprecated: TypedFunctionDescription<{ encode([]: []): string }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    setAuthority: TypedFunctionDescription<{
      encode([authority_]: [string]): string;
    }>;

    setOwner: TypedFunctionDescription<{ encode([owner_]: [string]): string }>;

    identifier: TypedFunctionDescription<{ encode([]: []): string }>;

    version: TypedFunctionDescription<{ encode([]: []): string }>;

    install: TypedFunctionDescription<{ encode([_colony]: [string]): string }>;

    initialise: TypedFunctionDescription<{
      encode([
        _totalStakeFraction,
        _voterRewardFraction,
        _userMinStakeFraction,
        _maxVoteFraction,
        _stakePeriod,
        _submitPeriod,
        _revealPeriod,
        _escalationPeriod,
      ]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    finishUpgrade: TypedFunctionDescription<{ encode([]: []): string }>;

    deprecate: TypedFunctionDescription<{
      encode([_deprecated]: [boolean]): string;
    }>;

    uninstall: TypedFunctionDescription<{ encode([]: []): string }>;

    createRootMotion: TypedFunctionDescription<{
      encode([_altTarget, _action, _key, _value, _branchMask, _siblings]: [
        string,
        Arrayish,
        Arrayish,
        Arrayish,
        BigNumberish,
        Arrayish[]
      ]): string;
    }>;

    createDomainMotion: TypedFunctionDescription<{
      encode([
        _domainId,
        _childSkillIndex,
        _action,
        _key,
        _value,
        _branchMask,
        _siblings,
      ]: [
        BigNumberish,
        BigNumberish,
        Arrayish,
        Arrayish,
        Arrayish,
        BigNumberish,
        Arrayish[]
      ]): string;
    }>;

    stakeMotion: TypedFunctionDescription<{
      encode([
        _motionId,
        _permissionDomainId,
        _childSkillIndex,
        _vote,
        _amount,
        _key,
        _value,
        _branchMask,
        _siblings,
      ]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        Arrayish,
        Arrayish,
        BigNumberish,
        Arrayish[]
      ]): string;
    }>;

    submitVote: TypedFunctionDescription<{
      encode([_motionId, _voteSecret, _key, _value, _branchMask, _siblings]: [
        BigNumberish,
        Arrayish,
        Arrayish,
        Arrayish,
        BigNumberish,
        Arrayish[]
      ]): string;
    }>;

    revealVote: TypedFunctionDescription<{
      encode([_motionId, _salt, _vote, _key, _value, _branchMask, _siblings]: [
        BigNumberish,
        Arrayish,
        BigNumberish,
        Arrayish,
        Arrayish,
        BigNumberish,
        Arrayish[]
      ]): string;
    }>;

    escalateMotion: TypedFunctionDescription<{
      encode([
        _motionId,
        _newDomainId,
        _childSkillIndex,
        _key,
        _value,
        _branchMask,
        _siblings,
      ]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        Arrayish,
        Arrayish,
        BigNumberish,
        Arrayish[]
      ]): string;
    }>;

    finalizeMotion: TypedFunctionDescription<{
      encode([_motionId]: [BigNumberish]): string;
    }>;

    claimReward: TypedFunctionDescription<{
      encode([
        _motionId,
        _permissionDomainId,
        _childSkillIndex,
        _staker,
        _vote,
      ]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string,
        BigNumberish
      ]): string;
    }>;

    getTotalStakeFraction: TypedFunctionDescription<{ encode([]: []): string }>;

    getVoterRewardFraction: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    getUserMinStakeFraction: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    getMaxVoteFraction: TypedFunctionDescription<{ encode([]: []): string }>;

    getStakePeriod: TypedFunctionDescription<{ encode([]: []): string }>;

    getSubmitPeriod: TypedFunctionDescription<{ encode([]: []): string }>;

    getRevealPeriod: TypedFunctionDescription<{ encode([]: []): string }>;

    getEscalationPeriod: TypedFunctionDescription<{ encode([]: []): string }>;

    getMotionCount: TypedFunctionDescription<{ encode([]: []): string }>;

    getMotion: TypedFunctionDescription<{
      encode([_motionId]: [BigNumberish]): string;
    }>;

    getStake: TypedFunctionDescription<{
      encode([_motionId, _staker, _vote]: [
        BigNumberish,
        string,
        BigNumberish
      ]): string;
    }>;

    getExpenditureMotionCount: TypedFunctionDescription<{
      encode([_structHash]: [Arrayish]): string;
    }>;

    getExpenditurePastVote: TypedFunctionDescription<{
      encode([_actionHash]: [Arrayish]): string;
    }>;

    getMotionState: TypedFunctionDescription<{
      encode([_motionId]: [BigNumberish]): string;
    }>;

    getVoterReward: TypedFunctionDescription<{
      encode([_motionId, _voterRep]: [BigNumberish, BigNumberish]): string;
    }>;

    getStakerReward: TypedFunctionDescription<{
      encode([_motionId, _staker, _vote]: [
        BigNumberish,
        string,
        BigNumberish
      ]): string;
    }>;

    createClaimDelayAction: TypedFunctionDescription<{
      encode([action, value]: [Arrayish, BigNumberish]): string;
    }>;
  };

  events: {
    ExtensionInitialised: TypedEventDescription<{
      encodeTopics([]: []): string[];
    }>;

    LogSetAuthority: TypedEventDescription<{
      encodeTopics([authority]: [string | null]): string[];
    }>;

    LogSetOwner: TypedEventDescription<{
      encodeTopics([owner]: [string | null]): string[];
    }>;

    MotionCreated: TypedEventDescription<{
      encodeTopics([motionId, creator, domainId]: [
        BigNumberish | null,
        null,
        BigNumberish | null
      ]): string[];
    }>;

    MotionEscalated: TypedEventDescription<{
      encodeTopics([motionId, escalator, domainId, newDomainId]: [
        BigNumberish | null,
        null,
        BigNumberish | null,
        BigNumberish | null
      ]): string[];
    }>;

    MotionEventSet: TypedEventDescription<{
      encodeTopics([motionId, eventIndex]: [
        BigNumberish | null,
        null
      ]): string[];
    }>;

    MotionFinalized: TypedEventDescription<{
      encodeTopics([motionId, action, executed]: [
        BigNumberish | null,
        null,
        null
      ]): string[];
    }>;

    MotionRewardClaimed: TypedEventDescription<{
      encodeTopics([motionId, staker, vote, amount]: [
        BigNumberish | null,
        string | null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    MotionStaked: TypedEventDescription<{
      encodeTopics([motionId, staker, vote, amount]: [
        BigNumberish | null,
        string | null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    MotionVoteRevealed: TypedEventDescription<{
      encodeTopics([motionId, voter, vote]: [
        BigNumberish | null,
        string | null,
        BigNumberish | null
      ]): string[];
    }>;

    MotionVoteSubmitted: TypedEventDescription<{
      encodeTopics([motionId, voter]: [
        BigNumberish | null,
        string | null
      ]): string[];
    }>;
  };
}

export class VotingReputation extends Contract {
  connect(signerOrProvider: Signer | Provider | string): VotingReputation;
  attach(addressOrName: string): VotingReputation;
  deployed(): Promise<VotingReputation>;

  on(event: EventFilter | string, listener: Listener): VotingReputation;
  once(event: EventFilter | string, listener: Listener): VotingReputation;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): VotingReputation;
  removeAllListeners(eventName: EventFilter | string): VotingReputation;
  removeListener(eventName: any, listener: Listener): VotingReputation;

  interface: VotingReputationInterface;

  functions: {
    authority(overrides?: TransactionOverrides): Promise<string>;

    "authority()"(overrides?: TransactionOverrides): Promise<string>;

    getColony(overrides?: TransactionOverrides): Promise<string>;

    "getColony()"(overrides?: TransactionOverrides): Promise<string>;

    getDeprecated(overrides?: TransactionOverrides): Promise<boolean>;

    "getDeprecated()"(overrides?: TransactionOverrides): Promise<boolean>;

    owner(overrides?: TransactionOverrides): Promise<string>;

    "owner()"(overrides?: TransactionOverrides): Promise<string>;

    setAuthority(
      authority_: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setAuthority(address)"(
      authority_: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setOwner(
      owner_: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setOwner(address)"(
      owner_: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Returns the identifier of the extension
     */
    identifier(overrides?: TransactionOverrides): Promise<string>;

    /**
     * Returns the identifier of the extension
     */
    "identifier()"(overrides?: TransactionOverrides): Promise<string>;

    /**
     * Return the version number
     */
    version(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Return the version number
     */
    "version()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Install the extension
     * @param _colony Base colony for the installation
     */
    install(
      _colony: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Install the extension
     * @param _colony Base colony for the installation
     */
    "install(address)"(
      _colony: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Initialise the extension
     * @param _escalationPeriod The length of the escalation period in seconds
     * @param _maxVoteFraction The fraction of the domain's reputation which must submit for quick-end
     * @param _revealPeriod The length of the reveal period in seconds
     * @param _stakePeriod The length of the staking period in seconds
     * @param _submitPeriod The length of the submit period in seconds
     * @param _totalStakeFraction The fraction of the domain's reputation we need to stake
     * @param _userMinStakeFraction The minimum per-user stake as fraction of total stake
     * @param _voterRewardFraction The fraction of the total stake paid out to voters as rewards
     */
    initialise(
      _totalStakeFraction: BigNumberish,
      _voterRewardFraction: BigNumberish,
      _userMinStakeFraction: BigNumberish,
      _maxVoteFraction: BigNumberish,
      _stakePeriod: BigNumberish,
      _submitPeriod: BigNumberish,
      _revealPeriod: BigNumberish,
      _escalationPeriod: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Initialise the extension
     * @param _escalationPeriod The length of the escalation period in seconds
     * @param _maxVoteFraction The fraction of the domain's reputation which must submit for quick-end
     * @param _revealPeriod The length of the reveal period in seconds
     * @param _stakePeriod The length of the staking period in seconds
     * @param _submitPeriod The length of the submit period in seconds
     * @param _totalStakeFraction The fraction of the domain's reputation we need to stake
     * @param _userMinStakeFraction The minimum per-user stake as fraction of total stake
     * @param _voterRewardFraction The fraction of the total stake paid out to voters as rewards
     */
    "initialise(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      _totalStakeFraction: BigNumberish,
      _voterRewardFraction: BigNumberish,
      _userMinStakeFraction: BigNumberish,
      _maxVoteFraction: BigNumberish,
      _stakePeriod: BigNumberish,
      _submitPeriod: BigNumberish,
      _revealPeriod: BigNumberish,
      _escalationPeriod: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Called when upgrading the extension
     */
    finishUpgrade(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Called when upgrading the extension
     */
    "finishUpgrade()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Called when deprecating (or undeprecating) the extension
     */
    deprecate(
      _deprecated: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Called when deprecating (or undeprecating) the extension
     */
    "deprecate(bool)"(
      _deprecated: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Called when uninstalling the extension
     */
    uninstall(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    /**
     * Called when uninstalling the extension
     */
    "uninstall()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Create a motion in the root domain
     * @param _action A bytes array encoding a function call
     * @param _altTarget The contract to which we send the action (0x0 for the colony)
     * @param _branchMask The branchmask of the proof
     * @param _key Reputation tree key for the root domain
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the root domain
     */
    createRootMotion(
      _altTarget: string,
      _action: Arrayish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Create a motion in the root domain
     * @param _action A bytes array encoding a function call
     * @param _altTarget The contract to which we send the action (0x0 for the colony)
     * @param _branchMask The branchmask of the proof
     * @param _key Reputation tree key for the root domain
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the root domain
     */
    "createRootMotion(address,bytes,bytes,bytes,uint256,bytes32[])"(
      _altTarget: string,
      _action: Arrayish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Create a motion in any domain
     * @param _action A bytes array encoding a function call
     * @param _branchMask The branchmask of the proof
     * @param _childSkillIndex The childSkillIndex pointing to the domain of the action
     * @param _domainId The domain where we vote on the motion
     * @param _key Reputation tree key for the domain
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the domain
     */
    createDomainMotion(
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _action: Arrayish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Create a motion in any domain
     * @param _action A bytes array encoding a function call
     * @param _branchMask The branchmask of the proof
     * @param _childSkillIndex The childSkillIndex pointing to the domain of the action
     * @param _domainId The domain where we vote on the motion
     * @param _key Reputation tree key for the domain
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the domain
     */
    "createDomainMotion(uint256,uint256,bytes,bytes,bytes,uint256,bytes32[])"(
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _action: Arrayish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Stake on a motion
     * @param _amount The amount of tokens being staked
     * @param _branchMask The branchmask of the proof
     * @param _childSkillIndex For the domain in which the motion is occurring
     * @param _key Reputation tree key for the staker/domain
     * @param _motionId The id of the motion
     * @param _permissionDomainId The domain where the extension has the arbitration permission
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the staker/domain
     * @param _vote The side being supported (0 = NAY, 1 = YAY)
     */
    stakeMotion(
      _motionId: BigNumberish,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _vote: BigNumberish,
      _amount: BigNumberish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Stake on a motion
     * @param _amount The amount of tokens being staked
     * @param _branchMask The branchmask of the proof
     * @param _childSkillIndex For the domain in which the motion is occurring
     * @param _key Reputation tree key for the staker/domain
     * @param _motionId The id of the motion
     * @param _permissionDomainId The domain where the extension has the arbitration permission
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the staker/domain
     * @param _vote The side being supported (0 = NAY, 1 = YAY)
     */
    "stakeMotion(uint256,uint256,uint256,uint256,uint256,bytes,bytes,uint256,bytes32[])"(
      _motionId: BigNumberish,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _vote: BigNumberish,
      _amount: BigNumberish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Submit a vote secret for a motion
     * @param _branchMask The branchmask of the proof
     * @param _key Reputation tree key for the staker/domain
     * @param _motionId The id of the motion
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the staker/domain
     * @param _voteSecret The hashed vote secret
     */
    submitVote(
      _motionId: BigNumberish,
      _voteSecret: Arrayish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Submit a vote secret for a motion
     * @param _branchMask The branchmask of the proof
     * @param _key Reputation tree key for the staker/domain
     * @param _motionId The id of the motion
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the staker/domain
     * @param _voteSecret The hashed vote secret
     */
    "submitVote(uint256,bytes32,bytes,bytes,uint256,bytes32[])"(
      _motionId: BigNumberish,
      _voteSecret: Arrayish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Reveal a vote secret for a motion
     * @param _branchMask The branchmask of the proof
     * @param _key Reputation tree key for the staker/domain
     * @param _motionId The id of the motion
     * @param _salt The salt used to hash the vote
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the staker/domain
     * @param _vote The side being supported (0 = NAY, 1 = YAY)
     */
    revealVote(
      _motionId: BigNumberish,
      _salt: Arrayish,
      _vote: BigNumberish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Reveal a vote secret for a motion
     * @param _branchMask The branchmask of the proof
     * @param _key Reputation tree key for the staker/domain
     * @param _motionId The id of the motion
     * @param _salt The salt used to hash the vote
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the staker/domain
     * @param _vote The side being supported (0 = NAY, 1 = YAY)
     */
    "revealVote(uint256,bytes32,uint256,bytes,bytes,uint256,bytes32[])"(
      _motionId: BigNumberish,
      _salt: Arrayish,
      _vote: BigNumberish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Escalate a motion to a higher domain
     * @param _branchMask The branchmask of the proof
     * @param _childSkillIndex For the current domain, relative to the escalated domain
     * @param _key Reputation tree key for the new domain
     * @param _motionId The id of the motion
     * @param _newDomainId The desired domain of escalation
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the new domain
     */
    escalateMotion(
      _motionId: BigNumberish,
      _newDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Escalate a motion to a higher domain
     * @param _branchMask The branchmask of the proof
     * @param _childSkillIndex For the current domain, relative to the escalated domain
     * @param _key Reputation tree key for the new domain
     * @param _motionId The id of the motion
     * @param _newDomainId The desired domain of escalation
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the new domain
     */
    "escalateMotion(uint256,uint256,uint256,bytes,bytes,uint256,bytes32[])"(
      _motionId: BigNumberish,
      _newDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    finalizeMotion(
      _motionId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "finalizeMotion(uint256)"(
      _motionId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Claim the staker's reward
     * @param _childSkillIndex For the domain in which the motion is occurring
     * @param _motionId The id of the motion
     * @param _permissionDomainId The domain where the extension has the arbitration permission
     * @param _staker The staker whose reward is being claimed
     * @param _vote The side being supported (0 = NAY, 1 = YAY)
     */
    claimReward(
      _motionId: BigNumberish,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Claim the staker's reward
     * @param _childSkillIndex For the domain in which the motion is occurring
     * @param _motionId The id of the motion
     * @param _permissionDomainId The domain where the extension has the arbitration permission
     * @param _staker The staker whose reward is being claimed
     * @param _vote The side being supported (0 = NAY, 1 = YAY)
     */
    "claimReward(uint256,uint256,uint256,address,uint256)"(
      _motionId: BigNumberish,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Get the total stake fraction
     */
    getTotalStakeFraction(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the total stake fraction
     */
    "getTotalStakeFraction()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the voter reward fraction
     */
    getVoterRewardFraction(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the voter reward fraction
     */
    "getVoterRewardFraction()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the user min stake fraction
     */
    getUserMinStakeFraction(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the user min stake fraction
     */
    "getUserMinStakeFraction()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the max vote fraction
     */
    getMaxVoteFraction(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the max vote fraction
     */
    "getMaxVoteFraction()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the stake period
     */
    getStakePeriod(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the stake period
     */
    "getStakePeriod()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the submit period
     */
    getSubmitPeriod(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the submit period
     */
    "getSubmitPeriod()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the reveal period
     */
    getRevealPeriod(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the reveal period
     */
    "getRevealPeriod()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the escalation period
     */
    getEscalationPeriod(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the escalation period
     */
    "getEscalationPeriod()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the total motion count
     */
    getMotionCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the total motion count
     */
    "getMotionCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the data for a single motion
     * @param _motionId The id of the motion
     */
    getMotion(
      _motionId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [
        BigNumber[],
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[],
        BigNumber[],
        BigNumber[],
        boolean,
        boolean,
        string,
        string
      ] & {
        events: BigNumber[];
        rootHash: string;
        domainId: BigNumber;
        skillId: BigNumber;
        skillRep: BigNumber;
        repSubmitted: BigNumber;
        paidVoterComp: BigNumber;
        pastVoterComp: BigNumber[];
        stakes: BigNumber[];
        votes: BigNumber[];
        escalated: boolean;
        finalized: boolean;
        altTarget: string;
        action: string;
      }
    >;

    /**
     * Get the data for a single motion
     * @param _motionId The id of the motion
     */
    "getMotion(uint256)"(
      _motionId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [
        BigNumber[],
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[],
        BigNumber[],
        BigNumber[],
        boolean,
        boolean,
        string,
        string
      ] & {
        events: BigNumber[];
        rootHash: string;
        domainId: BigNumber;
        skillId: BigNumber;
        skillRep: BigNumber;
        repSubmitted: BigNumber;
        paidVoterComp: BigNumber;
        pastVoterComp: BigNumber[];
        stakes: BigNumber[];
        votes: BigNumber[];
        escalated: boolean;
        finalized: boolean;
        altTarget: string;
        action: string;
      }
    >;

    /**
     * Get a user's stake on a motion
     * @param _motionId The id of the motion
     * @param _staker The staker address
     * @param _vote The side being supported (0 = NAY, 1 = YAY)
     */
    getStake(
      _motionId: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get a user's stake on a motion
     * @param _motionId The id of the motion
     * @param _staker The staker address
     * @param _vote The side being supported (0 = NAY, 1 = YAY)
     */
    "getStake(uint256,address,uint256)"(
      _motionId: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the number of ongoing motions for a single expenditure / expenditure slot
     * @param _structHash The hash of the expenditureId or expenditureId*expenditureSlot
     */
    getExpenditureMotionCount(
      _structHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the number of ongoing motions for a single expenditure / expenditure slot
     * @param _structHash The hash of the expenditureId or expenditureId*expenditureSlot
     */
    "getExpenditureMotionCount(bytes32)"(
      _structHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the largest past vote on a single expenditure variable
     * @param _actionHash The hash of the particular expenditure action
     */
    getExpenditurePastVote(
      _actionHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the largest past vote on a single expenditure variable
     * @param _actionHash The hash of the particular expenditure action
     */
    "getExpenditurePastVote(bytes32)"(
      _actionHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the current state of the motion
     */
    getMotionState(
      _motionId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<number>;

    /**
     * Get the current state of the motion
     */
    "getMotionState(uint256)"(
      _motionId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<number>;

    /**
     * Get the voter reward
     * @param _motionId The id of the motion
     * @param _voterRep The reputation the voter has in the domain
     */
    getVoterReward(
      _motionId: BigNumberish,
      _voterRep: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the voter reward
     * @param _motionId The id of the motion
     * @param _voterRep The reputation the voter has in the domain
     */
    "getVoterReward(uint256,uint256)"(
      _motionId: BigNumberish,
      _voterRep: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the staker reward
     * @param _motionId The id of the motion
     * @param _staker The staker's address
     * @param _vote The vote (0 = NAY, 1 = YAY)
     */
    getStakerReward(
      _motionId: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<[BigNumber, BigNumber]>;

    /**
     * Get the staker reward
     * @param _motionId The id of the motion
     * @param _staker The staker's address
     * @param _vote The vote (0 = NAY, 1 = YAY)
     */
    "getStakerReward(uint256,address,uint256)"(
      _motionId: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<[BigNumber, BigNumber]>;

    createClaimDelayAction(
      action: Arrayish,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "createClaimDelayAction(bytes,uint256)"(
      action: Arrayish,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  authority(overrides?: TransactionOverrides): Promise<string>;

  "authority()"(overrides?: TransactionOverrides): Promise<string>;

  getColony(overrides?: TransactionOverrides): Promise<string>;

  "getColony()"(overrides?: TransactionOverrides): Promise<string>;

  getDeprecated(overrides?: TransactionOverrides): Promise<boolean>;

  "getDeprecated()"(overrides?: TransactionOverrides): Promise<boolean>;

  owner(overrides?: TransactionOverrides): Promise<string>;

  "owner()"(overrides?: TransactionOverrides): Promise<string>;

  setAuthority(
    authority_: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setAuthority(address)"(
    authority_: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setOwner(
    owner_: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setOwner(address)"(
    owner_: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Returns the identifier of the extension
   */
  identifier(overrides?: TransactionOverrides): Promise<string>;

  /**
   * Returns the identifier of the extension
   */
  "identifier()"(overrides?: TransactionOverrides): Promise<string>;

  /**
   * Return the version number
   */
  version(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Return the version number
   */
  "version()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Install the extension
   * @param _colony Base colony for the installation
   */
  install(
    _colony: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Install the extension
   * @param _colony Base colony for the installation
   */
  "install(address)"(
    _colony: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Initialise the extension
   * @param _escalationPeriod The length of the escalation period in seconds
   * @param _maxVoteFraction The fraction of the domain's reputation which must submit for quick-end
   * @param _revealPeriod The length of the reveal period in seconds
   * @param _stakePeriod The length of the staking period in seconds
   * @param _submitPeriod The length of the submit period in seconds
   * @param _totalStakeFraction The fraction of the domain's reputation we need to stake
   * @param _userMinStakeFraction The minimum per-user stake as fraction of total stake
   * @param _voterRewardFraction The fraction of the total stake paid out to voters as rewards
   */
  initialise(
    _totalStakeFraction: BigNumberish,
    _voterRewardFraction: BigNumberish,
    _userMinStakeFraction: BigNumberish,
    _maxVoteFraction: BigNumberish,
    _stakePeriod: BigNumberish,
    _submitPeriod: BigNumberish,
    _revealPeriod: BigNumberish,
    _escalationPeriod: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Initialise the extension
   * @param _escalationPeriod The length of the escalation period in seconds
   * @param _maxVoteFraction The fraction of the domain's reputation which must submit for quick-end
   * @param _revealPeriod The length of the reveal period in seconds
   * @param _stakePeriod The length of the staking period in seconds
   * @param _submitPeriod The length of the submit period in seconds
   * @param _totalStakeFraction The fraction of the domain's reputation we need to stake
   * @param _userMinStakeFraction The minimum per-user stake as fraction of total stake
   * @param _voterRewardFraction The fraction of the total stake paid out to voters as rewards
   */
  "initialise(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
    _totalStakeFraction: BigNumberish,
    _voterRewardFraction: BigNumberish,
    _userMinStakeFraction: BigNumberish,
    _maxVoteFraction: BigNumberish,
    _stakePeriod: BigNumberish,
    _submitPeriod: BigNumberish,
    _revealPeriod: BigNumberish,
    _escalationPeriod: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Called when upgrading the extension
   */
  finishUpgrade(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  /**
   * Called when upgrading the extension
   */
  "finishUpgrade()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Called when deprecating (or undeprecating) the extension
   */
  deprecate(
    _deprecated: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Called when deprecating (or undeprecating) the extension
   */
  "deprecate(bool)"(
    _deprecated: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Called when uninstalling the extension
   */
  uninstall(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  /**
   * Called when uninstalling the extension
   */
  "uninstall()"(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  /**
   * Create a motion in the root domain
   * @param _action A bytes array encoding a function call
   * @param _altTarget The contract to which we send the action (0x0 for the colony)
   * @param _branchMask The branchmask of the proof
   * @param _key Reputation tree key for the root domain
   * @param _siblings The siblings of the proof
   * @param _value Reputation tree value for the root domain
   */
  createRootMotion(
    _altTarget: string,
    _action: Arrayish,
    _key: Arrayish,
    _value: Arrayish,
    _branchMask: BigNumberish,
    _siblings: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Create a motion in the root domain
   * @param _action A bytes array encoding a function call
   * @param _altTarget The contract to which we send the action (0x0 for the colony)
   * @param _branchMask The branchmask of the proof
   * @param _key Reputation tree key for the root domain
   * @param _siblings The siblings of the proof
   * @param _value Reputation tree value for the root domain
   */
  "createRootMotion(address,bytes,bytes,bytes,uint256,bytes32[])"(
    _altTarget: string,
    _action: Arrayish,
    _key: Arrayish,
    _value: Arrayish,
    _branchMask: BigNumberish,
    _siblings: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Create a motion in any domain
   * @param _action A bytes array encoding a function call
   * @param _branchMask The branchmask of the proof
   * @param _childSkillIndex The childSkillIndex pointing to the domain of the action
   * @param _domainId The domain where we vote on the motion
   * @param _key Reputation tree key for the domain
   * @param _siblings The siblings of the proof
   * @param _value Reputation tree value for the domain
   */
  createDomainMotion(
    _domainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _action: Arrayish,
    _key: Arrayish,
    _value: Arrayish,
    _branchMask: BigNumberish,
    _siblings: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Create a motion in any domain
   * @param _action A bytes array encoding a function call
   * @param _branchMask The branchmask of the proof
   * @param _childSkillIndex The childSkillIndex pointing to the domain of the action
   * @param _domainId The domain where we vote on the motion
   * @param _key Reputation tree key for the domain
   * @param _siblings The siblings of the proof
   * @param _value Reputation tree value for the domain
   */
  "createDomainMotion(uint256,uint256,bytes,bytes,bytes,uint256,bytes32[])"(
    _domainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _action: Arrayish,
    _key: Arrayish,
    _value: Arrayish,
    _branchMask: BigNumberish,
    _siblings: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Stake on a motion
   * @param _amount The amount of tokens being staked
   * @param _branchMask The branchmask of the proof
   * @param _childSkillIndex For the domain in which the motion is occurring
   * @param _key Reputation tree key for the staker/domain
   * @param _motionId The id of the motion
   * @param _permissionDomainId The domain where the extension has the arbitration permission
   * @param _siblings The siblings of the proof
   * @param _value Reputation tree value for the staker/domain
   * @param _vote The side being supported (0 = NAY, 1 = YAY)
   */
  stakeMotion(
    _motionId: BigNumberish,
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _vote: BigNumberish,
    _amount: BigNumberish,
    _key: Arrayish,
    _value: Arrayish,
    _branchMask: BigNumberish,
    _siblings: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Stake on a motion
   * @param _amount The amount of tokens being staked
   * @param _branchMask The branchmask of the proof
   * @param _childSkillIndex For the domain in which the motion is occurring
   * @param _key Reputation tree key for the staker/domain
   * @param _motionId The id of the motion
   * @param _permissionDomainId The domain where the extension has the arbitration permission
   * @param _siblings The siblings of the proof
   * @param _value Reputation tree value for the staker/domain
   * @param _vote The side being supported (0 = NAY, 1 = YAY)
   */
  "stakeMotion(uint256,uint256,uint256,uint256,uint256,bytes,bytes,uint256,bytes32[])"(
    _motionId: BigNumberish,
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _vote: BigNumberish,
    _amount: BigNumberish,
    _key: Arrayish,
    _value: Arrayish,
    _branchMask: BigNumberish,
    _siblings: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Submit a vote secret for a motion
   * @param _branchMask The branchmask of the proof
   * @param _key Reputation tree key for the staker/domain
   * @param _motionId The id of the motion
   * @param _siblings The siblings of the proof
   * @param _value Reputation tree value for the staker/domain
   * @param _voteSecret The hashed vote secret
   */
  submitVote(
    _motionId: BigNumberish,
    _voteSecret: Arrayish,
    _key: Arrayish,
    _value: Arrayish,
    _branchMask: BigNumberish,
    _siblings: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Submit a vote secret for a motion
   * @param _branchMask The branchmask of the proof
   * @param _key Reputation tree key for the staker/domain
   * @param _motionId The id of the motion
   * @param _siblings The siblings of the proof
   * @param _value Reputation tree value for the staker/domain
   * @param _voteSecret The hashed vote secret
   */
  "submitVote(uint256,bytes32,bytes,bytes,uint256,bytes32[])"(
    _motionId: BigNumberish,
    _voteSecret: Arrayish,
    _key: Arrayish,
    _value: Arrayish,
    _branchMask: BigNumberish,
    _siblings: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Reveal a vote secret for a motion
   * @param _branchMask The branchmask of the proof
   * @param _key Reputation tree key for the staker/domain
   * @param _motionId The id of the motion
   * @param _salt The salt used to hash the vote
   * @param _siblings The siblings of the proof
   * @param _value Reputation tree value for the staker/domain
   * @param _vote The side being supported (0 = NAY, 1 = YAY)
   */
  revealVote(
    _motionId: BigNumberish,
    _salt: Arrayish,
    _vote: BigNumberish,
    _key: Arrayish,
    _value: Arrayish,
    _branchMask: BigNumberish,
    _siblings: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Reveal a vote secret for a motion
   * @param _branchMask The branchmask of the proof
   * @param _key Reputation tree key for the staker/domain
   * @param _motionId The id of the motion
   * @param _salt The salt used to hash the vote
   * @param _siblings The siblings of the proof
   * @param _value Reputation tree value for the staker/domain
   * @param _vote The side being supported (0 = NAY, 1 = YAY)
   */
  "revealVote(uint256,bytes32,uint256,bytes,bytes,uint256,bytes32[])"(
    _motionId: BigNumberish,
    _salt: Arrayish,
    _vote: BigNumberish,
    _key: Arrayish,
    _value: Arrayish,
    _branchMask: BigNumberish,
    _siblings: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Escalate a motion to a higher domain
   * @param _branchMask The branchmask of the proof
   * @param _childSkillIndex For the current domain, relative to the escalated domain
   * @param _key Reputation tree key for the new domain
   * @param _motionId The id of the motion
   * @param _newDomainId The desired domain of escalation
   * @param _siblings The siblings of the proof
   * @param _value Reputation tree value for the new domain
   */
  escalateMotion(
    _motionId: BigNumberish,
    _newDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _key: Arrayish,
    _value: Arrayish,
    _branchMask: BigNumberish,
    _siblings: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Escalate a motion to a higher domain
   * @param _branchMask The branchmask of the proof
   * @param _childSkillIndex For the current domain, relative to the escalated domain
   * @param _key Reputation tree key for the new domain
   * @param _motionId The id of the motion
   * @param _newDomainId The desired domain of escalation
   * @param _siblings The siblings of the proof
   * @param _value Reputation tree value for the new domain
   */
  "escalateMotion(uint256,uint256,uint256,bytes,bytes,uint256,bytes32[])"(
    _motionId: BigNumberish,
    _newDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _key: Arrayish,
    _value: Arrayish,
    _branchMask: BigNumberish,
    _siblings: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  finalizeMotion(
    _motionId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "finalizeMotion(uint256)"(
    _motionId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Claim the staker's reward
   * @param _childSkillIndex For the domain in which the motion is occurring
   * @param _motionId The id of the motion
   * @param _permissionDomainId The domain where the extension has the arbitration permission
   * @param _staker The staker whose reward is being claimed
   * @param _vote The side being supported (0 = NAY, 1 = YAY)
   */
  claimReward(
    _motionId: BigNumberish,
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _staker: string,
    _vote: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Claim the staker's reward
   * @param _childSkillIndex For the domain in which the motion is occurring
   * @param _motionId The id of the motion
   * @param _permissionDomainId The domain where the extension has the arbitration permission
   * @param _staker The staker whose reward is being claimed
   * @param _vote The side being supported (0 = NAY, 1 = YAY)
   */
  "claimReward(uint256,uint256,uint256,address,uint256)"(
    _motionId: BigNumberish,
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _staker: string,
    _vote: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Get the total stake fraction
   */
  getTotalStakeFraction(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Get the total stake fraction
   */
  "getTotalStakeFraction()"(
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Get the voter reward fraction
   */
  getVoterRewardFraction(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Get the voter reward fraction
   */
  "getVoterRewardFraction()"(
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Get the user min stake fraction
   */
  getUserMinStakeFraction(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Get the user min stake fraction
   */
  "getUserMinStakeFraction()"(
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Get the max vote fraction
   */
  getMaxVoteFraction(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Get the max vote fraction
   */
  "getMaxVoteFraction()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Get the stake period
   */
  getStakePeriod(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Get the stake period
   */
  "getStakePeriod()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Get the submit period
   */
  getSubmitPeriod(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Get the submit period
   */
  "getSubmitPeriod()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Get the reveal period
   */
  getRevealPeriod(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Get the reveal period
   */
  "getRevealPeriod()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Get the escalation period
   */
  getEscalationPeriod(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Get the escalation period
   */
  "getEscalationPeriod()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Get the total motion count
   */
  getMotionCount(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Get the total motion count
   */
  "getMotionCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Get the data for a single motion
   * @param _motionId The id of the motion
   */
  getMotion(
    _motionId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [
      BigNumber[],
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber[],
      BigNumber[],
      BigNumber[],
      boolean,
      boolean,
      string,
      string
    ] & {
      events: BigNumber[];
      rootHash: string;
      domainId: BigNumber;
      skillId: BigNumber;
      skillRep: BigNumber;
      repSubmitted: BigNumber;
      paidVoterComp: BigNumber;
      pastVoterComp: BigNumber[];
      stakes: BigNumber[];
      votes: BigNumber[];
      escalated: boolean;
      finalized: boolean;
      altTarget: string;
      action: string;
    }
  >;

  /**
   * Get the data for a single motion
   * @param _motionId The id of the motion
   */
  "getMotion(uint256)"(
    _motionId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [
      BigNumber[],
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber[],
      BigNumber[],
      BigNumber[],
      boolean,
      boolean,
      string,
      string
    ] & {
      events: BigNumber[];
      rootHash: string;
      domainId: BigNumber;
      skillId: BigNumber;
      skillRep: BigNumber;
      repSubmitted: BigNumber;
      paidVoterComp: BigNumber;
      pastVoterComp: BigNumber[];
      stakes: BigNumber[];
      votes: BigNumber[];
      escalated: boolean;
      finalized: boolean;
      altTarget: string;
      action: string;
    }
  >;

  /**
   * Get a user's stake on a motion
   * @param _motionId The id of the motion
   * @param _staker The staker address
   * @param _vote The side being supported (0 = NAY, 1 = YAY)
   */
  getStake(
    _motionId: BigNumberish,
    _staker: string,
    _vote: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Get a user's stake on a motion
   * @param _motionId The id of the motion
   * @param _staker The staker address
   * @param _vote The side being supported (0 = NAY, 1 = YAY)
   */
  "getStake(uint256,address,uint256)"(
    _motionId: BigNumberish,
    _staker: string,
    _vote: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Get the number of ongoing motions for a single expenditure / expenditure slot
   * @param _structHash The hash of the expenditureId or expenditureId*expenditureSlot
   */
  getExpenditureMotionCount(
    _structHash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Get the number of ongoing motions for a single expenditure / expenditure slot
   * @param _structHash The hash of the expenditureId or expenditureId*expenditureSlot
   */
  "getExpenditureMotionCount(bytes32)"(
    _structHash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Get the largest past vote on a single expenditure variable
   * @param _actionHash The hash of the particular expenditure action
   */
  getExpenditurePastVote(
    _actionHash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Get the largest past vote on a single expenditure variable
   * @param _actionHash The hash of the particular expenditure action
   */
  "getExpenditurePastVote(bytes32)"(
    _actionHash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Get the current state of the motion
   */
  getMotionState(
    _motionId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<number>;

  /**
   * Get the current state of the motion
   */
  "getMotionState(uint256)"(
    _motionId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<number>;

  /**
   * Get the voter reward
   * @param _motionId The id of the motion
   * @param _voterRep The reputation the voter has in the domain
   */
  getVoterReward(
    _motionId: BigNumberish,
    _voterRep: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Get the voter reward
   * @param _motionId The id of the motion
   * @param _voterRep The reputation the voter has in the domain
   */
  "getVoterReward(uint256,uint256)"(
    _motionId: BigNumberish,
    _voterRep: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Get the staker reward
   * @param _motionId The id of the motion
   * @param _staker The staker's address
   * @param _vote The vote (0 = NAY, 1 = YAY)
   */
  getStakerReward(
    _motionId: BigNumberish,
    _staker: string,
    _vote: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<[BigNumber, BigNumber]>;

  /**
   * Get the staker reward
   * @param _motionId The id of the motion
   * @param _staker The staker's address
   * @param _vote The vote (0 = NAY, 1 = YAY)
   */
  "getStakerReward(uint256,address,uint256)"(
    _motionId: BigNumberish,
    _staker: string,
    _vote: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<[BigNumber, BigNumber]>;

  createClaimDelayAction(
    action: Arrayish,
    value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "createClaimDelayAction(bytes,uint256)"(
    action: Arrayish,
    value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    ExtensionInitialised(): EventFilter;

    LogSetAuthority(authority: string | null): EventFilter;

    LogSetOwner(owner: string | null): EventFilter;

    MotionCreated(
      motionId: BigNumberish | null,
      creator: null,
      domainId: BigNumberish | null
    ): EventFilter;

    MotionEscalated(
      motionId: BigNumberish | null,
      escalator: null,
      domainId: BigNumberish | null,
      newDomainId: BigNumberish | null
    ): EventFilter;

    MotionEventSet(
      motionId: BigNumberish | null,
      eventIndex: null
    ): EventFilter;

    MotionFinalized(
      motionId: BigNumberish | null,
      action: null,
      executed: null
    ): EventFilter;

    MotionRewardClaimed(
      motionId: BigNumberish | null,
      staker: string | null,
      vote: BigNumberish | null,
      amount: null
    ): EventFilter;

    MotionStaked(
      motionId: BigNumberish | null,
      staker: string | null,
      vote: BigNumberish | null,
      amount: null
    ): EventFilter;

    MotionVoteRevealed(
      motionId: BigNumberish | null,
      voter: string | null,
      vote: BigNumberish | null
    ): EventFilter;

    MotionVoteSubmitted(
      motionId: BigNumberish | null,
      voter: string | null
    ): EventFilter;
  };

  estimate: {
    authority(overrides?: TransactionOverrides): Promise<BigNumber>;

    "authority()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getColony(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getColony()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getDeprecated(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getDeprecated()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    owner(overrides?: TransactionOverrides): Promise<BigNumber>;

    "owner()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    setAuthority(
      authority_: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setAuthority(address)"(
      authority_: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setOwner(
      owner_: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setOwner(address)"(
      owner_: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the identifier of the extension
     */
    identifier(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Returns the identifier of the extension
     */
    "identifier()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Return the version number
     */
    version(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Return the version number
     */
    "version()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Install the extension
     * @param _colony Base colony for the installation
     */
    install(
      _colony: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Install the extension
     * @param _colony Base colony for the installation
     */
    "install(address)"(
      _colony: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Initialise the extension
     * @param _escalationPeriod The length of the escalation period in seconds
     * @param _maxVoteFraction The fraction of the domain's reputation which must submit for quick-end
     * @param _revealPeriod The length of the reveal period in seconds
     * @param _stakePeriod The length of the staking period in seconds
     * @param _submitPeriod The length of the submit period in seconds
     * @param _totalStakeFraction The fraction of the domain's reputation we need to stake
     * @param _userMinStakeFraction The minimum per-user stake as fraction of total stake
     * @param _voterRewardFraction The fraction of the total stake paid out to voters as rewards
     */
    initialise(
      _totalStakeFraction: BigNumberish,
      _voterRewardFraction: BigNumberish,
      _userMinStakeFraction: BigNumberish,
      _maxVoteFraction: BigNumberish,
      _stakePeriod: BigNumberish,
      _submitPeriod: BigNumberish,
      _revealPeriod: BigNumberish,
      _escalationPeriod: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Initialise the extension
     * @param _escalationPeriod The length of the escalation period in seconds
     * @param _maxVoteFraction The fraction of the domain's reputation which must submit for quick-end
     * @param _revealPeriod The length of the reveal period in seconds
     * @param _stakePeriod The length of the staking period in seconds
     * @param _submitPeriod The length of the submit period in seconds
     * @param _totalStakeFraction The fraction of the domain's reputation we need to stake
     * @param _userMinStakeFraction The minimum per-user stake as fraction of total stake
     * @param _voterRewardFraction The fraction of the total stake paid out to voters as rewards
     */
    "initialise(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      _totalStakeFraction: BigNumberish,
      _voterRewardFraction: BigNumberish,
      _userMinStakeFraction: BigNumberish,
      _maxVoteFraction: BigNumberish,
      _stakePeriod: BigNumberish,
      _submitPeriod: BigNumberish,
      _revealPeriod: BigNumberish,
      _escalationPeriod: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Called when upgrading the extension
     */
    finishUpgrade(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Called when upgrading the extension
     */
    "finishUpgrade()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Called when deprecating (or undeprecating) the extension
     */
    deprecate(
      _deprecated: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Called when deprecating (or undeprecating) the extension
     */
    "deprecate(bool)"(
      _deprecated: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Called when uninstalling the extension
     */
    uninstall(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Called when uninstalling the extension
     */
    "uninstall()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Create a motion in the root domain
     * @param _action A bytes array encoding a function call
     * @param _altTarget The contract to which we send the action (0x0 for the colony)
     * @param _branchMask The branchmask of the proof
     * @param _key Reputation tree key for the root domain
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the root domain
     */
    createRootMotion(
      _altTarget: string,
      _action: Arrayish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Create a motion in the root domain
     * @param _action A bytes array encoding a function call
     * @param _altTarget The contract to which we send the action (0x0 for the colony)
     * @param _branchMask The branchmask of the proof
     * @param _key Reputation tree key for the root domain
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the root domain
     */
    "createRootMotion(address,bytes,bytes,bytes,uint256,bytes32[])"(
      _altTarget: string,
      _action: Arrayish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Create a motion in any domain
     * @param _action A bytes array encoding a function call
     * @param _branchMask The branchmask of the proof
     * @param _childSkillIndex The childSkillIndex pointing to the domain of the action
     * @param _domainId The domain where we vote on the motion
     * @param _key Reputation tree key for the domain
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the domain
     */
    createDomainMotion(
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _action: Arrayish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Create a motion in any domain
     * @param _action A bytes array encoding a function call
     * @param _branchMask The branchmask of the proof
     * @param _childSkillIndex The childSkillIndex pointing to the domain of the action
     * @param _domainId The domain where we vote on the motion
     * @param _key Reputation tree key for the domain
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the domain
     */
    "createDomainMotion(uint256,uint256,bytes,bytes,bytes,uint256,bytes32[])"(
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _action: Arrayish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Stake on a motion
     * @param _amount The amount of tokens being staked
     * @param _branchMask The branchmask of the proof
     * @param _childSkillIndex For the domain in which the motion is occurring
     * @param _key Reputation tree key for the staker/domain
     * @param _motionId The id of the motion
     * @param _permissionDomainId The domain where the extension has the arbitration permission
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the staker/domain
     * @param _vote The side being supported (0 = NAY, 1 = YAY)
     */
    stakeMotion(
      _motionId: BigNumberish,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _vote: BigNumberish,
      _amount: BigNumberish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Stake on a motion
     * @param _amount The amount of tokens being staked
     * @param _branchMask The branchmask of the proof
     * @param _childSkillIndex For the domain in which the motion is occurring
     * @param _key Reputation tree key for the staker/domain
     * @param _motionId The id of the motion
     * @param _permissionDomainId The domain where the extension has the arbitration permission
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the staker/domain
     * @param _vote The side being supported (0 = NAY, 1 = YAY)
     */
    "stakeMotion(uint256,uint256,uint256,uint256,uint256,bytes,bytes,uint256,bytes32[])"(
      _motionId: BigNumberish,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _vote: BigNumberish,
      _amount: BigNumberish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Submit a vote secret for a motion
     * @param _branchMask The branchmask of the proof
     * @param _key Reputation tree key for the staker/domain
     * @param _motionId The id of the motion
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the staker/domain
     * @param _voteSecret The hashed vote secret
     */
    submitVote(
      _motionId: BigNumberish,
      _voteSecret: Arrayish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Submit a vote secret for a motion
     * @param _branchMask The branchmask of the proof
     * @param _key Reputation tree key for the staker/domain
     * @param _motionId The id of the motion
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the staker/domain
     * @param _voteSecret The hashed vote secret
     */
    "submitVote(uint256,bytes32,bytes,bytes,uint256,bytes32[])"(
      _motionId: BigNumberish,
      _voteSecret: Arrayish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Reveal a vote secret for a motion
     * @param _branchMask The branchmask of the proof
     * @param _key Reputation tree key for the staker/domain
     * @param _motionId The id of the motion
     * @param _salt The salt used to hash the vote
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the staker/domain
     * @param _vote The side being supported (0 = NAY, 1 = YAY)
     */
    revealVote(
      _motionId: BigNumberish,
      _salt: Arrayish,
      _vote: BigNumberish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Reveal a vote secret for a motion
     * @param _branchMask The branchmask of the proof
     * @param _key Reputation tree key for the staker/domain
     * @param _motionId The id of the motion
     * @param _salt The salt used to hash the vote
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the staker/domain
     * @param _vote The side being supported (0 = NAY, 1 = YAY)
     */
    "revealVote(uint256,bytes32,uint256,bytes,bytes,uint256,bytes32[])"(
      _motionId: BigNumberish,
      _salt: Arrayish,
      _vote: BigNumberish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Escalate a motion to a higher domain
     * @param _branchMask The branchmask of the proof
     * @param _childSkillIndex For the current domain, relative to the escalated domain
     * @param _key Reputation tree key for the new domain
     * @param _motionId The id of the motion
     * @param _newDomainId The desired domain of escalation
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the new domain
     */
    escalateMotion(
      _motionId: BigNumberish,
      _newDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Escalate a motion to a higher domain
     * @param _branchMask The branchmask of the proof
     * @param _childSkillIndex For the current domain, relative to the escalated domain
     * @param _key Reputation tree key for the new domain
     * @param _motionId The id of the motion
     * @param _newDomainId The desired domain of escalation
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the new domain
     */
    "escalateMotion(uint256,uint256,uint256,bytes,bytes,uint256,bytes32[])"(
      _motionId: BigNumberish,
      _newDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _key: Arrayish,
      _value: Arrayish,
      _branchMask: BigNumberish,
      _siblings: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    finalizeMotion(
      _motionId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "finalizeMotion(uint256)"(
      _motionId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Claim the staker's reward
     * @param _childSkillIndex For the domain in which the motion is occurring
     * @param _motionId The id of the motion
     * @param _permissionDomainId The domain where the extension has the arbitration permission
     * @param _staker The staker whose reward is being claimed
     * @param _vote The side being supported (0 = NAY, 1 = YAY)
     */
    claimReward(
      _motionId: BigNumberish,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Claim the staker's reward
     * @param _childSkillIndex For the domain in which the motion is occurring
     * @param _motionId The id of the motion
     * @param _permissionDomainId The domain where the extension has the arbitration permission
     * @param _staker The staker whose reward is being claimed
     * @param _vote The side being supported (0 = NAY, 1 = YAY)
     */
    "claimReward(uint256,uint256,uint256,address,uint256)"(
      _motionId: BigNumberish,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the total stake fraction
     */
    getTotalStakeFraction(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the total stake fraction
     */
    "getTotalStakeFraction()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the voter reward fraction
     */
    getVoterRewardFraction(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the voter reward fraction
     */
    "getVoterRewardFraction()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the user min stake fraction
     */
    getUserMinStakeFraction(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the user min stake fraction
     */
    "getUserMinStakeFraction()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the max vote fraction
     */
    getMaxVoteFraction(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the max vote fraction
     */
    "getMaxVoteFraction()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the stake period
     */
    getStakePeriod(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the stake period
     */
    "getStakePeriod()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the submit period
     */
    getSubmitPeriod(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the submit period
     */
    "getSubmitPeriod()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the reveal period
     */
    getRevealPeriod(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the reveal period
     */
    "getRevealPeriod()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the escalation period
     */
    getEscalationPeriod(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the escalation period
     */
    "getEscalationPeriod()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the total motion count
     */
    getMotionCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the total motion count
     */
    "getMotionCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Get the data for a single motion
     * @param _motionId The id of the motion
     */
    getMotion(
      _motionId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the data for a single motion
     * @param _motionId The id of the motion
     */
    "getMotion(uint256)"(
      _motionId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get a user's stake on a motion
     * @param _motionId The id of the motion
     * @param _staker The staker address
     * @param _vote The side being supported (0 = NAY, 1 = YAY)
     */
    getStake(
      _motionId: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get a user's stake on a motion
     * @param _motionId The id of the motion
     * @param _staker The staker address
     * @param _vote The side being supported (0 = NAY, 1 = YAY)
     */
    "getStake(uint256,address,uint256)"(
      _motionId: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the number of ongoing motions for a single expenditure / expenditure slot
     * @param _structHash The hash of the expenditureId or expenditureId*expenditureSlot
     */
    getExpenditureMotionCount(
      _structHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the number of ongoing motions for a single expenditure / expenditure slot
     * @param _structHash The hash of the expenditureId or expenditureId*expenditureSlot
     */
    "getExpenditureMotionCount(bytes32)"(
      _structHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the largest past vote on a single expenditure variable
     * @param _actionHash The hash of the particular expenditure action
     */
    getExpenditurePastVote(
      _actionHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the largest past vote on a single expenditure variable
     * @param _actionHash The hash of the particular expenditure action
     */
    "getExpenditurePastVote(bytes32)"(
      _actionHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the current state of the motion
     */
    getMotionState(
      _motionId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the current state of the motion
     */
    "getMotionState(uint256)"(
      _motionId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the voter reward
     * @param _motionId The id of the motion
     * @param _voterRep The reputation the voter has in the domain
     */
    getVoterReward(
      _motionId: BigNumberish,
      _voterRep: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the voter reward
     * @param _motionId The id of the motion
     * @param _voterRep The reputation the voter has in the domain
     */
    "getVoterReward(uint256,uint256)"(
      _motionId: BigNumberish,
      _voterRep: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the staker reward
     * @param _motionId The id of the motion
     * @param _staker The staker's address
     * @param _vote The vote (0 = NAY, 1 = YAY)
     */
    getStakerReward(
      _motionId: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the staker reward
     * @param _motionId The id of the motion
     * @param _staker The staker's address
     * @param _vote The vote (0 = NAY, 1 = YAY)
     */
    "getStakerReward(uint256,address,uint256)"(
      _motionId: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    createClaimDelayAction(
      action: Arrayish,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "createClaimDelayAction(bytes,uint256)"(
      action: Arrayish,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
