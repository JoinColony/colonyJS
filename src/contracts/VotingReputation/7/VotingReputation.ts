/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace VotingReputationDataTypes {
  export type MotionStruct = {
    events: [BigNumberish, BigNumberish, BigNumberish];
    rootHash: BytesLike;
    domainId: BigNumberish;
    skillId: BigNumberish;
    skillRep: BigNumberish;
    repSubmitted: BigNumberish;
    paidVoterComp: BigNumberish;
    pastVoterComp: [BigNumberish, BigNumberish];
    stakes: [BigNumberish, BigNumberish];
    votes: [BigNumberish, BigNumberish];
    escalated: boolean;
    finalized: boolean;
    altTarget: string;
    action: BytesLike;
  };

  export type MotionStructOutput = [
    [BigNumber, BigNumber, BigNumber],
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    [BigNumber, BigNumber],
    [BigNumber, BigNumber],
    [BigNumber, BigNumber],
    boolean,
    boolean,
    string,
    string
  ] & {
    events: [BigNumber, BigNumber, BigNumber];
    rootHash: string;
    domainId: BigNumber;
    skillId: BigNumber;
    skillRep: BigNumber;
    repSubmitted: BigNumber;
    paidVoterComp: BigNumber;
    pastVoterComp: [BigNumber, BigNumber];
    stakes: [BigNumber, BigNumber];
    votes: [BigNumber, BigNumber];
    escalated: boolean;
    finalized: boolean;
    altTarget: string;
    action: string;
  };
}

export interface VotingReputationInterface extends utils.Interface {
  functions: {
    "authority()": FunctionFragment;
    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": FunctionFragment;
    "getCapabilityRoles(bytes4)": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getColony()": FunctionFragment;
    "getDeprecated()": FunctionFragment;
    "owner()": FunctionFragment;
    "setAuthority(address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "verify(address,uint256,uint256,bytes,bytes32,bytes32,uint8)": FunctionFragment;
    "getMetatransactionNonce(address)": FunctionFragment;
    "identifier()": FunctionFragment;
    "version()": FunctionFragment;
    "install(address)": FunctionFragment;
    "initialise(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "finishUpgrade()": FunctionFragment;
    "deprecate(bool)": FunctionFragment;
    "uninstall()": FunctionFragment;
    "createMotion(uint256,uint256,address,bytes,bytes,bytes,uint256,bytes32[])": FunctionFragment;
    "createRootMotion(address,bytes,bytes,bytes,uint256,bytes32[])": FunctionFragment;
    "createDomainMotion(uint256,uint256,bytes,bytes,bytes,uint256,bytes32[])": FunctionFragment;
    "stakeMotion(uint256,uint256,uint256,uint256,uint256,bytes,bytes,uint256,bytes32[])": FunctionFragment;
    "submitVote(uint256,bytes32,bytes,bytes,uint256,bytes32[])": FunctionFragment;
    "revealVote(uint256,bytes32,uint256,bytes,bytes,uint256,bytes32[])": FunctionFragment;
    "escalateMotion(uint256,uint256,uint256,bytes,bytes,uint256,bytes32[])": FunctionFragment;
    "finalizeMotion(uint256)": FunctionFragment;
    "failingExecutionAllowed(uint256)": FunctionFragment;
    "claimReward(uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "getTotalStakeFraction()": FunctionFragment;
    "getVoterRewardFraction()": FunctionFragment;
    "getUserMinStakeFraction()": FunctionFragment;
    "getMaxVoteFraction()": FunctionFragment;
    "getStakePeriod()": FunctionFragment;
    "getSubmitPeriod()": FunctionFragment;
    "getRevealPeriod()": FunctionFragment;
    "getEscalationPeriod()": FunctionFragment;
    "getMotionCount()": FunctionFragment;
    "getMotion(uint256)": FunctionFragment;
    "getStake(uint256,address,uint256)": FunctionFragment;
    "getExpenditureMotionCount(bytes32)": FunctionFragment;
    "getExpenditurePastVote(bytes32)": FunctionFragment;
    "getMotionState(uint256)": FunctionFragment;
    "getVoterReward(uint256,uint256)": FunctionFragment;
    "getVoterRewardRange(uint256,uint256,address)": FunctionFragment;
    "getStakerReward(uint256,address,uint256)": FunctionFragment;
    "createClaimDelayAction(bytes,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "authority"
      | "executeMetaTransaction"
      | "getCapabilityRoles"
      | "getChainId"
      | "getColony"
      | "getDeprecated"
      | "owner"
      | "setAuthority"
      | "setOwner"
      | "verify"
      | "getMetatransactionNonce"
      | "identifier"
      | "version"
      | "install"
      | "initialise"
      | "finishUpgrade"
      | "deprecate"
      | "uninstall"
      | "createMotion"
      | "createRootMotion"
      | "createDomainMotion"
      | "stakeMotion"
      | "submitVote"
      | "revealVote"
      | "escalateMotion"
      | "finalizeMotion"
      | "failingExecutionAllowed"
      | "claimReward"
      | "getTotalStakeFraction"
      | "getVoterRewardFraction"
      | "getUserMinStakeFraction"
      | "getMaxVoteFraction"
      | "getStakePeriod"
      | "getSubmitPeriod"
      | "getRevealPeriod"
      | "getEscalationPeriod"
      | "getMotionCount"
      | "getMotion"
      | "getStake"
      | "getExpenditureMotionCount"
      | "getExpenditurePastVote"
      | "getMotionState"
      | "getVoterReward"
      | "getVoterRewardRange"
      | "getStakerReward"
      | "createClaimDelayAction"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeMetaTransaction",
    values: [string, BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCapabilityRoles",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getColony", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getDeprecated",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMetatransactionNonce",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "identifier",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "install", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialise",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "finishUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deprecate", values: [boolean]): string;
  encodeFunctionData(functionFragment: "uninstall", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createMotion",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createRootMotion",
    values: [string, BytesLike, BytesLike, BytesLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createDomainMotion",
    values: [
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeMotion",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BigNumberish,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submitVote",
    values: [
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revealVote",
    values: [
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike,
      BigNumberish,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "escalateMotion",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BigNumberish,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeMotion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "failingExecutionAllowed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalStakeFraction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterRewardFraction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserMinStakeFraction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxVoteFraction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSubmitPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRevealPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEscalationPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMotionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMotion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStake",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpenditureMotionCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpenditurePastVote",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMotionState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterReward",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterRewardRange",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakerReward",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createClaimDelayAction",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeMetaTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCapabilityRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getColony", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDeprecated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMetatransactionNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "identifier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "install", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialise", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finishUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deprecate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uninstall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createMotion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRootMotion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDomainMotion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeMotion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revealVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "escalateMotion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeMotion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "failingExecutionAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalStakeFraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterRewardFraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserMinStakeFraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxVoteFraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubmitPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRevealPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEscalationPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMotionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMotion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExpenditureMotionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpenditurePastVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMotionState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterRewardRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakerReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createClaimDelayAction",
    data: BytesLike
  ): Result;

  events: {
    "ExtensionInitialised()": EventFragment;
    "LogSetAuthority(address)": EventFragment;
    "LogSetOwner(address)": EventFragment;
    "MetaTransactionExecuted(address,address,bytes)": EventFragment;
    "MotionCreated(uint256,address,uint256)": EventFragment;
    "MotionEscalated(uint256,address,uint256,uint256)": EventFragment;
    "MotionEventSet(uint256,uint256)": EventFragment;
    "MotionFinalized(uint256,bytes,bool)": EventFragment;
    "MotionRewardClaimed(uint256,address,uint256,uint256)": EventFragment;
    "MotionStaked(uint256,address,uint256,uint256)": EventFragment;
    "MotionVoteRevealed(uint256,address,uint256)": EventFragment;
    "MotionVoteSubmitted(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExtensionInitialised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetAuthority"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MotionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MotionEscalated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MotionEventSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MotionFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MotionRewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MotionStaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MotionVoteRevealed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MotionVoteSubmitted"): EventFragment;
}

export interface ExtensionInitialisedEventObject {}
export type ExtensionInitialisedEvent = TypedEvent<
  [],
  ExtensionInitialisedEventObject
>;

export type ExtensionInitialisedEventFilter =
  TypedEventFilter<ExtensionInitialisedEvent>;

export interface LogSetAuthorityEventObject {
  authority: string;
}
export type LogSetAuthorityEvent = TypedEvent<
  [string],
  LogSetAuthorityEventObject
>;

export type LogSetAuthorityEventFilter = TypedEventFilter<LogSetAuthorityEvent>;

export interface LogSetOwnerEventObject {
  owner: string;
}
export type LogSetOwnerEvent = TypedEvent<[string], LogSetOwnerEventObject>;

export type LogSetOwnerEventFilter = TypedEventFilter<LogSetOwnerEvent>;

export interface MetaTransactionExecutedEventObject {
  user: string;
  relayerAddress: string;
  functionSignature: string;
}
export type MetaTransactionExecutedEvent = TypedEvent<
  [string, string, string],
  MetaTransactionExecutedEventObject
>;

export type MetaTransactionExecutedEventFilter =
  TypedEventFilter<MetaTransactionExecutedEvent>;

export interface MotionCreatedEventObject {
  motionId: BigNumber;
  creator: string;
  domainId: BigNumber;
}
export type MotionCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  MotionCreatedEventObject
>;

export type MotionCreatedEventFilter = TypedEventFilter<MotionCreatedEvent>;

export interface MotionEscalatedEventObject {
  motionId: BigNumber;
  escalator: string;
  domainId: BigNumber;
  newDomainId: BigNumber;
}
export type MotionEscalatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  MotionEscalatedEventObject
>;

export type MotionEscalatedEventFilter = TypedEventFilter<MotionEscalatedEvent>;

export interface MotionEventSetEventObject {
  motionId: BigNumber;
  eventIndex: BigNumber;
}
export type MotionEventSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  MotionEventSetEventObject
>;

export type MotionEventSetEventFilter = TypedEventFilter<MotionEventSetEvent>;

export interface MotionFinalizedEventObject {
  motionId: BigNumber;
  action: string;
  executed: boolean;
}
export type MotionFinalizedEvent = TypedEvent<
  [BigNumber, string, boolean],
  MotionFinalizedEventObject
>;

export type MotionFinalizedEventFilter = TypedEventFilter<MotionFinalizedEvent>;

export interface MotionRewardClaimedEventObject {
  motionId: BigNumber;
  staker: string;
  vote: BigNumber;
  amount: BigNumber;
}
export type MotionRewardClaimedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  MotionRewardClaimedEventObject
>;

export type MotionRewardClaimedEventFilter =
  TypedEventFilter<MotionRewardClaimedEvent>;

export interface MotionStakedEventObject {
  motionId: BigNumber;
  staker: string;
  vote: BigNumber;
  amount: BigNumber;
}
export type MotionStakedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  MotionStakedEventObject
>;

export type MotionStakedEventFilter = TypedEventFilter<MotionStakedEvent>;

export interface MotionVoteRevealedEventObject {
  motionId: BigNumber;
  voter: string;
  vote: BigNumber;
}
export type MotionVoteRevealedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  MotionVoteRevealedEventObject
>;

export type MotionVoteRevealedEventFilter =
  TypedEventFilter<MotionVoteRevealedEvent>;

export interface MotionVoteSubmittedEventObject {
  motionId: BigNumber;
  voter: string;
}
export type MotionVoteSubmittedEvent = TypedEvent<
  [BigNumber, string],
  MotionVoteSubmittedEventObject
>;

export type MotionVoteSubmittedEventFilter =
  TypedEventFilter<MotionVoteSubmittedEvent>;

export interface VotingReputation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VotingReputationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    authority(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Main function to be called when user wants to execute meta transaction. The actual function to be called should be passed as param with name functionSignature Here the basic signature recovery is being used. Signature is expected to be generated using personal_sign method.
     * @param _payload Function call to make via meta transaction
     * @param _sigR R part of the signature
     * @param _sigS S part of the signature
     * @param _sigV V part of the signature
     * @param _user Address of user trying to do meta transaction
     */
    executeMetaTransaction(
      _user: string,
      _payload: BytesLike,
      _sigR: BytesLike,
      _sigS: BytesLike,
      _sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCapabilityRoles(
      _sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getColony(overrides?: CallOverrides): Promise<[string]>;

    getDeprecated(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setAuthority(
      authority_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      owner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verify(
      _owner: string,
      _nonce: BigNumberish,
      _chainId: BigNumberish,
      _payload: BytesLike,
      _sigR: BytesLike,
      _sigS: BytesLike,
      _sigV: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getMetatransactionNonce(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _nonce: BigNumber }>;

    identifier(
      overrides?: CallOverrides
    ): Promise<[string] & { _identifier: string }>;

    version(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _version: BigNumber }>;

    install(
      _colony: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialise(
      _totalStakeFraction: BigNumberish,
      _voterRewardFraction: BigNumberish,
      _userMinStakeFraction: BigNumberish,
      _maxVoteFraction: BigNumberish,
      _stakePeriod: BigNumberish,
      _submitPeriod: BigNumberish,
      _revealPeriod: BigNumberish,
      _escalationPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finishUpgrade(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deprecate(
      _deprecated: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uninstall(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createMotion(
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _altTarget: string,
      _action: BytesLike,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createRootMotion(
      _altTarget: string,
      _action: BytesLike,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createDomainMotion(
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _action: BytesLike,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeMotion(
      _motionId: BigNumberish,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _vote: BigNumberish,
      _amount: BigNumberish,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitVote(
      _motionId: BigNumberish,
      _voteSecret: BytesLike,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revealVote(
      _motionId: BigNumberish,
      _salt: BytesLike,
      _vote: BigNumberish,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    escalateMotion(
      _motionId: BigNumberish,
      _newDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finalizeMotion(
      _motionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    failingExecutionAllowed(
      _motionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _allowed: boolean }>;

    claimReward(
      _motionId: BigNumberish,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTotalStakeFraction(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _fraction: BigNumber }>;

    getVoterRewardFraction(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _fraction: BigNumber }>;

    getUserMinStakeFraction(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _fraction: BigNumber }>;

    getMaxVoteFraction(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _fraction: BigNumber }>;

    getStakePeriod(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _period: BigNumber }>;

    getSubmitPeriod(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _period: BigNumber }>;

    getRevealPeriod(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _period: BigNumber }>;

    getEscalationPeriod(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _period: BigNumber }>;

    getMotionCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _count: BigNumber }>;

    getMotion(
      _motionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [VotingReputationDataTypes.MotionStructOutput] & {
        _motion: VotingReputationDataTypes.MotionStructOutput;
      }
    >;

    getStake(
      _motionId: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _stake: BigNumber }>;

    getExpenditureMotionCount(
      _structHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _count: BigNumber }>;

    getExpenditurePastVote(
      _actionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _vote: BigNumber }>;

    getMotionState(
      _motionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number] & { _motionState: number }>;

    getVoterReward(
      _motionId: BigNumberish,
      _voterRep: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _reward: BigNumber }>;

    getVoterRewardRange(
      _motionId: BigNumberish,
      _voterRep: BigNumberish,
      _voterAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _rewardMin: BigNumber; _rewardMax: BigNumber }
    >;

    getStakerReward(
      _motionId: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _reward: BigNumber; _penalty: BigNumber }
    >;

    createClaimDelayAction(
      action: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  authority(overrides?: CallOverrides): Promise<string>;

  /**
   * Main function to be called when user wants to execute meta transaction. The actual function to be called should be passed as param with name functionSignature Here the basic signature recovery is being used. Signature is expected to be generated using personal_sign method.
   * @param _payload Function call to make via meta transaction
   * @param _sigR R part of the signature
   * @param _sigS S part of the signature
   * @param _sigV V part of the signature
   * @param _user Address of user trying to do meta transaction
   */
  executeMetaTransaction(
    _user: string,
    _payload: BytesLike,
    _sigR: BytesLike,
    _sigS: BytesLike,
    _sigV: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCapabilityRoles(
    _sig: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  getColony(overrides?: CallOverrides): Promise<string>;

  getDeprecated(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  setAuthority(
    authority_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    owner_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verify(
    _owner: string,
    _nonce: BigNumberish,
    _chainId: BigNumberish,
    _payload: BytesLike,
    _sigR: BytesLike,
    _sigS: BytesLike,
    _sigV: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getMetatransactionNonce(
    _userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  identifier(overrides?: CallOverrides): Promise<string>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  install(
    _colony: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialise(
    _totalStakeFraction: BigNumberish,
    _voterRewardFraction: BigNumberish,
    _userMinStakeFraction: BigNumberish,
    _maxVoteFraction: BigNumberish,
    _stakePeriod: BigNumberish,
    _submitPeriod: BigNumberish,
    _revealPeriod: BigNumberish,
    _escalationPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finishUpgrade(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deprecate(
    _deprecated: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uninstall(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createMotion(
    _domainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _altTarget: string,
    _action: BytesLike,
    _key: BytesLike,
    _value: BytesLike,
    _branchMask: BigNumberish,
    _siblings: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createRootMotion(
    _altTarget: string,
    _action: BytesLike,
    _key: BytesLike,
    _value: BytesLike,
    _branchMask: BigNumberish,
    _siblings: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createDomainMotion(
    _domainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _action: BytesLike,
    _key: BytesLike,
    _value: BytesLike,
    _branchMask: BigNumberish,
    _siblings: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeMotion(
    _motionId: BigNumberish,
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _vote: BigNumberish,
    _amount: BigNumberish,
    _key: BytesLike,
    _value: BytesLike,
    _branchMask: BigNumberish,
    _siblings: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitVote(
    _motionId: BigNumberish,
    _voteSecret: BytesLike,
    _key: BytesLike,
    _value: BytesLike,
    _branchMask: BigNumberish,
    _siblings: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revealVote(
    _motionId: BigNumberish,
    _salt: BytesLike,
    _vote: BigNumberish,
    _key: BytesLike,
    _value: BytesLike,
    _branchMask: BigNumberish,
    _siblings: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  escalateMotion(
    _motionId: BigNumberish,
    _newDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _key: BytesLike,
    _value: BytesLike,
    _branchMask: BigNumberish,
    _siblings: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finalizeMotion(
    _motionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  failingExecutionAllowed(
    _motionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  claimReward(
    _motionId: BigNumberish,
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _staker: string,
    _vote: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTotalStakeFraction(overrides?: CallOverrides): Promise<BigNumber>;

  getVoterRewardFraction(overrides?: CallOverrides): Promise<BigNumber>;

  getUserMinStakeFraction(overrides?: CallOverrides): Promise<BigNumber>;

  getMaxVoteFraction(overrides?: CallOverrides): Promise<BigNumber>;

  getStakePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  getSubmitPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  getRevealPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  getEscalationPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  getMotionCount(overrides?: CallOverrides): Promise<BigNumber>;

  getMotion(
    _motionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<VotingReputationDataTypes.MotionStructOutput>;

  getStake(
    _motionId: BigNumberish,
    _staker: string,
    _vote: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getExpenditureMotionCount(
    _structHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getExpenditurePastVote(
    _actionHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMotionState(
    _motionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getVoterReward(
    _motionId: BigNumberish,
    _voterRep: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVoterRewardRange(
    _motionId: BigNumberish,
    _voterRep: BigNumberish,
    _voterAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { _rewardMin: BigNumber; _rewardMax: BigNumber }
  >;

  getStakerReward(
    _motionId: BigNumberish,
    _staker: string,
    _vote: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { _reward: BigNumber; _penalty: BigNumber }
  >;

  createClaimDelayAction(
    action: BytesLike,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    authority(overrides?: CallOverrides): Promise<string>;

    /**
     * Main function to be called when user wants to execute meta transaction. The actual function to be called should be passed as param with name functionSignature Here the basic signature recovery is being used. Signature is expected to be generated using personal_sign method.
     * @param _payload Function call to make via meta transaction
     * @param _sigR R part of the signature
     * @param _sigS S part of the signature
     * @param _sigV V part of the signature
     * @param _user Address of user trying to do meta transaction
     */
    executeMetaTransaction(
      _user: string,
      _payload: BytesLike,
      _sigR: BytesLike,
      _sigS: BytesLike,
      _sigV: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getCapabilityRoles(
      _sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getColony(overrides?: CallOverrides): Promise<string>;

    getDeprecated(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    setAuthority(authority_: string, overrides?: CallOverrides): Promise<void>;

    setOwner(owner_: string, overrides?: CallOverrides): Promise<void>;

    verify(
      _owner: string,
      _nonce: BigNumberish,
      _chainId: BigNumberish,
      _payload: BytesLike,
      _sigR: BytesLike,
      _sigS: BytesLike,
      _sigV: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getMetatransactionNonce(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    identifier(overrides?: CallOverrides): Promise<string>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    install(_colony: string, overrides?: CallOverrides): Promise<void>;

    initialise(
      _totalStakeFraction: BigNumberish,
      _voterRewardFraction: BigNumberish,
      _userMinStakeFraction: BigNumberish,
      _maxVoteFraction: BigNumberish,
      _stakePeriod: BigNumberish,
      _submitPeriod: BigNumberish,
      _revealPeriod: BigNumberish,
      _escalationPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    finishUpgrade(overrides?: CallOverrides): Promise<void>;

    deprecate(_deprecated: boolean, overrides?: CallOverrides): Promise<void>;

    uninstall(overrides?: CallOverrides): Promise<void>;

    createMotion(
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _altTarget: string,
      _action: BytesLike,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    createRootMotion(
      _altTarget: string,
      _action: BytesLike,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    createDomainMotion(
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _action: BytesLike,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    stakeMotion(
      _motionId: BigNumberish,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _vote: BigNumberish,
      _amount: BigNumberish,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    submitVote(
      _motionId: BigNumberish,
      _voteSecret: BytesLike,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    revealVote(
      _motionId: BigNumberish,
      _salt: BytesLike,
      _vote: BigNumberish,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    escalateMotion(
      _motionId: BigNumberish,
      _newDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeMotion(
      _motionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    failingExecutionAllowed(
      _motionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimReward(
      _motionId: BigNumberish,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getTotalStakeFraction(overrides?: CallOverrides): Promise<BigNumber>;

    getVoterRewardFraction(overrides?: CallOverrides): Promise<BigNumber>;

    getUserMinStakeFraction(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxVoteFraction(overrides?: CallOverrides): Promise<BigNumber>;

    getStakePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getSubmitPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getRevealPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getEscalationPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getMotionCount(overrides?: CallOverrides): Promise<BigNumber>;

    getMotion(
      _motionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<VotingReputationDataTypes.MotionStructOutput>;

    getStake(
      _motionId: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExpenditureMotionCount(
      _structHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExpenditurePastVote(
      _actionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMotionState(
      _motionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getVoterReward(
      _motionId: BigNumberish,
      _voterRep: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoterRewardRange(
      _motionId: BigNumberish,
      _voterRep: BigNumberish,
      _voterAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _rewardMin: BigNumber; _rewardMax: BigNumber }
    >;

    getStakerReward(
      _motionId: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _reward: BigNumber; _penalty: BigNumber }
    >;

    createClaimDelayAction(
      action: BytesLike,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "ExtensionInitialised()"(): ExtensionInitialisedEventFilter;
    ExtensionInitialised(): ExtensionInitialisedEventFilter;

    "LogSetAuthority(address)"(
      authority?: string | null
    ): LogSetAuthorityEventFilter;
    LogSetAuthority(authority?: string | null): LogSetAuthorityEventFilter;

    "LogSetOwner(address)"(owner?: string | null): LogSetOwnerEventFilter;
    LogSetOwner(owner?: string | null): LogSetOwnerEventFilter;

    "MetaTransactionExecuted(address,address,bytes)"(
      user?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;
    MetaTransactionExecuted(
      user?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;

    "MotionCreated(uint256,address,uint256)"(
      motionId?: BigNumberish | null,
      creator?: null,
      domainId?: BigNumberish | null
    ): MotionCreatedEventFilter;
    MotionCreated(
      motionId?: BigNumberish | null,
      creator?: null,
      domainId?: BigNumberish | null
    ): MotionCreatedEventFilter;

    "MotionEscalated(uint256,address,uint256,uint256)"(
      motionId?: BigNumberish | null,
      escalator?: null,
      domainId?: BigNumberish | null,
      newDomainId?: BigNumberish | null
    ): MotionEscalatedEventFilter;
    MotionEscalated(
      motionId?: BigNumberish | null,
      escalator?: null,
      domainId?: BigNumberish | null,
      newDomainId?: BigNumberish | null
    ): MotionEscalatedEventFilter;

    "MotionEventSet(uint256,uint256)"(
      motionId?: BigNumberish | null,
      eventIndex?: null
    ): MotionEventSetEventFilter;
    MotionEventSet(
      motionId?: BigNumberish | null,
      eventIndex?: null
    ): MotionEventSetEventFilter;

    "MotionFinalized(uint256,bytes,bool)"(
      motionId?: BigNumberish | null,
      action?: null,
      executed?: null
    ): MotionFinalizedEventFilter;
    MotionFinalized(
      motionId?: BigNumberish | null,
      action?: null,
      executed?: null
    ): MotionFinalizedEventFilter;

    "MotionRewardClaimed(uint256,address,uint256,uint256)"(
      motionId?: BigNumberish | null,
      staker?: string | null,
      vote?: BigNumberish | null,
      amount?: null
    ): MotionRewardClaimedEventFilter;
    MotionRewardClaimed(
      motionId?: BigNumberish | null,
      staker?: string | null,
      vote?: BigNumberish | null,
      amount?: null
    ): MotionRewardClaimedEventFilter;

    "MotionStaked(uint256,address,uint256,uint256)"(
      motionId?: BigNumberish | null,
      staker?: string | null,
      vote?: BigNumberish | null,
      amount?: null
    ): MotionStakedEventFilter;
    MotionStaked(
      motionId?: BigNumberish | null,
      staker?: string | null,
      vote?: BigNumberish | null,
      amount?: null
    ): MotionStakedEventFilter;

    "MotionVoteRevealed(uint256,address,uint256)"(
      motionId?: BigNumberish | null,
      voter?: string | null,
      vote?: BigNumberish | null
    ): MotionVoteRevealedEventFilter;
    MotionVoteRevealed(
      motionId?: BigNumberish | null,
      voter?: string | null,
      vote?: BigNumberish | null
    ): MotionVoteRevealedEventFilter;

    "MotionVoteSubmitted(uint256,address)"(
      motionId?: BigNumberish | null,
      voter?: string | null
    ): MotionVoteSubmittedEventFilter;
    MotionVoteSubmitted(
      motionId?: BigNumberish | null,
      voter?: string | null
    ): MotionVoteSubmittedEventFilter;
  };

  estimateGas: {
    authority(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Main function to be called when user wants to execute meta transaction. The actual function to be called should be passed as param with name functionSignature Here the basic signature recovery is being used. Signature is expected to be generated using personal_sign method.
     * @param _payload Function call to make via meta transaction
     * @param _sigR R part of the signature
     * @param _sigS S part of the signature
     * @param _sigV V part of the signature
     * @param _user Address of user trying to do meta transaction
     */
    executeMetaTransaction(
      _user: string,
      _payload: BytesLike,
      _sigR: BytesLike,
      _sigS: BytesLike,
      _sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCapabilityRoles(
      _sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getColony(overrides?: CallOverrides): Promise<BigNumber>;

    getDeprecated(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setAuthority(
      authority_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      owner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verify(
      _owner: string,
      _nonce: BigNumberish,
      _chainId: BigNumberish,
      _payload: BytesLike,
      _sigR: BytesLike,
      _sigS: BytesLike,
      _sigV: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMetatransactionNonce(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    identifier(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    install(
      _colony: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialise(
      _totalStakeFraction: BigNumberish,
      _voterRewardFraction: BigNumberish,
      _userMinStakeFraction: BigNumberish,
      _maxVoteFraction: BigNumberish,
      _stakePeriod: BigNumberish,
      _submitPeriod: BigNumberish,
      _revealPeriod: BigNumberish,
      _escalationPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finishUpgrade(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deprecate(
      _deprecated: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uninstall(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createMotion(
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _altTarget: string,
      _action: BytesLike,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createRootMotion(
      _altTarget: string,
      _action: BytesLike,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createDomainMotion(
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _action: BytesLike,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeMotion(
      _motionId: BigNumberish,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _vote: BigNumberish,
      _amount: BigNumberish,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitVote(
      _motionId: BigNumberish,
      _voteSecret: BytesLike,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revealVote(
      _motionId: BigNumberish,
      _salt: BytesLike,
      _vote: BigNumberish,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    escalateMotion(
      _motionId: BigNumberish,
      _newDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finalizeMotion(
      _motionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    failingExecutionAllowed(
      _motionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimReward(
      _motionId: BigNumberish,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTotalStakeFraction(overrides?: CallOverrides): Promise<BigNumber>;

    getVoterRewardFraction(overrides?: CallOverrides): Promise<BigNumber>;

    getUserMinStakeFraction(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxVoteFraction(overrides?: CallOverrides): Promise<BigNumber>;

    getStakePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getSubmitPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getRevealPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getEscalationPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getMotionCount(overrides?: CallOverrides): Promise<BigNumber>;

    getMotion(
      _motionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStake(
      _motionId: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExpenditureMotionCount(
      _structHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExpenditurePastVote(
      _actionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMotionState(
      _motionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoterReward(
      _motionId: BigNumberish,
      _voterRep: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoterRewardRange(
      _motionId: BigNumberish,
      _voterRep: BigNumberish,
      _voterAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakerReward(
      _motionId: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createClaimDelayAction(
      action: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Main function to be called when user wants to execute meta transaction. The actual function to be called should be passed as param with name functionSignature Here the basic signature recovery is being used. Signature is expected to be generated using personal_sign method.
     * @param _payload Function call to make via meta transaction
     * @param _sigR R part of the signature
     * @param _sigS S part of the signature
     * @param _sigV V part of the signature
     * @param _user Address of user trying to do meta transaction
     */
    executeMetaTransaction(
      _user: string,
      _payload: BytesLike,
      _sigR: BytesLike,
      _sigS: BytesLike,
      _sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCapabilityRoles(
      _sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getColony(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDeprecated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAuthority(
      authority_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      owner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verify(
      _owner: string,
      _nonce: BigNumberish,
      _chainId: BigNumberish,
      _payload: BytesLike,
      _sigR: BytesLike,
      _sigS: BytesLike,
      _sigV: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMetatransactionNonce(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    identifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    install(
      _colony: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialise(
      _totalStakeFraction: BigNumberish,
      _voterRewardFraction: BigNumberish,
      _userMinStakeFraction: BigNumberish,
      _maxVoteFraction: BigNumberish,
      _stakePeriod: BigNumberish,
      _submitPeriod: BigNumberish,
      _revealPeriod: BigNumberish,
      _escalationPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finishUpgrade(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deprecate(
      _deprecated: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uninstall(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createMotion(
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _altTarget: string,
      _action: BytesLike,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createRootMotion(
      _altTarget: string,
      _action: BytesLike,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createDomainMotion(
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _action: BytesLike,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeMotion(
      _motionId: BigNumberish,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _vote: BigNumberish,
      _amount: BigNumberish,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitVote(
      _motionId: BigNumberish,
      _voteSecret: BytesLike,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revealVote(
      _motionId: BigNumberish,
      _salt: BytesLike,
      _vote: BigNumberish,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    escalateMotion(
      _motionId: BigNumberish,
      _newDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finalizeMotion(
      _motionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    failingExecutionAllowed(
      _motionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimReward(
      _motionId: BigNumberish,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTotalStakeFraction(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoterRewardFraction(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserMinStakeFraction(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxVoteFraction(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSubmitPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRevealPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEscalationPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMotionCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMotion(
      _motionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStake(
      _motionId: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExpenditureMotionCount(
      _structHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExpenditurePastVote(
      _actionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMotionState(
      _motionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoterReward(
      _motionId: BigNumberish,
      _voterRep: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoterRewardRange(
      _motionId: BigNumberish,
      _voterRep: BigNumberish,
      _voterAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakerReward(
      _motionId: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createClaimDelayAction(
      action: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
