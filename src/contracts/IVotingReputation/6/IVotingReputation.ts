/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace VotingReputationDataTypes {
  export type MotionStruct = {
    events: [BigNumberish, BigNumberish, BigNumberish];
    rootHash: BytesLike;
    domainId: BigNumberish;
    skillId: BigNumberish;
    skillRep: BigNumberish;
    repSubmitted: BigNumberish;
    paidVoterComp: BigNumberish;
    pastVoterComp: [BigNumberish, BigNumberish];
    stakes: [BigNumberish, BigNumberish];
    votes: [BigNumberish, BigNumberish];
    escalated: boolean;
    finalized: boolean;
    altTarget: string;
    action: BytesLike;
  };

  export type MotionStructOutput = [
    [BigNumber, BigNumber, BigNumber],
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    [BigNumber, BigNumber],
    [BigNumber, BigNumber],
    [BigNumber, BigNumber],
    boolean,
    boolean,
    string,
    string
  ] & {
    events: [BigNumber, BigNumber, BigNumber];
    rootHash: string;
    domainId: BigNumber;
    skillId: BigNumber;
    skillRep: BigNumber;
    repSubmitted: BigNumber;
    paidVoterComp: BigNumber;
    pastVoterComp: [BigNumber, BigNumber];
    stakes: [BigNumber, BigNumber];
    votes: [BigNumber, BigNumber];
    escalated: boolean;
    finalized: boolean;
    altTarget: string;
    action: string;
  };
}

export interface IVotingReputationInterface extends utils.Interface {
  functions: {
    "deprecate(bool)": FunctionFragment;
    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": FunctionFragment;
    "finishUpgrade()": FunctionFragment;
    "getCapabilityRoles(bytes4)": FunctionFragment;
    "getColony()": FunctionFragment;
    "getDeprecated()": FunctionFragment;
    "getMetatransactionNonce(address)": FunctionFragment;
    "identifier()": FunctionFragment;
    "install(address)": FunctionFragment;
    "uninstall()": FunctionFragment;
    "version()": FunctionFragment;
    "initialise(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "createMotion(uint256,uint256,address,bytes,bytes,bytes,uint256,bytes32[])": FunctionFragment;
    "createRootMotion(address,bytes,bytes,bytes,uint256,bytes32[])": FunctionFragment;
    "createDomainMotion(uint256,uint256,bytes,bytes,bytes,uint256,bytes32[])": FunctionFragment;
    "stakeMotion(uint256,uint256,uint256,uint256,uint256,bytes,bytes,uint256,bytes32[])": FunctionFragment;
    "submitVote(uint256,bytes32,bytes,bytes,uint256,bytes32[])": FunctionFragment;
    "revealVote(uint256,bytes32,uint256,bytes,bytes,uint256,bytes32[])": FunctionFragment;
    "escalateMotion(uint256,uint256,uint256,bytes,bytes,uint256,bytes32[])": FunctionFragment;
    "finalizeMotion(uint256)": FunctionFragment;
    "failingExecutionAllowed(uint256)": FunctionFragment;
    "claimReward(uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "getTotalStakeFraction()": FunctionFragment;
    "getVoterRewardFraction()": FunctionFragment;
    "getUserMinStakeFraction()": FunctionFragment;
    "getMaxVoteFraction()": FunctionFragment;
    "getStakePeriod()": FunctionFragment;
    "getSubmitPeriod()": FunctionFragment;
    "getRevealPeriod()": FunctionFragment;
    "getEscalationPeriod()": FunctionFragment;
    "getMotionCount()": FunctionFragment;
    "getMotion(uint256)": FunctionFragment;
    "getStake(uint256,address,uint256)": FunctionFragment;
    "getExpenditureMotionCount(bytes32)": FunctionFragment;
    "getExpenditurePastVote(bytes32)": FunctionFragment;
    "getMotionState(uint256)": FunctionFragment;
    "getVoterReward(uint256,uint256)": FunctionFragment;
    "getVoterRewardRange(uint256,uint256,address)": FunctionFragment;
    "getStakerReward(uint256,address,uint256)": FunctionFragment;
    "createClaimDelayAction(bytes,uint256)": FunctionFragment;
    "claimMisalignedReward(uint256,uint256,uint256,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deprecate"
      | "executeMetaTransaction"
      | "finishUpgrade"
      | "getCapabilityRoles"
      | "getColony"
      | "getDeprecated"
      | "getMetatransactionNonce"
      | "identifier"
      | "install"
      | "uninstall"
      | "version"
      | "initialise"
      | "createMotion"
      | "createRootMotion"
      | "createDomainMotion"
      | "stakeMotion"
      | "submitVote"
      | "revealVote"
      | "escalateMotion"
      | "finalizeMotion"
      | "failingExecutionAllowed"
      | "claimReward"
      | "getTotalStakeFraction"
      | "getVoterRewardFraction"
      | "getUserMinStakeFraction"
      | "getMaxVoteFraction"
      | "getStakePeriod"
      | "getSubmitPeriod"
      | "getRevealPeriod"
      | "getEscalationPeriod"
      | "getMotionCount"
      | "getMotion"
      | "getStake"
      | "getExpenditureMotionCount"
      | "getExpenditurePastVote"
      | "getMotionState"
      | "getVoterReward"
      | "getVoterRewardRange"
      | "getStakerReward"
      | "createClaimDelayAction"
      | "claimMisalignedReward"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "deprecate", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "executeMetaTransaction",
    values: [string, BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finishUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCapabilityRoles",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getColony", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getDeprecated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMetatransactionNonce",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "identifier",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "install", values: [string]): string;
  encodeFunctionData(functionFragment: "uninstall", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialise",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createMotion",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createRootMotion",
    values: [string, BytesLike, BytesLike, BytesLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createDomainMotion",
    values: [
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeMotion",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BigNumberish,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submitVote",
    values: [
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revealVote",
    values: [
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike,
      BigNumberish,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "escalateMotion",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BigNumberish,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeMotion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "failingExecutionAllowed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalStakeFraction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterRewardFraction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserMinStakeFraction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxVoteFraction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSubmitPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRevealPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEscalationPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMotionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMotion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStake",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpenditureMotionCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpenditurePastVote",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMotionState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterReward",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterRewardRange",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakerReward",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createClaimDelayAction",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimMisalignedReward",
    values: [BigNumberish, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "deprecate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeMetaTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCapabilityRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getColony", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDeprecated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetatransactionNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "identifier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "install", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uninstall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialise", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createMotion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRootMotion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDomainMotion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeMotion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revealVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "escalateMotion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeMotion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "failingExecutionAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalStakeFraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterRewardFraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserMinStakeFraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxVoteFraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubmitPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRevealPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEscalationPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMotionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMotion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExpenditureMotionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpenditurePastVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMotionState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterRewardRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakerReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createClaimDelayAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimMisalignedReward",
    data: BytesLike
  ): Result;

  events: {
    "MetaTransactionExecuted(address,address,bytes)": EventFragment;
    "MotionCreated(uint256,address,uint256)": EventFragment;
    "MotionEscalated(uint256,address,uint256,uint256)": EventFragment;
    "MotionEventSet(uint256,uint256)": EventFragment;
    "MotionFinalized(uint256,bytes,bool)": EventFragment;
    "MotionRewardClaimed(uint256,address,uint256,uint256)": EventFragment;
    "MotionStaked(uint256,address,uint256,uint256)": EventFragment;
    "MotionVoteRevealed(uint256,address,uint256)": EventFragment;
    "MotionVoteSubmitted(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MotionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MotionEscalated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MotionEventSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MotionFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MotionRewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MotionStaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MotionVoteRevealed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MotionVoteSubmitted"): EventFragment;
}

export interface MetaTransactionExecutedEventObject {
  userAddress: string;
  relayerAddress: string;
  payload: string;
}
export type MetaTransactionExecutedEvent = TypedEvent<
  [string, string, string],
  MetaTransactionExecutedEventObject
>;

export type MetaTransactionExecutedEventFilter =
  TypedEventFilter<MetaTransactionExecutedEvent>;

export interface MotionCreatedEventObject {
  motionId: BigNumber;
  creator: string;
  domainId: BigNumber;
}
export type MotionCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  MotionCreatedEventObject
>;

export type MotionCreatedEventFilter = TypedEventFilter<MotionCreatedEvent>;

export interface MotionEscalatedEventObject {
  motionId: BigNumber;
  escalator: string;
  domainId: BigNumber;
  newDomainId: BigNumber;
}
export type MotionEscalatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  MotionEscalatedEventObject
>;

export type MotionEscalatedEventFilter = TypedEventFilter<MotionEscalatedEvent>;

export interface MotionEventSetEventObject {
  motionId: BigNumber;
  eventIndex: BigNumber;
}
export type MotionEventSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  MotionEventSetEventObject
>;

export type MotionEventSetEventFilter = TypedEventFilter<MotionEventSetEvent>;

export interface MotionFinalizedEventObject {
  motionId: BigNumber;
  action: string;
  executed: boolean;
}
export type MotionFinalizedEvent = TypedEvent<
  [BigNumber, string, boolean],
  MotionFinalizedEventObject
>;

export type MotionFinalizedEventFilter = TypedEventFilter<MotionFinalizedEvent>;

export interface MotionRewardClaimedEventObject {
  motionId: BigNumber;
  staker: string;
  vote: BigNumber;
  amount: BigNumber;
}
export type MotionRewardClaimedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  MotionRewardClaimedEventObject
>;

export type MotionRewardClaimedEventFilter =
  TypedEventFilter<MotionRewardClaimedEvent>;

export interface MotionStakedEventObject {
  motionId: BigNumber;
  staker: string;
  vote: BigNumber;
  amount: BigNumber;
}
export type MotionStakedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  MotionStakedEventObject
>;

export type MotionStakedEventFilter = TypedEventFilter<MotionStakedEvent>;

export interface MotionVoteRevealedEventObject {
  motionId: BigNumber;
  voter: string;
  vote: BigNumber;
}
export type MotionVoteRevealedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  MotionVoteRevealedEventObject
>;

export type MotionVoteRevealedEventFilter =
  TypedEventFilter<MotionVoteRevealedEvent>;

export interface MotionVoteSubmittedEventObject {
  motionId: BigNumber;
  voter: string;
}
export type MotionVoteSubmittedEvent = TypedEvent<
  [BigNumber, string],
  MotionVoteSubmittedEventObject
>;

export type MotionVoteSubmittedEventFilter =
  TypedEventFilter<MotionVoteSubmittedEvent>;

export interface IVotingReputation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVotingReputationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deprecate(
      _deprecated: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Executes a metatransaction targeting this contract
     * @param payload The transaction data that will be executed if signature valid
     * @param sigR The 'r' part of the signature
     * @param sigS The 's' part of the signature
     * @param sigV The 'v' part of the signature
     * @param userAddress The address of the user that signed the metatransaction
     */
    executeMetaTransaction(
      userAddress: string,
      payload: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finishUpgrade(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCapabilityRoles(
      _sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getColony(overrides?: CallOverrides): Promise<[string]>;

    getDeprecated(overrides?: CallOverrides): Promise<[boolean]>;

    /**
     * Gets the next metatransaction nonce for user that should be used targeting this contract
     * @param userAddress The address of the user that will sign the metatransaction
     */
    getMetatransactionNonce(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    identifier(overrides?: CallOverrides): Promise<[string]>;

    install(
      _colony: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uninstall(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Initialise the extension
     * @param _escalationPeriod The length of the escalation period in seconds
     * @param _maxVoteFraction The fraction of the domain's reputation which must submit for quick-end
     * @param _revealPeriod The length of the reveal period in seconds
     * @param _stakePeriod The length of the staking period in seconds
     * @param _submitPeriod The length of the submit period in seconds
     * @param _totalStakeFraction The fraction of the domain's reputation we need to stake
     * @param _userMinStakeFraction The minimum per-user stake as fraction of total stake
     * @param _voterRewardFraction The fraction of the total stake paid out to voters as rewards
     */
    initialise(
      _totalStakeFraction: BigNumberish,
      _voterRewardFraction: BigNumberish,
      _userMinStakeFraction: BigNumberish,
      _maxVoteFraction: BigNumberish,
      _stakePeriod: BigNumberish,
      _submitPeriod: BigNumberish,
      _revealPeriod: BigNumberish,
      _escalationPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Create a motion
     * @param _action A bytes array encoding a function call
     * @param _altTarget The contract to which we send the action (0x0 for the colony)
     * @param _branchMask The branchmask of the proof
     * @param _childSkillIndex The childSkillIndex pointing to the domain of the action
     * @param _domainId The domain where we vote on the motion
     * @param _key Reputation tree key for the root domain
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the root domain
     */
    createMotion(
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _altTarget: string,
      _action: BytesLike,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Create a motion in the root domain (DEPRECATED)
     * @param _action A bytes array encoding a function call
     * @param _altTarget The contract to which we send the action (0x0 for the colony)
     * @param _branchMask The branchmask of the proof
     * @param _key Reputation tree key for the root domain
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the root domain
     */
    createRootMotion(
      _altTarget: string,
      _action: BytesLike,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Create a motion in any domain (DEPRECATED)
     * @param _action A bytes array encoding a function call
     * @param _branchMask The branchmask of the proof
     * @param _childSkillIndex The childSkillIndex pointing to the domain of the action
     * @param _domainId The domain where we vote on the motion
     * @param _key Reputation tree key for the domain
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the domain
     */
    createDomainMotion(
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _action: BytesLike,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Stake on a motion
     * @param _amount The amount of tokens being staked
     * @param _branchMask The branchmask of the proof
     * @param _childSkillIndex For the domain in which the motion is occurring
     * @param _key Reputation tree key for the staker/domain
     * @param _motionId The id of the motion
     * @param _permissionDomainId The domain where the extension has the arbitration permission
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the staker/domain
     * @param _vote The side being supported (0 = NAY, 1 = YAY)
     */
    stakeMotion(
      _motionId: BigNumberish,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _vote: BigNumberish,
      _amount: BigNumberish,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Submit a vote secret for a motion
     * @param _branchMask The branchmask of the proof
     * @param _key Reputation tree key for the staker/domain
     * @param _motionId The id of the motion
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the staker/domain
     * @param _voteSecret The hashed vote secret
     */
    submitVote(
      _motionId: BigNumberish,
      _voteSecret: BytesLike,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Reveal a vote secret for a motion
     * @param _branchMask The branchmask of the proof
     * @param _key Reputation tree key for the staker/domain
     * @param _motionId The id of the motion
     * @param _salt The salt used to hash the vote
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the staker/domain
     * @param _vote The side being supported (0 = NAY, 1 = YAY)
     */
    revealVote(
      _motionId: BigNumberish,
      _salt: BytesLike,
      _vote: BigNumberish,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Escalate a motion to a higher domain
     * @param _branchMask The branchmask of the proof
     * @param _childSkillIndex For the current domain, relative to the escalated domain
     * @param _key Reputation tree key for the new domain
     * @param _motionId The id of the motion
     * @param _newDomainId The desired domain of escalation
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the new domain
     */
    escalateMotion(
      _motionId: BigNumberish,
      _newDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finalizeMotion(
      _motionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * We are only expecting this to be called from finalize motion in the contracts. It is marked as external only so that the frontend can use it.
     * @param _motionId The id of the motion
     */
    failingExecutionAllowed(
      _motionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Claim the staker's reward
     * @param _childSkillIndex For the domain in which the motion is occurring
     * @param _motionId The id of the motion
     * @param _permissionDomainId The domain where the extension has the arbitration permission
     * @param _staker The staker whose reward is being claimed
     * @param _vote The side being supported (0 = NAY, 1 = YAY)
     */
    claimReward(
      _motionId: BigNumberish,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Get the total stake fraction
     */
    getTotalStakeFraction(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Get the voter reward fraction
     */
    getVoterRewardFraction(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Get the user min stake fraction
     */
    getUserMinStakeFraction(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Get the max vote fraction
     */
    getMaxVoteFraction(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Get the stake period
     */
    getStakePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Get the submit period
     */
    getSubmitPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Get the reveal period
     */
    getRevealPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Get the escalation period
     */
    getEscalationPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Get the total motion count
     */
    getMotionCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Get the data for a single motion
     * @param _motionId The id of the motion
     */
    getMotion(
      _motionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [VotingReputationDataTypes.MotionStructOutput] & {
        motion: VotingReputationDataTypes.MotionStructOutput;
      }
    >;

    /**
     * Get a user's stake on a motion
     * @param _motionId The id of the motion
     * @param _staker The staker address
     * @param _vote The side being supported (0 = NAY, 1 = YAY)
     */
    getStake(
      _motionId: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Get the number of ongoing motions for a single expenditure / expenditure slot
     * @param _structHash The hash of the expenditureId or expenditureId*expenditureSlot
     */
    getExpenditureMotionCount(
      _structHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Get the largest past vote on a single expenditure variable
     * @param _actionHash The hash of the particular expenditure action
     */
    getExpenditurePastVote(
      _actionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Get the current state of the motion
     */
    getMotionState(
      _motionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    /**
     * Get the voter reward NB This function will only return a meaningful value if in the reveal state. Prior to the reveal state, getVoterRewardRange should be used.
     * @param _motionId The id of the motion
     * @param _voterRep The reputation the voter has in the domain
     */
    getVoterReward(
      _motionId: BigNumberish,
      _voterRep: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Get the range of potential rewards for a voter on a specific motion, intended to be used when the motion is in the reveal state. Once a motion is in the reveal state the reward is known, and getVoterRewardRange should be used.
     * @param _motionId The id of the motion
     * @param _voterAddress The address the user will be voting as
     * @param _voterRep The reputation the voter has in the domain
     */
    getVoterRewardRange(
      _motionId: BigNumberish,
      _voterRep: BigNumberish,
      _voterAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    /**
     * Get the staker reward
     * @param _motionId The id of the motion
     * @param _staker The staker's address
     * @param _vote The vote (0 = NAY, 1 = YAY)
     */
    getStakerReward(
      _motionId: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    createClaimDelayAction(
      action: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimMisalignedReward(
      _motionId: BigNumberish,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  deprecate(
    _deprecated: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Executes a metatransaction targeting this contract
   * @param payload The transaction data that will be executed if signature valid
   * @param sigR The 'r' part of the signature
   * @param sigS The 's' part of the signature
   * @param sigV The 'v' part of the signature
   * @param userAddress The address of the user that signed the metatransaction
   */
  executeMetaTransaction(
    userAddress: string,
    payload: BytesLike,
    sigR: BytesLike,
    sigS: BytesLike,
    sigV: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finishUpgrade(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCapabilityRoles(
    _sig: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getColony(overrides?: CallOverrides): Promise<string>;

  getDeprecated(overrides?: CallOverrides): Promise<boolean>;

  /**
   * Gets the next metatransaction nonce for user that should be used targeting this contract
   * @param userAddress The address of the user that will sign the metatransaction
   */
  getMetatransactionNonce(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  identifier(overrides?: CallOverrides): Promise<string>;

  install(
    _colony: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uninstall(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Initialise the extension
   * @param _escalationPeriod The length of the escalation period in seconds
   * @param _maxVoteFraction The fraction of the domain's reputation which must submit for quick-end
   * @param _revealPeriod The length of the reveal period in seconds
   * @param _stakePeriod The length of the staking period in seconds
   * @param _submitPeriod The length of the submit period in seconds
   * @param _totalStakeFraction The fraction of the domain's reputation we need to stake
   * @param _userMinStakeFraction The minimum per-user stake as fraction of total stake
   * @param _voterRewardFraction The fraction of the total stake paid out to voters as rewards
   */
  initialise(
    _totalStakeFraction: BigNumberish,
    _voterRewardFraction: BigNumberish,
    _userMinStakeFraction: BigNumberish,
    _maxVoteFraction: BigNumberish,
    _stakePeriod: BigNumberish,
    _submitPeriod: BigNumberish,
    _revealPeriod: BigNumberish,
    _escalationPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Create a motion
   * @param _action A bytes array encoding a function call
   * @param _altTarget The contract to which we send the action (0x0 for the colony)
   * @param _branchMask The branchmask of the proof
   * @param _childSkillIndex The childSkillIndex pointing to the domain of the action
   * @param _domainId The domain where we vote on the motion
   * @param _key Reputation tree key for the root domain
   * @param _siblings The siblings of the proof
   * @param _value Reputation tree value for the root domain
   */
  createMotion(
    _domainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _altTarget: string,
    _action: BytesLike,
    _key: BytesLike,
    _value: BytesLike,
    _branchMask: BigNumberish,
    _siblings: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Create a motion in the root domain (DEPRECATED)
   * @param _action A bytes array encoding a function call
   * @param _altTarget The contract to which we send the action (0x0 for the colony)
   * @param _branchMask The branchmask of the proof
   * @param _key Reputation tree key for the root domain
   * @param _siblings The siblings of the proof
   * @param _value Reputation tree value for the root domain
   */
  createRootMotion(
    _altTarget: string,
    _action: BytesLike,
    _key: BytesLike,
    _value: BytesLike,
    _branchMask: BigNumberish,
    _siblings: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Create a motion in any domain (DEPRECATED)
   * @param _action A bytes array encoding a function call
   * @param _branchMask The branchmask of the proof
   * @param _childSkillIndex The childSkillIndex pointing to the domain of the action
   * @param _domainId The domain where we vote on the motion
   * @param _key Reputation tree key for the domain
   * @param _siblings The siblings of the proof
   * @param _value Reputation tree value for the domain
   */
  createDomainMotion(
    _domainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _action: BytesLike,
    _key: BytesLike,
    _value: BytesLike,
    _branchMask: BigNumberish,
    _siblings: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Stake on a motion
   * @param _amount The amount of tokens being staked
   * @param _branchMask The branchmask of the proof
   * @param _childSkillIndex For the domain in which the motion is occurring
   * @param _key Reputation tree key for the staker/domain
   * @param _motionId The id of the motion
   * @param _permissionDomainId The domain where the extension has the arbitration permission
   * @param _siblings The siblings of the proof
   * @param _value Reputation tree value for the staker/domain
   * @param _vote The side being supported (0 = NAY, 1 = YAY)
   */
  stakeMotion(
    _motionId: BigNumberish,
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _vote: BigNumberish,
    _amount: BigNumberish,
    _key: BytesLike,
    _value: BytesLike,
    _branchMask: BigNumberish,
    _siblings: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Submit a vote secret for a motion
   * @param _branchMask The branchmask of the proof
   * @param _key Reputation tree key for the staker/domain
   * @param _motionId The id of the motion
   * @param _siblings The siblings of the proof
   * @param _value Reputation tree value for the staker/domain
   * @param _voteSecret The hashed vote secret
   */
  submitVote(
    _motionId: BigNumberish,
    _voteSecret: BytesLike,
    _key: BytesLike,
    _value: BytesLike,
    _branchMask: BigNumberish,
    _siblings: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Reveal a vote secret for a motion
   * @param _branchMask The branchmask of the proof
   * @param _key Reputation tree key for the staker/domain
   * @param _motionId The id of the motion
   * @param _salt The salt used to hash the vote
   * @param _siblings The siblings of the proof
   * @param _value Reputation tree value for the staker/domain
   * @param _vote The side being supported (0 = NAY, 1 = YAY)
   */
  revealVote(
    _motionId: BigNumberish,
    _salt: BytesLike,
    _vote: BigNumberish,
    _key: BytesLike,
    _value: BytesLike,
    _branchMask: BigNumberish,
    _siblings: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Escalate a motion to a higher domain
   * @param _branchMask The branchmask of the proof
   * @param _childSkillIndex For the current domain, relative to the escalated domain
   * @param _key Reputation tree key for the new domain
   * @param _motionId The id of the motion
   * @param _newDomainId The desired domain of escalation
   * @param _siblings The siblings of the proof
   * @param _value Reputation tree value for the new domain
   */
  escalateMotion(
    _motionId: BigNumberish,
    _newDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _key: BytesLike,
    _value: BytesLike,
    _branchMask: BigNumberish,
    _siblings: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finalizeMotion(
    _motionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * We are only expecting this to be called from finalize motion in the contracts. It is marked as external only so that the frontend can use it.
   * @param _motionId The id of the motion
   */
  failingExecutionAllowed(
    _motionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Claim the staker's reward
   * @param _childSkillIndex For the domain in which the motion is occurring
   * @param _motionId The id of the motion
   * @param _permissionDomainId The domain where the extension has the arbitration permission
   * @param _staker The staker whose reward is being claimed
   * @param _vote The side being supported (0 = NAY, 1 = YAY)
   */
  claimReward(
    _motionId: BigNumberish,
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _staker: string,
    _vote: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Get the total stake fraction
   */
  getTotalStakeFraction(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Get the voter reward fraction
   */
  getVoterRewardFraction(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Get the user min stake fraction
   */
  getUserMinStakeFraction(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Get the max vote fraction
   */
  getMaxVoteFraction(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Get the stake period
   */
  getStakePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Get the submit period
   */
  getSubmitPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Get the reveal period
   */
  getRevealPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Get the escalation period
   */
  getEscalationPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Get the total motion count
   */
  getMotionCount(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Get the data for a single motion
   * @param _motionId The id of the motion
   */
  getMotion(
    _motionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<VotingReputationDataTypes.MotionStructOutput>;

  /**
   * Get a user's stake on a motion
   * @param _motionId The id of the motion
   * @param _staker The staker address
   * @param _vote The side being supported (0 = NAY, 1 = YAY)
   */
  getStake(
    _motionId: BigNumberish,
    _staker: string,
    _vote: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Get the number of ongoing motions for a single expenditure / expenditure slot
   * @param _structHash The hash of the expenditureId or expenditureId*expenditureSlot
   */
  getExpenditureMotionCount(
    _structHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Get the largest past vote on a single expenditure variable
   * @param _actionHash The hash of the particular expenditure action
   */
  getExpenditurePastVote(
    _actionHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Get the current state of the motion
   */
  getMotionState(
    _motionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  /**
   * Get the voter reward NB This function will only return a meaningful value if in the reveal state. Prior to the reveal state, getVoterRewardRange should be used.
   * @param _motionId The id of the motion
   * @param _voterRep The reputation the voter has in the domain
   */
  getVoterReward(
    _motionId: BigNumberish,
    _voterRep: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Get the range of potential rewards for a voter on a specific motion, intended to be used when the motion is in the reveal state. Once a motion is in the reveal state the reward is known, and getVoterRewardRange should be used.
   * @param _motionId The id of the motion
   * @param _voterAddress The address the user will be voting as
   * @param _voterRep The reputation the voter has in the domain
   */
  getVoterRewardRange(
    _motionId: BigNumberish,
    _voterRep: BigNumberish,
    _voterAddress: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  /**
   * Get the staker reward
   * @param _motionId The id of the motion
   * @param _staker The staker's address
   * @param _vote The vote (0 = NAY, 1 = YAY)
   */
  getStakerReward(
    _motionId: BigNumberish,
    _staker: string,
    _vote: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  createClaimDelayAction(
    action: BytesLike,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimMisalignedReward(
    _motionId: BigNumberish,
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _staker: string,
    _vote: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deprecate(_deprecated: boolean, overrides?: CallOverrides): Promise<void>;

    /**
     * Executes a metatransaction targeting this contract
     * @param payload The transaction data that will be executed if signature valid
     * @param sigR The 'r' part of the signature
     * @param sigS The 's' part of the signature
     * @param sigV The 'v' part of the signature
     * @param userAddress The address of the user that signed the metatransaction
     */
    executeMetaTransaction(
      userAddress: string,
      payload: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    finishUpgrade(overrides?: CallOverrides): Promise<void>;

    getCapabilityRoles(
      _sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getColony(overrides?: CallOverrides): Promise<string>;

    getDeprecated(overrides?: CallOverrides): Promise<boolean>;

    /**
     * Gets the next metatransaction nonce for user that should be used targeting this contract
     * @param userAddress The address of the user that will sign the metatransaction
     */
    getMetatransactionNonce(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    identifier(overrides?: CallOverrides): Promise<string>;

    install(_colony: string, overrides?: CallOverrides): Promise<void>;

    uninstall(overrides?: CallOverrides): Promise<void>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Initialise the extension
     * @param _escalationPeriod The length of the escalation period in seconds
     * @param _maxVoteFraction The fraction of the domain's reputation which must submit for quick-end
     * @param _revealPeriod The length of the reveal period in seconds
     * @param _stakePeriod The length of the staking period in seconds
     * @param _submitPeriod The length of the submit period in seconds
     * @param _totalStakeFraction The fraction of the domain's reputation we need to stake
     * @param _userMinStakeFraction The minimum per-user stake as fraction of total stake
     * @param _voterRewardFraction The fraction of the total stake paid out to voters as rewards
     */
    initialise(
      _totalStakeFraction: BigNumberish,
      _voterRewardFraction: BigNumberish,
      _userMinStakeFraction: BigNumberish,
      _maxVoteFraction: BigNumberish,
      _stakePeriod: BigNumberish,
      _submitPeriod: BigNumberish,
      _revealPeriod: BigNumberish,
      _escalationPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Create a motion
     * @param _action A bytes array encoding a function call
     * @param _altTarget The contract to which we send the action (0x0 for the colony)
     * @param _branchMask The branchmask of the proof
     * @param _childSkillIndex The childSkillIndex pointing to the domain of the action
     * @param _domainId The domain where we vote on the motion
     * @param _key Reputation tree key for the root domain
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the root domain
     */
    createMotion(
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _altTarget: string,
      _action: BytesLike,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Create a motion in the root domain (DEPRECATED)
     * @param _action A bytes array encoding a function call
     * @param _altTarget The contract to which we send the action (0x0 for the colony)
     * @param _branchMask The branchmask of the proof
     * @param _key Reputation tree key for the root domain
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the root domain
     */
    createRootMotion(
      _altTarget: string,
      _action: BytesLike,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Create a motion in any domain (DEPRECATED)
     * @param _action A bytes array encoding a function call
     * @param _branchMask The branchmask of the proof
     * @param _childSkillIndex The childSkillIndex pointing to the domain of the action
     * @param _domainId The domain where we vote on the motion
     * @param _key Reputation tree key for the domain
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the domain
     */
    createDomainMotion(
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _action: BytesLike,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Stake on a motion
     * @param _amount The amount of tokens being staked
     * @param _branchMask The branchmask of the proof
     * @param _childSkillIndex For the domain in which the motion is occurring
     * @param _key Reputation tree key for the staker/domain
     * @param _motionId The id of the motion
     * @param _permissionDomainId The domain where the extension has the arbitration permission
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the staker/domain
     * @param _vote The side being supported (0 = NAY, 1 = YAY)
     */
    stakeMotion(
      _motionId: BigNumberish,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _vote: BigNumberish,
      _amount: BigNumberish,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Submit a vote secret for a motion
     * @param _branchMask The branchmask of the proof
     * @param _key Reputation tree key for the staker/domain
     * @param _motionId The id of the motion
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the staker/domain
     * @param _voteSecret The hashed vote secret
     */
    submitVote(
      _motionId: BigNumberish,
      _voteSecret: BytesLike,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Reveal a vote secret for a motion
     * @param _branchMask The branchmask of the proof
     * @param _key Reputation tree key for the staker/domain
     * @param _motionId The id of the motion
     * @param _salt The salt used to hash the vote
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the staker/domain
     * @param _vote The side being supported (0 = NAY, 1 = YAY)
     */
    revealVote(
      _motionId: BigNumberish,
      _salt: BytesLike,
      _vote: BigNumberish,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Escalate a motion to a higher domain
     * @param _branchMask The branchmask of the proof
     * @param _childSkillIndex For the current domain, relative to the escalated domain
     * @param _key Reputation tree key for the new domain
     * @param _motionId The id of the motion
     * @param _newDomainId The desired domain of escalation
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the new domain
     */
    escalateMotion(
      _motionId: BigNumberish,
      _newDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeMotion(
      _motionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * We are only expecting this to be called from finalize motion in the contracts. It is marked as external only so that the frontend can use it.
     * @param _motionId The id of the motion
     */
    failingExecutionAllowed(
      _motionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Claim the staker's reward
     * @param _childSkillIndex For the domain in which the motion is occurring
     * @param _motionId The id of the motion
     * @param _permissionDomainId The domain where the extension has the arbitration permission
     * @param _staker The staker whose reward is being claimed
     * @param _vote The side being supported (0 = NAY, 1 = YAY)
     */
    claimReward(
      _motionId: BigNumberish,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Get the total stake fraction
     */
    getTotalStakeFraction(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the voter reward fraction
     */
    getVoterRewardFraction(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the user min stake fraction
     */
    getUserMinStakeFraction(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the max vote fraction
     */
    getMaxVoteFraction(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the stake period
     */
    getStakePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the submit period
     */
    getSubmitPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the reveal period
     */
    getRevealPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the escalation period
     */
    getEscalationPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the total motion count
     */
    getMotionCount(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the data for a single motion
     * @param _motionId The id of the motion
     */
    getMotion(
      _motionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<VotingReputationDataTypes.MotionStructOutput>;

    /**
     * Get a user's stake on a motion
     * @param _motionId The id of the motion
     * @param _staker The staker address
     * @param _vote The side being supported (0 = NAY, 1 = YAY)
     */
    getStake(
      _motionId: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get the number of ongoing motions for a single expenditure / expenditure slot
     * @param _structHash The hash of the expenditureId or expenditureId*expenditureSlot
     */
    getExpenditureMotionCount(
      _structHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get the largest past vote on a single expenditure variable
     * @param _actionHash The hash of the particular expenditure action
     */
    getExpenditurePastVote(
      _actionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get the current state of the motion
     */
    getMotionState(
      _motionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    /**
     * Get the voter reward NB This function will only return a meaningful value if in the reveal state. Prior to the reveal state, getVoterRewardRange should be used.
     * @param _motionId The id of the motion
     * @param _voterRep The reputation the voter has in the domain
     */
    getVoterReward(
      _motionId: BigNumberish,
      _voterRep: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get the range of potential rewards for a voter on a specific motion, intended to be used when the motion is in the reveal state. Once a motion is in the reveal state the reward is known, and getVoterRewardRange should be used.
     * @param _motionId The id of the motion
     * @param _voterAddress The address the user will be voting as
     * @param _voterRep The reputation the voter has in the domain
     */
    getVoterRewardRange(
      _motionId: BigNumberish,
      _voterRep: BigNumberish,
      _voterAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    /**
     * Get the staker reward
     * @param _motionId The id of the motion
     * @param _staker The staker's address
     * @param _vote The vote (0 = NAY, 1 = YAY)
     */
    getStakerReward(
      _motionId: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    createClaimDelayAction(
      action: BytesLike,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    claimMisalignedReward(
      _motionId: BigNumberish,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MetaTransactionExecuted(address,address,bytes)"(
      userAddress?: null,
      relayerAddress?: null,
      payload?: null
    ): MetaTransactionExecutedEventFilter;
    MetaTransactionExecuted(
      userAddress?: null,
      relayerAddress?: null,
      payload?: null
    ): MetaTransactionExecutedEventFilter;

    "MotionCreated(uint256,address,uint256)"(
      motionId?: BigNumberish | null,
      creator?: null,
      domainId?: BigNumberish | null
    ): MotionCreatedEventFilter;
    MotionCreated(
      motionId?: BigNumberish | null,
      creator?: null,
      domainId?: BigNumberish | null
    ): MotionCreatedEventFilter;

    "MotionEscalated(uint256,address,uint256,uint256)"(
      motionId?: BigNumberish | null,
      escalator?: null,
      domainId?: BigNumberish | null,
      newDomainId?: BigNumberish | null
    ): MotionEscalatedEventFilter;
    MotionEscalated(
      motionId?: BigNumberish | null,
      escalator?: null,
      domainId?: BigNumberish | null,
      newDomainId?: BigNumberish | null
    ): MotionEscalatedEventFilter;

    "MotionEventSet(uint256,uint256)"(
      motionId?: BigNumberish | null,
      eventIndex?: null
    ): MotionEventSetEventFilter;
    MotionEventSet(
      motionId?: BigNumberish | null,
      eventIndex?: null
    ): MotionEventSetEventFilter;

    "MotionFinalized(uint256,bytes,bool)"(
      motionId?: BigNumberish | null,
      action?: null,
      executed?: null
    ): MotionFinalizedEventFilter;
    MotionFinalized(
      motionId?: BigNumberish | null,
      action?: null,
      executed?: null
    ): MotionFinalizedEventFilter;

    "MotionRewardClaimed(uint256,address,uint256,uint256)"(
      motionId?: BigNumberish | null,
      staker?: string | null,
      vote?: BigNumberish | null,
      amount?: null
    ): MotionRewardClaimedEventFilter;
    MotionRewardClaimed(
      motionId?: BigNumberish | null,
      staker?: string | null,
      vote?: BigNumberish | null,
      amount?: null
    ): MotionRewardClaimedEventFilter;

    "MotionStaked(uint256,address,uint256,uint256)"(
      motionId?: BigNumberish | null,
      staker?: string | null,
      vote?: BigNumberish | null,
      amount?: null
    ): MotionStakedEventFilter;
    MotionStaked(
      motionId?: BigNumberish | null,
      staker?: string | null,
      vote?: BigNumberish | null,
      amount?: null
    ): MotionStakedEventFilter;

    "MotionVoteRevealed(uint256,address,uint256)"(
      motionId?: BigNumberish | null,
      voter?: string | null,
      vote?: BigNumberish | null
    ): MotionVoteRevealedEventFilter;
    MotionVoteRevealed(
      motionId?: BigNumberish | null,
      voter?: string | null,
      vote?: BigNumberish | null
    ): MotionVoteRevealedEventFilter;

    "MotionVoteSubmitted(uint256,address)"(
      motionId?: BigNumberish | null,
      voter?: string | null
    ): MotionVoteSubmittedEventFilter;
    MotionVoteSubmitted(
      motionId?: BigNumberish | null,
      voter?: string | null
    ): MotionVoteSubmittedEventFilter;
  };

  estimateGas: {
    deprecate(
      _deprecated: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Executes a metatransaction targeting this contract
     * @param payload The transaction data that will be executed if signature valid
     * @param sigR The 'r' part of the signature
     * @param sigS The 's' part of the signature
     * @param sigV The 'v' part of the signature
     * @param userAddress The address of the user that signed the metatransaction
     */
    executeMetaTransaction(
      userAddress: string,
      payload: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finishUpgrade(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCapabilityRoles(
      _sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getColony(overrides?: CallOverrides): Promise<BigNumber>;

    getDeprecated(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the next metatransaction nonce for user that should be used targeting this contract
     * @param userAddress The address of the user that will sign the metatransaction
     */
    getMetatransactionNonce(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    identifier(overrides?: CallOverrides): Promise<BigNumber>;

    install(
      _colony: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uninstall(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Initialise the extension
     * @param _escalationPeriod The length of the escalation period in seconds
     * @param _maxVoteFraction The fraction of the domain's reputation which must submit for quick-end
     * @param _revealPeriod The length of the reveal period in seconds
     * @param _stakePeriod The length of the staking period in seconds
     * @param _submitPeriod The length of the submit period in seconds
     * @param _totalStakeFraction The fraction of the domain's reputation we need to stake
     * @param _userMinStakeFraction The minimum per-user stake as fraction of total stake
     * @param _voterRewardFraction The fraction of the total stake paid out to voters as rewards
     */
    initialise(
      _totalStakeFraction: BigNumberish,
      _voterRewardFraction: BigNumberish,
      _userMinStakeFraction: BigNumberish,
      _maxVoteFraction: BigNumberish,
      _stakePeriod: BigNumberish,
      _submitPeriod: BigNumberish,
      _revealPeriod: BigNumberish,
      _escalationPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Create a motion
     * @param _action A bytes array encoding a function call
     * @param _altTarget The contract to which we send the action (0x0 for the colony)
     * @param _branchMask The branchmask of the proof
     * @param _childSkillIndex The childSkillIndex pointing to the domain of the action
     * @param _domainId The domain where we vote on the motion
     * @param _key Reputation tree key for the root domain
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the root domain
     */
    createMotion(
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _altTarget: string,
      _action: BytesLike,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Create a motion in the root domain (DEPRECATED)
     * @param _action A bytes array encoding a function call
     * @param _altTarget The contract to which we send the action (0x0 for the colony)
     * @param _branchMask The branchmask of the proof
     * @param _key Reputation tree key for the root domain
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the root domain
     */
    createRootMotion(
      _altTarget: string,
      _action: BytesLike,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Create a motion in any domain (DEPRECATED)
     * @param _action A bytes array encoding a function call
     * @param _branchMask The branchmask of the proof
     * @param _childSkillIndex The childSkillIndex pointing to the domain of the action
     * @param _domainId The domain where we vote on the motion
     * @param _key Reputation tree key for the domain
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the domain
     */
    createDomainMotion(
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _action: BytesLike,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Stake on a motion
     * @param _amount The amount of tokens being staked
     * @param _branchMask The branchmask of the proof
     * @param _childSkillIndex For the domain in which the motion is occurring
     * @param _key Reputation tree key for the staker/domain
     * @param _motionId The id of the motion
     * @param _permissionDomainId The domain where the extension has the arbitration permission
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the staker/domain
     * @param _vote The side being supported (0 = NAY, 1 = YAY)
     */
    stakeMotion(
      _motionId: BigNumberish,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _vote: BigNumberish,
      _amount: BigNumberish,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Submit a vote secret for a motion
     * @param _branchMask The branchmask of the proof
     * @param _key Reputation tree key for the staker/domain
     * @param _motionId The id of the motion
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the staker/domain
     * @param _voteSecret The hashed vote secret
     */
    submitVote(
      _motionId: BigNumberish,
      _voteSecret: BytesLike,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Reveal a vote secret for a motion
     * @param _branchMask The branchmask of the proof
     * @param _key Reputation tree key for the staker/domain
     * @param _motionId The id of the motion
     * @param _salt The salt used to hash the vote
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the staker/domain
     * @param _vote The side being supported (0 = NAY, 1 = YAY)
     */
    revealVote(
      _motionId: BigNumberish,
      _salt: BytesLike,
      _vote: BigNumberish,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Escalate a motion to a higher domain
     * @param _branchMask The branchmask of the proof
     * @param _childSkillIndex For the current domain, relative to the escalated domain
     * @param _key Reputation tree key for the new domain
     * @param _motionId The id of the motion
     * @param _newDomainId The desired domain of escalation
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the new domain
     */
    escalateMotion(
      _motionId: BigNumberish,
      _newDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finalizeMotion(
      _motionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * We are only expecting this to be called from finalize motion in the contracts. It is marked as external only so that the frontend can use it.
     * @param _motionId The id of the motion
     */
    failingExecutionAllowed(
      _motionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Claim the staker's reward
     * @param _childSkillIndex For the domain in which the motion is occurring
     * @param _motionId The id of the motion
     * @param _permissionDomainId The domain where the extension has the arbitration permission
     * @param _staker The staker whose reward is being claimed
     * @param _vote The side being supported (0 = NAY, 1 = YAY)
     */
    claimReward(
      _motionId: BigNumberish,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Get the total stake fraction
     */
    getTotalStakeFraction(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the voter reward fraction
     */
    getVoterRewardFraction(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the user min stake fraction
     */
    getUserMinStakeFraction(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the max vote fraction
     */
    getMaxVoteFraction(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the stake period
     */
    getStakePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the submit period
     */
    getSubmitPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the reveal period
     */
    getRevealPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the escalation period
     */
    getEscalationPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the total motion count
     */
    getMotionCount(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the data for a single motion
     * @param _motionId The id of the motion
     */
    getMotion(
      _motionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get a user's stake on a motion
     * @param _motionId The id of the motion
     * @param _staker The staker address
     * @param _vote The side being supported (0 = NAY, 1 = YAY)
     */
    getStake(
      _motionId: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get the number of ongoing motions for a single expenditure / expenditure slot
     * @param _structHash The hash of the expenditureId or expenditureId*expenditureSlot
     */
    getExpenditureMotionCount(
      _structHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get the largest past vote on a single expenditure variable
     * @param _actionHash The hash of the particular expenditure action
     */
    getExpenditurePastVote(
      _actionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get the current state of the motion
     */
    getMotionState(
      _motionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get the voter reward NB This function will only return a meaningful value if in the reveal state. Prior to the reveal state, getVoterRewardRange should be used.
     * @param _motionId The id of the motion
     * @param _voterRep The reputation the voter has in the domain
     */
    getVoterReward(
      _motionId: BigNumberish,
      _voterRep: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get the range of potential rewards for a voter on a specific motion, intended to be used when the motion is in the reveal state. Once a motion is in the reveal state the reward is known, and getVoterRewardRange should be used.
     * @param _motionId The id of the motion
     * @param _voterAddress The address the user will be voting as
     * @param _voterRep The reputation the voter has in the domain
     */
    getVoterRewardRange(
      _motionId: BigNumberish,
      _voterRep: BigNumberish,
      _voterAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get the staker reward
     * @param _motionId The id of the motion
     * @param _staker The staker's address
     * @param _vote The vote (0 = NAY, 1 = YAY)
     */
    getStakerReward(
      _motionId: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createClaimDelayAction(
      action: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimMisalignedReward(
      _motionId: BigNumberish,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deprecate(
      _deprecated: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Executes a metatransaction targeting this contract
     * @param payload The transaction data that will be executed if signature valid
     * @param sigR The 'r' part of the signature
     * @param sigS The 's' part of the signature
     * @param sigV The 'v' part of the signature
     * @param userAddress The address of the user that signed the metatransaction
     */
    executeMetaTransaction(
      userAddress: string,
      payload: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finishUpgrade(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCapabilityRoles(
      _sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getColony(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDeprecated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the next metatransaction nonce for user that should be used targeting this contract
     * @param userAddress The address of the user that will sign the metatransaction
     */
    getMetatransactionNonce(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    identifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    install(
      _colony: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uninstall(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Initialise the extension
     * @param _escalationPeriod The length of the escalation period in seconds
     * @param _maxVoteFraction The fraction of the domain's reputation which must submit for quick-end
     * @param _revealPeriod The length of the reveal period in seconds
     * @param _stakePeriod The length of the staking period in seconds
     * @param _submitPeriod The length of the submit period in seconds
     * @param _totalStakeFraction The fraction of the domain's reputation we need to stake
     * @param _userMinStakeFraction The minimum per-user stake as fraction of total stake
     * @param _voterRewardFraction The fraction of the total stake paid out to voters as rewards
     */
    initialise(
      _totalStakeFraction: BigNumberish,
      _voterRewardFraction: BigNumberish,
      _userMinStakeFraction: BigNumberish,
      _maxVoteFraction: BigNumberish,
      _stakePeriod: BigNumberish,
      _submitPeriod: BigNumberish,
      _revealPeriod: BigNumberish,
      _escalationPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Create a motion
     * @param _action A bytes array encoding a function call
     * @param _altTarget The contract to which we send the action (0x0 for the colony)
     * @param _branchMask The branchmask of the proof
     * @param _childSkillIndex The childSkillIndex pointing to the domain of the action
     * @param _domainId The domain where we vote on the motion
     * @param _key Reputation tree key for the root domain
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the root domain
     */
    createMotion(
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _altTarget: string,
      _action: BytesLike,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Create a motion in the root domain (DEPRECATED)
     * @param _action A bytes array encoding a function call
     * @param _altTarget The contract to which we send the action (0x0 for the colony)
     * @param _branchMask The branchmask of the proof
     * @param _key Reputation tree key for the root domain
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the root domain
     */
    createRootMotion(
      _altTarget: string,
      _action: BytesLike,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Create a motion in any domain (DEPRECATED)
     * @param _action A bytes array encoding a function call
     * @param _branchMask The branchmask of the proof
     * @param _childSkillIndex The childSkillIndex pointing to the domain of the action
     * @param _domainId The domain where we vote on the motion
     * @param _key Reputation tree key for the domain
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the domain
     */
    createDomainMotion(
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _action: BytesLike,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Stake on a motion
     * @param _amount The amount of tokens being staked
     * @param _branchMask The branchmask of the proof
     * @param _childSkillIndex For the domain in which the motion is occurring
     * @param _key Reputation tree key for the staker/domain
     * @param _motionId The id of the motion
     * @param _permissionDomainId The domain where the extension has the arbitration permission
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the staker/domain
     * @param _vote The side being supported (0 = NAY, 1 = YAY)
     */
    stakeMotion(
      _motionId: BigNumberish,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _vote: BigNumberish,
      _amount: BigNumberish,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Submit a vote secret for a motion
     * @param _branchMask The branchmask of the proof
     * @param _key Reputation tree key for the staker/domain
     * @param _motionId The id of the motion
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the staker/domain
     * @param _voteSecret The hashed vote secret
     */
    submitVote(
      _motionId: BigNumberish,
      _voteSecret: BytesLike,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Reveal a vote secret for a motion
     * @param _branchMask The branchmask of the proof
     * @param _key Reputation tree key for the staker/domain
     * @param _motionId The id of the motion
     * @param _salt The salt used to hash the vote
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the staker/domain
     * @param _vote The side being supported (0 = NAY, 1 = YAY)
     */
    revealVote(
      _motionId: BigNumberish,
      _salt: BytesLike,
      _vote: BigNumberish,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Escalate a motion to a higher domain
     * @param _branchMask The branchmask of the proof
     * @param _childSkillIndex For the current domain, relative to the escalated domain
     * @param _key Reputation tree key for the new domain
     * @param _motionId The id of the motion
     * @param _newDomainId The desired domain of escalation
     * @param _siblings The siblings of the proof
     * @param _value Reputation tree value for the new domain
     */
    escalateMotion(
      _motionId: BigNumberish,
      _newDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _key: BytesLike,
      _value: BytesLike,
      _branchMask: BigNumberish,
      _siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finalizeMotion(
      _motionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * We are only expecting this to be called from finalize motion in the contracts. It is marked as external only so that the frontend can use it.
     * @param _motionId The id of the motion
     */
    failingExecutionAllowed(
      _motionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Claim the staker's reward
     * @param _childSkillIndex For the domain in which the motion is occurring
     * @param _motionId The id of the motion
     * @param _permissionDomainId The domain where the extension has the arbitration permission
     * @param _staker The staker whose reward is being claimed
     * @param _vote The side being supported (0 = NAY, 1 = YAY)
     */
    claimReward(
      _motionId: BigNumberish,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Get the total stake fraction
     */
    getTotalStakeFraction(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get the voter reward fraction
     */
    getVoterRewardFraction(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get the user min stake fraction
     */
    getUserMinStakeFraction(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get the max vote fraction
     */
    getMaxVoteFraction(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get the stake period
     */
    getStakePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Get the submit period
     */
    getSubmitPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Get the reveal period
     */
    getRevealPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Get the escalation period
     */
    getEscalationPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get the total motion count
     */
    getMotionCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Get the data for a single motion
     * @param _motionId The id of the motion
     */
    getMotion(
      _motionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get a user's stake on a motion
     * @param _motionId The id of the motion
     * @param _staker The staker address
     * @param _vote The side being supported (0 = NAY, 1 = YAY)
     */
    getStake(
      _motionId: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get the number of ongoing motions for a single expenditure / expenditure slot
     * @param _structHash The hash of the expenditureId or expenditureId*expenditureSlot
     */
    getExpenditureMotionCount(
      _structHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get the largest past vote on a single expenditure variable
     * @param _actionHash The hash of the particular expenditure action
     */
    getExpenditurePastVote(
      _actionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get the current state of the motion
     */
    getMotionState(
      _motionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get the voter reward NB This function will only return a meaningful value if in the reveal state. Prior to the reveal state, getVoterRewardRange should be used.
     * @param _motionId The id of the motion
     * @param _voterRep The reputation the voter has in the domain
     */
    getVoterReward(
      _motionId: BigNumberish,
      _voterRep: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get the range of potential rewards for a voter on a specific motion, intended to be used when the motion is in the reveal state. Once a motion is in the reveal state the reward is known, and getVoterRewardRange should be used.
     * @param _motionId The id of the motion
     * @param _voterAddress The address the user will be voting as
     * @param _voterRep The reputation the voter has in the domain
     */
    getVoterRewardRange(
      _motionId: BigNumberish,
      _voterRep: BigNumberish,
      _voterAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get the staker reward
     * @param _motionId The id of the motion
     * @param _staker The staker's address
     * @param _vote The vote (0 = NAY, 1 = YAY)
     */
    getStakerReward(
      _motionId: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createClaimDelayAction(
      action: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimMisalignedReward(
      _motionId: BigNumberish,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _staker: string,
      _vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
