/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface StakedExpenditureEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "ExpenditureCancelled(uint256)": EventFragment;
    "ExpenditureCancelled(address,uint256)": EventFragment;
    "ExpenditureMadeViaStake(address,uint256,uint256)": EventFragment;
    "ExtensionInitialised()": EventFragment;
    "LogSetAuthority(address)": EventFragment;
    "LogSetOwner(address)": EventFragment;
    "MetaTransactionExecuted(address,address,bytes)": EventFragment;
    "StakeFractionSet(uint256)": EventFragment;
    "StakeFractionSet(address,uint256)": EventFragment;
    "StakeReclaimed(uint256)": EventFragment;
    "ExpenditureStakerPunished(address,uint256,bool)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "ExpenditureCancelled(uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ExpenditureCancelled(address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpenditureMadeViaStake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExtensionInitialised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetAuthority"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeFractionSet(uint256)"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StakeFractionSet(address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeReclaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpenditureStakerPunished"): EventFragment;
}

export interface ExpenditureCancelled_uint256_EventObject {
  expenditureId: BigNumber;
}
export type ExpenditureCancelled_uint256_Event = TypedEvent<
  [BigNumber],
  ExpenditureCancelled_uint256_EventObject
>;

export type ExpenditureCancelled_uint256_EventFilter =
  TypedEventFilter<ExpenditureCancelled_uint256_Event>;

export interface ExpenditureCancelled_address_uint256_EventObject {
  agent: string;
  expenditureId: BigNumber;
}
export type ExpenditureCancelled_address_uint256_Event = TypedEvent<
  [string, BigNumber],
  ExpenditureCancelled_address_uint256_EventObject
>;

export type ExpenditureCancelled_address_uint256_EventFilter =
  TypedEventFilter<ExpenditureCancelled_address_uint256_Event>;

export interface ExpenditureMadeViaStakeEventObject {
  creator: string;
  expenditureId: BigNumber;
  stake: BigNumber;
}
export type ExpenditureMadeViaStakeEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ExpenditureMadeViaStakeEventObject
>;

export type ExpenditureMadeViaStakeEventFilter =
  TypedEventFilter<ExpenditureMadeViaStakeEvent>;

export interface ExtensionInitialisedEventObject {}
export type ExtensionInitialisedEvent = TypedEvent<
  [],
  ExtensionInitialisedEventObject
>;

export type ExtensionInitialisedEventFilter =
  TypedEventFilter<ExtensionInitialisedEvent>;

export interface LogSetAuthorityEventObject {
  authority: string;
}
export type LogSetAuthorityEvent = TypedEvent<
  [string],
  LogSetAuthorityEventObject
>;

export type LogSetAuthorityEventFilter = TypedEventFilter<LogSetAuthorityEvent>;

export interface LogSetOwnerEventObject {
  owner: string;
}
export type LogSetOwnerEvent = TypedEvent<[string], LogSetOwnerEventObject>;

export type LogSetOwnerEventFilter = TypedEventFilter<LogSetOwnerEvent>;

export interface MetaTransactionExecutedEventObject {
  user: string;
  relayerAddress: string;
  functionSignature: string;
}
export type MetaTransactionExecutedEvent = TypedEvent<
  [string, string, string],
  MetaTransactionExecutedEventObject
>;

export type MetaTransactionExecutedEventFilter =
  TypedEventFilter<MetaTransactionExecutedEvent>;

export interface StakeFractionSet_uint256_EventObject {
  stakeFraction: BigNumber;
}
export type StakeFractionSet_uint256_Event = TypedEvent<
  [BigNumber],
  StakeFractionSet_uint256_EventObject
>;

export type StakeFractionSet_uint256_EventFilter =
  TypedEventFilter<StakeFractionSet_uint256_Event>;

export interface StakeFractionSet_address_uint256_EventObject {
  agent: string;
  stakeFraction: BigNumber;
}
export type StakeFractionSet_address_uint256_Event = TypedEvent<
  [string, BigNumber],
  StakeFractionSet_address_uint256_EventObject
>;

export type StakeFractionSet_address_uint256_EventFilter =
  TypedEventFilter<StakeFractionSet_address_uint256_Event>;

export interface StakeReclaimedEventObject {
  expenditureId: BigNumber;
}
export type StakeReclaimedEvent = TypedEvent<
  [BigNumber],
  StakeReclaimedEventObject
>;

export type StakeReclaimedEventFilter = TypedEventFilter<StakeReclaimedEvent>;

export interface ExpenditureStakerPunishedEventObject {
  agent: string;
  expenditureId: BigNumber;
  punished: boolean;
}
export type ExpenditureStakerPunishedEvent = TypedEvent<
  [string, BigNumber, boolean],
  ExpenditureStakerPunishedEventObject
>;

export type ExpenditureStakerPunishedEventFilter =
  TypedEventFilter<ExpenditureStakerPunishedEvent>;

export interface StakedExpenditureEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakedExpenditureEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "ExpenditureCancelled(uint256)"(
      expenditureId?: null
    ): ExpenditureCancelled_uint256_EventFilter;
    "ExpenditureCancelled(address,uint256)"(
      agent?: null,
      expenditureId?: null
    ): ExpenditureCancelled_address_uint256_EventFilter;

    "ExpenditureMadeViaStake(address,uint256,uint256)"(
      creator?: string | null,
      expenditureId?: null,
      stake?: null
    ): ExpenditureMadeViaStakeEventFilter;
    ExpenditureMadeViaStake(
      creator?: string | null,
      expenditureId?: null,
      stake?: null
    ): ExpenditureMadeViaStakeEventFilter;

    "ExtensionInitialised()"(): ExtensionInitialisedEventFilter;
    ExtensionInitialised(): ExtensionInitialisedEventFilter;

    "LogSetAuthority(address)"(
      authority?: string | null
    ): LogSetAuthorityEventFilter;
    LogSetAuthority(authority?: string | null): LogSetAuthorityEventFilter;

    "LogSetOwner(address)"(owner?: string | null): LogSetOwnerEventFilter;
    LogSetOwner(owner?: string | null): LogSetOwnerEventFilter;

    "MetaTransactionExecuted(address,address,bytes)"(
      user?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;
    MetaTransactionExecuted(
      user?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;

    "StakeFractionSet(uint256)"(
      stakeFraction?: null
    ): StakeFractionSet_uint256_EventFilter;
    "StakeFractionSet(address,uint256)"(
      agent?: null,
      stakeFraction?: null
    ): StakeFractionSet_address_uint256_EventFilter;

    "StakeReclaimed(uint256)"(expenditureId?: null): StakeReclaimedEventFilter;
    StakeReclaimed(expenditureId?: null): StakeReclaimedEventFilter;

    "ExpenditureStakerPunished(address,uint256,bool)"(
      agent?: null,
      expenditureId?: null,
      punished?: null
    ): ExpenditureStakerPunishedEventFilter;
    ExpenditureStakerPunished(
      agent?: null,
      expenditureId?: null,
      punished?: null
    ): ExpenditureStakerPunishedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
