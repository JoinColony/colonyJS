/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface TokenLockingEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "LogSetAuthority(address)": EventFragment;
    "LogSetOwner(address)": EventFragment;
    "ColonyNetworkSet(address)": EventFragment;
    "TokenLocked(address,uint256)": EventFragment;
    "TokenLocked(address,address,uint256)": EventFragment;
    "UserTokenUnlocked(address,address,uint256)": EventFragment;
    "UserTokenDeposited(address,address,uint256,uint256)": EventFragment;
    "UserTokenDeposited(address,address,uint256)": EventFragment;
    "UserTokenWithdrawn(address,address,uint256)": EventFragment;
    "ReputationMinerPenalised(address,address,uint256)": EventFragment;
    "UserTokenClaimed(address,address,uint256)": EventFragment;
    "UserTokenTransferred(address,address,address,uint256)": EventFragment;
    "StakeTransferred(address,address,address,address,uint256)": EventFragment;
    "UserTokenApproved(address,address,address,uint256)": EventFragment;
    "UserTokenDeobligated(address,address,address,uint256)": EventFragment;
    "UserTokenObligated(address,address,address,uint256)": EventFragment;
    "MetaTransactionExecuted(address,address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogSetAuthority"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ColonyNetworkSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TokenLocked(address,uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TokenLocked(address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserTokenUnlocked"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UserTokenDeposited(address,address,uint256,uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UserTokenDeposited(address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserTokenWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReputationMinerPenalised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserTokenClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserTokenTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserTokenApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserTokenDeobligated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserTokenObligated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
}

export interface LogSetAuthorityEventObject {
  authority: string;
}
export type LogSetAuthorityEvent = TypedEvent<
  [string],
  LogSetAuthorityEventObject
>;

export type LogSetAuthorityEventFilter = TypedEventFilter<LogSetAuthorityEvent>;

export interface LogSetOwnerEventObject {
  owner: string;
}
export type LogSetOwnerEvent = TypedEvent<[string], LogSetOwnerEventObject>;

export type LogSetOwnerEventFilter = TypedEventFilter<LogSetOwnerEvent>;

export interface ColonyNetworkSetEventObject {
  colonyNetwork: string;
}
export type ColonyNetworkSetEvent = TypedEvent<
  [string],
  ColonyNetworkSetEventObject
>;

export type ColonyNetworkSetEventFilter =
  TypedEventFilter<ColonyNetworkSetEvent>;

export interface TokenLocked_address_uint256_EventObject {
  token: string;
  lockCount: BigNumber;
}
export type TokenLocked_address_uint256_Event = TypedEvent<
  [string, BigNumber],
  TokenLocked_address_uint256_EventObject
>;

export type TokenLocked_address_uint256_EventFilter =
  TypedEventFilter<TokenLocked_address_uint256_Event>;

export interface TokenLocked_address_address_uint256_EventObject {
  token: string;
  lockedBy: string;
  lockCount: BigNumber;
}
export type TokenLocked_address_address_uint256_Event = TypedEvent<
  [string, string, BigNumber],
  TokenLocked_address_address_uint256_EventObject
>;

export type TokenLocked_address_address_uint256_EventFilter =
  TypedEventFilter<TokenLocked_address_address_uint256_Event>;

export interface UserTokenUnlockedEventObject {
  token: string;
  user: string;
  lockId: BigNumber;
}
export type UserTokenUnlockedEvent = TypedEvent<
  [string, string, BigNumber],
  UserTokenUnlockedEventObject
>;

export type UserTokenUnlockedEventFilter =
  TypedEventFilter<UserTokenUnlockedEvent>;

export interface UserTokenDeposited_address_address_uint256_uint256_EventObject {
  token: string;
  user: string;
  amount: BigNumber;
  timestamp: BigNumber;
}
export type UserTokenDeposited_address_address_uint256_uint256_Event =
  TypedEvent<
    [string, string, BigNumber, BigNumber],
    UserTokenDeposited_address_address_uint256_uint256_EventObject
  >;

export type UserTokenDeposited_address_address_uint256_uint256_EventFilter =
  TypedEventFilter<UserTokenDeposited_address_address_uint256_uint256_Event>;

export interface UserTokenDeposited_address_address_uint256_EventObject {
  token: string;
  user: string;
  amount: BigNumber;
}
export type UserTokenDeposited_address_address_uint256_Event = TypedEvent<
  [string, string, BigNumber],
  UserTokenDeposited_address_address_uint256_EventObject
>;

export type UserTokenDeposited_address_address_uint256_EventFilter =
  TypedEventFilter<UserTokenDeposited_address_address_uint256_Event>;

export interface UserTokenWithdrawnEventObject {
  token: string;
  user: string;
  amount: BigNumber;
}
export type UserTokenWithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  UserTokenWithdrawnEventObject
>;

export type UserTokenWithdrawnEventFilter =
  TypedEventFilter<UserTokenWithdrawnEvent>;

export interface ReputationMinerPenalisedEventObject {
  miner: string;
  beneficiary: string;
  tokensLost: BigNumber;
}
export type ReputationMinerPenalisedEvent = TypedEvent<
  [string, string, BigNumber],
  ReputationMinerPenalisedEventObject
>;

export type ReputationMinerPenalisedEventFilter =
  TypedEventFilter<ReputationMinerPenalisedEvent>;

export interface UserTokenClaimedEventObject {
  token: string;
  user: string;
  amount: BigNumber;
}
export type UserTokenClaimedEvent = TypedEvent<
  [string, string, BigNumber],
  UserTokenClaimedEventObject
>;

export type UserTokenClaimedEventFilter =
  TypedEventFilter<UserTokenClaimedEvent>;

export interface UserTokenTransferredEventObject {
  token: string;
  user: string;
  recipient: string;
  amount: BigNumber;
}
export type UserTokenTransferredEvent = TypedEvent<
  [string, string, string, BigNumber],
  UserTokenTransferredEventObject
>;

export type UserTokenTransferredEventFilter =
  TypedEventFilter<UserTokenTransferredEvent>;

export interface StakeTransferredEventObject {
  token: string;
  by: string;
  from: string;
  to: string;
  amount: BigNumber;
}
export type StakeTransferredEvent = TypedEvent<
  [string, string, string, string, BigNumber],
  StakeTransferredEventObject
>;

export type StakeTransferredEventFilter =
  TypedEventFilter<StakeTransferredEvent>;

export interface UserTokenApprovedEventObject {
  token: string;
  user: string;
  approvedBy: string;
  amount: BigNumber;
}
export type UserTokenApprovedEvent = TypedEvent<
  [string, string, string, BigNumber],
  UserTokenApprovedEventObject
>;

export type UserTokenApprovedEventFilter =
  TypedEventFilter<UserTokenApprovedEvent>;

export interface UserTokenDeobligatedEventObject {
  token: string;
  user: string;
  obligatedBy: string;
  amount: BigNumber;
}
export type UserTokenDeobligatedEvent = TypedEvent<
  [string, string, string, BigNumber],
  UserTokenDeobligatedEventObject
>;

export type UserTokenDeobligatedEventFilter =
  TypedEventFilter<UserTokenDeobligatedEvent>;

export interface UserTokenObligatedEventObject {
  token: string;
  user: string;
  obligatedBy: string;
  amount: BigNumber;
}
export type UserTokenObligatedEvent = TypedEvent<
  [string, string, string, BigNumber],
  UserTokenObligatedEventObject
>;

export type UserTokenObligatedEventFilter =
  TypedEventFilter<UserTokenObligatedEvent>;

export interface MetaTransactionExecutedEventObject {
  user: string;
  relayerAddress: string;
  functionSignature: string;
}
export type MetaTransactionExecutedEvent = TypedEvent<
  [string, string, string],
  MetaTransactionExecutedEventObject
>;

export type MetaTransactionExecutedEventFilter =
  TypedEventFilter<MetaTransactionExecutedEvent>;

export interface TokenLockingEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenLockingEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "LogSetAuthority(address)"(
      authority?: string | null
    ): LogSetAuthorityEventFilter;
    LogSetAuthority(authority?: string | null): LogSetAuthorityEventFilter;

    "LogSetOwner(address)"(owner?: string | null): LogSetOwnerEventFilter;
    LogSetOwner(owner?: string | null): LogSetOwnerEventFilter;

    "ColonyNetworkSet(address)"(
      colonyNetwork?: null
    ): ColonyNetworkSetEventFilter;
    ColonyNetworkSet(colonyNetwork?: null): ColonyNetworkSetEventFilter;

    "TokenLocked(address,uint256)"(
      token?: null,
      lockCount?: null
    ): TokenLocked_address_uint256_EventFilter;
    "TokenLocked(address,address,uint256)"(
      token?: string | null,
      lockedBy?: string | null,
      lockCount?: null
    ): TokenLocked_address_address_uint256_EventFilter;

    "UserTokenUnlocked(address,address,uint256)"(
      token?: null,
      user?: null,
      lockId?: null
    ): UserTokenUnlockedEventFilter;
    UserTokenUnlocked(
      token?: null,
      user?: null,
      lockId?: null
    ): UserTokenUnlockedEventFilter;

    "UserTokenDeposited(address,address,uint256,uint256)"(
      token?: null,
      user?: null,
      amount?: null,
      timestamp?: null
    ): UserTokenDeposited_address_address_uint256_uint256_EventFilter;
    "UserTokenDeposited(address,address,uint256)"(
      token?: null,
      user?: null,
      amount?: null
    ): UserTokenDeposited_address_address_uint256_EventFilter;

    "UserTokenWithdrawn(address,address,uint256)"(
      token?: null,
      user?: null,
      amount?: null
    ): UserTokenWithdrawnEventFilter;
    UserTokenWithdrawn(
      token?: null,
      user?: null,
      amount?: null
    ): UserTokenWithdrawnEventFilter;

    "ReputationMinerPenalised(address,address,uint256)"(
      miner?: null,
      beneficiary?: null,
      tokensLost?: null
    ): ReputationMinerPenalisedEventFilter;
    ReputationMinerPenalised(
      miner?: null,
      beneficiary?: null,
      tokensLost?: null
    ): ReputationMinerPenalisedEventFilter;

    "UserTokenClaimed(address,address,uint256)"(
      token?: null,
      user?: null,
      amount?: null
    ): UserTokenClaimedEventFilter;
    UserTokenClaimed(
      token?: null,
      user?: null,
      amount?: null
    ): UserTokenClaimedEventFilter;

    "UserTokenTransferred(address,address,address,uint256)"(
      token?: null,
      user?: null,
      recipient?: null,
      amount?: null
    ): UserTokenTransferredEventFilter;
    UserTokenTransferred(
      token?: null,
      user?: null,
      recipient?: null,
      amount?: null
    ): UserTokenTransferredEventFilter;

    "StakeTransferred(address,address,address,address,uint256)"(
      token?: null,
      by?: null,
      from?: null,
      to?: null,
      amount?: null
    ): StakeTransferredEventFilter;
    StakeTransferred(
      token?: null,
      by?: null,
      from?: null,
      to?: null,
      amount?: null
    ): StakeTransferredEventFilter;

    "UserTokenApproved(address,address,address,uint256)"(
      token?: null,
      user?: null,
      approvedBy?: null,
      amount?: null
    ): UserTokenApprovedEventFilter;
    UserTokenApproved(
      token?: null,
      user?: null,
      approvedBy?: null,
      amount?: null
    ): UserTokenApprovedEventFilter;

    "UserTokenDeobligated(address,address,address,uint256)"(
      token?: null,
      user?: null,
      obligatedBy?: null,
      amount?: null
    ): UserTokenDeobligatedEventFilter;
    UserTokenDeobligated(
      token?: null,
      user?: null,
      obligatedBy?: null,
      amount?: null
    ): UserTokenDeobligatedEventFilter;

    "UserTokenObligated(address,address,address,uint256)"(
      token?: null,
      user?: null,
      obligatedBy?: null,
      amount?: null
    ): UserTokenObligatedEventFilter;
    UserTokenObligated(
      token?: null,
      user?: null,
      obligatedBy?: null,
      amount?: null
    ): UserTokenObligatedEventFilter;

    "MetaTransactionExecuted(address,address,bytes)"(
      user?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;
    MetaTransactionExecuted(
      user?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
