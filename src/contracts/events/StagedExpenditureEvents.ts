/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface StagedExpenditureEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "Annotation(address,bytes32,string)": EventFragment;
    "ArbitraryReputationUpdate(address,address,uint256,int256)": EventFragment;
    "ArbitraryTransaction(address,bytes,bool)": EventFragment;
    "ColonyBootstrapped(address,address[],int256[])": EventFragment;
    "ColonyFundsClaimed(address,address,uint256,uint256)": EventFragment;
    "ColonyFundsMovedBetweenFundingPots(address,uint256,uint256,uint256,address)": EventFragment;
    "ColonyInitialised(address,address,address)": EventFragment;
    "ColonyMetadata(address,string)": EventFragment;
    "ColonyMetadataDelta(address,string)": EventFragment;
    "ColonyRewardInverseSet(address,uint256)": EventFragment;
    "ColonyRoleSet(address,address,uint256,uint8,bool)": EventFragment;
    "ColonyUpgraded(address,uint256,uint256)": EventFragment;
    "DomainAdded(address,uint256)": EventFragment;
    "DomainDeprecated(address,uint256,bool)": EventFragment;
    "DomainMetadata(address,uint256,string)": EventFragment;
    "ExpenditureAdded(address,uint256)": EventFragment;
    "ExpenditureCancelled(address,uint256)": EventFragment;
    "ExpenditureClaimDelaySet(address,uint256,uint256,uint256)": EventFragment;
    "ExpenditureFinalized(address,uint256)": EventFragment;
    "ExpenditureGlobalClaimDelaySet(address,uint256)": EventFragment;
    "ExpenditureLocked(address,uint256)": EventFragment;
    "ExpenditureMadeStaged(uint256,bool)": EventFragment;
    "ExpenditureMetadataSet(address,uint256,string)": EventFragment;
    "ExpenditurePayoutModifierSet(address,uint256,uint256,int256)": EventFragment;
    "ExpenditurePayoutSet(address,uint256,uint256,address,uint256)": EventFragment;
    "ExpenditureRecipientSet(address,uint256,uint256,address)": EventFragment;
    "ExpenditureSkillSet(address,uint256,uint256,uint256)": EventFragment;
    "ExpenditureStateChanged(address,uint256,uint256,bool[],bytes32[],bytes32)": EventFragment;
    "ExpenditureTransferred(address,uint256,address)": EventFragment;
    "ExtensionInitialised()": EventFragment;
    "FundingPotAdded(uint256)": EventFragment;
    "LocalSkillAdded(address,uint256)": EventFragment;
    "LocalSkillDeprecated(address,uint256,bool)": EventFragment;
    "LogSetAuthority(address)": EventFragment;
    "LogSetOwner(address)": EventFragment;
    "MetaTransactionExecuted(address,address,bytes)": EventFragment;
    "PaymentAdded(address,uint256)": EventFragment;
    "PaymentFinalized(address,uint256)": EventFragment;
    "PaymentPayoutSet(address,uint256,address,uint256)": EventFragment;
    "PaymentRecipientSet(address,uint256,address)": EventFragment;
    "PaymentSkillSet(address,uint256,uint256)": EventFragment;
    "PayoutClaimed(address,uint256,address,uint256)": EventFragment;
    "PayoutClaimed(address,uint256,uint256,address,uint256)": EventFragment;
    "RewardPayoutClaimed(uint256,address,uint256,uint256)": EventFragment;
    "RewardPayoutCycleEnded(address,uint256)": EventFragment;
    "RewardPayoutCycleStarted(address,uint256)": EventFragment;
    "StagedPaymentReleased(uint256,uint256)": EventFragment;
    "TaskAdded(address,uint256)": EventFragment;
    "TaskBriefSet(uint256,bytes32)": EventFragment;
    "TaskCanceled(uint256)": EventFragment;
    "TaskChangedViaSignatures(address[])": EventFragment;
    "TaskCompleted(address,uint256)": EventFragment;
    "TaskDeliverableSubmitted(address,uint256,bytes32)": EventFragment;
    "TaskDueDateSet(uint256,uint256)": EventFragment;
    "TaskFinalized(address,uint256)": EventFragment;
    "TaskPayoutSet(uint256,uint8,address,uint256)": EventFragment;
    "TaskRoleUserSet(uint256,uint8,address)": EventFragment;
    "TaskSkillSet(uint256,uint256)": EventFragment;
    "TaskWorkRatingRevealed(address,uint256,uint8,uint8)": EventFragment;
    "TokenUnlocked(address)": EventFragment;
    "TokensBurned(address,address,uint256)": EventFragment;
    "TokensMinted(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Annotation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ArbitraryReputationUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ArbitraryTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ColonyBootstrapped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ColonyFundsClaimed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ColonyFundsMovedBetweenFundingPots"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ColonyInitialised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ColonyMetadata"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ColonyMetadataDelta"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ColonyRewardInverseSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ColonyRoleSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ColonyUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DomainAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DomainDeprecated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DomainMetadata"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpenditureAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpenditureCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpenditureClaimDelaySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpenditureFinalized"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ExpenditureGlobalClaimDelaySet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpenditureLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpenditureMadeStaged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpenditureMetadataSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ExpenditurePayoutModifierSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpenditurePayoutSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpenditureRecipientSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpenditureSkillSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpenditureStateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpenditureTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExtensionInitialised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundingPotAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LocalSkillAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LocalSkillDeprecated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetAuthority"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentPayoutSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentRecipientSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentSkillSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PayoutClaimed(address,uint256,address,uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PayoutClaimed(address,uint256,uint256,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPayoutClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPayoutCycleEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPayoutCycleStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StagedPaymentReleased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskBriefSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskChangedViaSignatures"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskDeliverableSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskDueDateSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskPayoutSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskRoleUserSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskSkillSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskWorkRatingRevealed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenUnlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensBurned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensMinted"): EventFragment;
}

export interface AnnotationEventObject {
  agent: string;
  txHash: string;
  metadata: string;
}
export type AnnotationEvent = TypedEvent<
  [string, string, string],
  AnnotationEventObject
>;

export type AnnotationEventFilter = TypedEventFilter<AnnotationEvent>;

export interface ArbitraryReputationUpdateEventObject {
  agent: string;
  user: string;
  skillId: BigNumber;
  amount: BigNumber;
}
export type ArbitraryReputationUpdateEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  ArbitraryReputationUpdateEventObject
>;

export type ArbitraryReputationUpdateEventFilter =
  TypedEventFilter<ArbitraryReputationUpdateEvent>;

export interface ArbitraryTransactionEventObject {
  target: string;
  data: string;
  success: boolean;
}
export type ArbitraryTransactionEvent = TypedEvent<
  [string, string, boolean],
  ArbitraryTransactionEventObject
>;

export type ArbitraryTransactionEventFilter =
  TypedEventFilter<ArbitraryTransactionEvent>;

export interface ColonyBootstrappedEventObject {
  agent: string;
  users: string[];
  amounts: BigNumber[];
}
export type ColonyBootstrappedEvent = TypedEvent<
  [string, string[], BigNumber[]],
  ColonyBootstrappedEventObject
>;

export type ColonyBootstrappedEventFilter =
  TypedEventFilter<ColonyBootstrappedEvent>;

export interface ColonyFundsClaimedEventObject {
  agent: string;
  token: string;
  fee: BigNumber;
  payoutRemainder: BigNumber;
}
export type ColonyFundsClaimedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  ColonyFundsClaimedEventObject
>;

export type ColonyFundsClaimedEventFilter =
  TypedEventFilter<ColonyFundsClaimedEvent>;

export interface ColonyFundsMovedBetweenFundingPotsEventObject {
  agent: string;
  fromPot: BigNumber;
  toPot: BigNumber;
  amount: BigNumber;
  token: string;
}
export type ColonyFundsMovedBetweenFundingPotsEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string],
  ColonyFundsMovedBetweenFundingPotsEventObject
>;

export type ColonyFundsMovedBetweenFundingPotsEventFilter =
  TypedEventFilter<ColonyFundsMovedBetweenFundingPotsEvent>;

export interface ColonyInitialisedEventObject {
  agent: string;
  colonyNetwork: string;
  token: string;
}
export type ColonyInitialisedEvent = TypedEvent<
  [string, string, string],
  ColonyInitialisedEventObject
>;

export type ColonyInitialisedEventFilter =
  TypedEventFilter<ColonyInitialisedEvent>;

export interface ColonyMetadataEventObject {
  agent: string;
  metadata: string;
}
export type ColonyMetadataEvent = TypedEvent<
  [string, string],
  ColonyMetadataEventObject
>;

export type ColonyMetadataEventFilter = TypedEventFilter<ColonyMetadataEvent>;

export interface ColonyMetadataDeltaEventObject {
  agent: string;
  metadata: string;
}
export type ColonyMetadataDeltaEvent = TypedEvent<
  [string, string],
  ColonyMetadataDeltaEventObject
>;

export type ColonyMetadataDeltaEventFilter =
  TypedEventFilter<ColonyMetadataDeltaEvent>;

export interface ColonyRewardInverseSetEventObject {
  agent: string;
  rewardInverse: BigNumber;
}
export type ColonyRewardInverseSetEvent = TypedEvent<
  [string, BigNumber],
  ColonyRewardInverseSetEventObject
>;

export type ColonyRewardInverseSetEventFilter =
  TypedEventFilter<ColonyRewardInverseSetEvent>;

export interface ColonyRoleSetEventObject {
  agent: string;
  user: string;
  domainId: BigNumber;
  role: number;
  setTo: boolean;
}
export type ColonyRoleSetEvent = TypedEvent<
  [string, string, BigNumber, number, boolean],
  ColonyRoleSetEventObject
>;

export type ColonyRoleSetEventFilter = TypedEventFilter<ColonyRoleSetEvent>;

export interface ColonyUpgradedEventObject {
  agent: string;
  oldVersion: BigNumber;
  newVersion: BigNumber;
}
export type ColonyUpgradedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ColonyUpgradedEventObject
>;

export type ColonyUpgradedEventFilter = TypedEventFilter<ColonyUpgradedEvent>;

export interface DomainAddedEventObject {
  agent: string;
  domainId: BigNumber;
}
export type DomainAddedEvent = TypedEvent<
  [string, BigNumber],
  DomainAddedEventObject
>;

export type DomainAddedEventFilter = TypedEventFilter<DomainAddedEvent>;

export interface DomainDeprecatedEventObject {
  agent: string;
  domainId: BigNumber;
  deprecated: boolean;
}
export type DomainDeprecatedEvent = TypedEvent<
  [string, BigNumber, boolean],
  DomainDeprecatedEventObject
>;

export type DomainDeprecatedEventFilter =
  TypedEventFilter<DomainDeprecatedEvent>;

export interface DomainMetadataEventObject {
  agent: string;
  domainId: BigNumber;
  metadata: string;
}
export type DomainMetadataEvent = TypedEvent<
  [string, BigNumber, string],
  DomainMetadataEventObject
>;

export type DomainMetadataEventFilter = TypedEventFilter<DomainMetadataEvent>;

export interface ExpenditureAddedEventObject {
  agent: string;
  expenditureId: BigNumber;
}
export type ExpenditureAddedEvent = TypedEvent<
  [string, BigNumber],
  ExpenditureAddedEventObject
>;

export type ExpenditureAddedEventFilter =
  TypedEventFilter<ExpenditureAddedEvent>;

export interface ExpenditureCancelledEventObject {
  agent: string;
  expenditureId: BigNumber;
}
export type ExpenditureCancelledEvent = TypedEvent<
  [string, BigNumber],
  ExpenditureCancelledEventObject
>;

export type ExpenditureCancelledEventFilter =
  TypedEventFilter<ExpenditureCancelledEvent>;

export interface ExpenditureClaimDelaySetEventObject {
  agent: string;
  expenditureId: BigNumber;
  slot: BigNumber;
  claimDelay: BigNumber;
}
export type ExpenditureClaimDelaySetEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  ExpenditureClaimDelaySetEventObject
>;

export type ExpenditureClaimDelaySetEventFilter =
  TypedEventFilter<ExpenditureClaimDelaySetEvent>;

export interface ExpenditureFinalizedEventObject {
  agent: string;
  expenditureId: BigNumber;
}
export type ExpenditureFinalizedEvent = TypedEvent<
  [string, BigNumber],
  ExpenditureFinalizedEventObject
>;

export type ExpenditureFinalizedEventFilter =
  TypedEventFilter<ExpenditureFinalizedEvent>;

export interface ExpenditureGlobalClaimDelaySetEventObject {
  agent: string;
  globalClaimDelay: BigNumber;
}
export type ExpenditureGlobalClaimDelaySetEvent = TypedEvent<
  [string, BigNumber],
  ExpenditureGlobalClaimDelaySetEventObject
>;

export type ExpenditureGlobalClaimDelaySetEventFilter =
  TypedEventFilter<ExpenditureGlobalClaimDelaySetEvent>;

export interface ExpenditureLockedEventObject {
  agent: string;
  expenditureId: BigNumber;
}
export type ExpenditureLockedEvent = TypedEvent<
  [string, BigNumber],
  ExpenditureLockedEventObject
>;

export type ExpenditureLockedEventFilter =
  TypedEventFilter<ExpenditureLockedEvent>;

export interface ExpenditureMadeStagedEventObject {
  expenditureId: BigNumber;
  staged: boolean;
}
export type ExpenditureMadeStagedEvent = TypedEvent<
  [BigNumber, boolean],
  ExpenditureMadeStagedEventObject
>;

export type ExpenditureMadeStagedEventFilter =
  TypedEventFilter<ExpenditureMadeStagedEvent>;

export interface ExpenditureMetadataSetEventObject {
  agent: string;
  expenditureId: BigNumber;
  metadata: string;
}
export type ExpenditureMetadataSetEvent = TypedEvent<
  [string, BigNumber, string],
  ExpenditureMetadataSetEventObject
>;

export type ExpenditureMetadataSetEventFilter =
  TypedEventFilter<ExpenditureMetadataSetEvent>;

export interface ExpenditurePayoutModifierSetEventObject {
  agent: string;
  expenditureId: BigNumber;
  slot: BigNumber;
  payoutModifier: BigNumber;
}
export type ExpenditurePayoutModifierSetEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  ExpenditurePayoutModifierSetEventObject
>;

export type ExpenditurePayoutModifierSetEventFilter =
  TypedEventFilter<ExpenditurePayoutModifierSetEvent>;

export interface ExpenditurePayoutSetEventObject {
  agent: string;
  expenditureId: BigNumber;
  slot: BigNumber;
  token: string;
  amount: BigNumber;
}
export type ExpenditurePayoutSetEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, BigNumber],
  ExpenditurePayoutSetEventObject
>;

export type ExpenditurePayoutSetEventFilter =
  TypedEventFilter<ExpenditurePayoutSetEvent>;

export interface ExpenditureRecipientSetEventObject {
  agent: string;
  expenditureId: BigNumber;
  slot: BigNumber;
  recipient: string;
}
export type ExpenditureRecipientSetEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  ExpenditureRecipientSetEventObject
>;

export type ExpenditureRecipientSetEventFilter =
  TypedEventFilter<ExpenditureRecipientSetEvent>;

export interface ExpenditureSkillSetEventObject {
  agent: string;
  expenditureId: BigNumber;
  slot: BigNumber;
  skillId: BigNumber;
}
export type ExpenditureSkillSetEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  ExpenditureSkillSetEventObject
>;

export type ExpenditureSkillSetEventFilter =
  TypedEventFilter<ExpenditureSkillSetEvent>;

export interface ExpenditureStateChangedEventObject {
  agent: string;
  expenditureId: BigNumber;
  storageSlot: BigNumber;
  mask: boolean[];
  keys: string[];
  value: string;
}
export type ExpenditureStateChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber, boolean[], string[], string],
  ExpenditureStateChangedEventObject
>;

export type ExpenditureStateChangedEventFilter =
  TypedEventFilter<ExpenditureStateChangedEvent>;

export interface ExpenditureTransferredEventObject {
  agent: string;
  expenditureId: BigNumber;
  owner: string;
}
export type ExpenditureTransferredEvent = TypedEvent<
  [string, BigNumber, string],
  ExpenditureTransferredEventObject
>;

export type ExpenditureTransferredEventFilter =
  TypedEventFilter<ExpenditureTransferredEvent>;

export interface ExtensionInitialisedEventObject {}
export type ExtensionInitialisedEvent = TypedEvent<
  [],
  ExtensionInitialisedEventObject
>;

export type ExtensionInitialisedEventFilter =
  TypedEventFilter<ExtensionInitialisedEvent>;

export interface FundingPotAddedEventObject {
  fundingPotId: BigNumber;
}
export type FundingPotAddedEvent = TypedEvent<
  [BigNumber],
  FundingPotAddedEventObject
>;

export type FundingPotAddedEventFilter = TypedEventFilter<FundingPotAddedEvent>;

export interface LocalSkillAddedEventObject {
  agent: string;
  localSkillId: BigNumber;
}
export type LocalSkillAddedEvent = TypedEvent<
  [string, BigNumber],
  LocalSkillAddedEventObject
>;

export type LocalSkillAddedEventFilter = TypedEventFilter<LocalSkillAddedEvent>;

export interface LocalSkillDeprecatedEventObject {
  agent: string;
  localSkillId: BigNumber;
  deprecated: boolean;
}
export type LocalSkillDeprecatedEvent = TypedEvent<
  [string, BigNumber, boolean],
  LocalSkillDeprecatedEventObject
>;

export type LocalSkillDeprecatedEventFilter =
  TypedEventFilter<LocalSkillDeprecatedEvent>;

export interface LogSetAuthorityEventObject {
  authority: string;
}
export type LogSetAuthorityEvent = TypedEvent<
  [string],
  LogSetAuthorityEventObject
>;

export type LogSetAuthorityEventFilter = TypedEventFilter<LogSetAuthorityEvent>;

export interface LogSetOwnerEventObject {
  owner: string;
}
export type LogSetOwnerEvent = TypedEvent<[string], LogSetOwnerEventObject>;

export type LogSetOwnerEventFilter = TypedEventFilter<LogSetOwnerEvent>;

export interface MetaTransactionExecutedEventObject {
  user: string;
  relayerAddress: string;
  functionSignature: string;
}
export type MetaTransactionExecutedEvent = TypedEvent<
  [string, string, string],
  MetaTransactionExecutedEventObject
>;

export type MetaTransactionExecutedEventFilter =
  TypedEventFilter<MetaTransactionExecutedEvent>;

export interface PaymentAddedEventObject {
  agent: string;
  paymentId: BigNumber;
}
export type PaymentAddedEvent = TypedEvent<
  [string, BigNumber],
  PaymentAddedEventObject
>;

export type PaymentAddedEventFilter = TypedEventFilter<PaymentAddedEvent>;

export interface PaymentFinalizedEventObject {
  agent: string;
  paymentId: BigNumber;
}
export type PaymentFinalizedEvent = TypedEvent<
  [string, BigNumber],
  PaymentFinalizedEventObject
>;

export type PaymentFinalizedEventFilter =
  TypedEventFilter<PaymentFinalizedEvent>;

export interface PaymentPayoutSetEventObject {
  agent: string;
  paymentId: BigNumber;
  token: string;
  amount: BigNumber;
}
export type PaymentPayoutSetEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  PaymentPayoutSetEventObject
>;

export type PaymentPayoutSetEventFilter =
  TypedEventFilter<PaymentPayoutSetEvent>;

export interface PaymentRecipientSetEventObject {
  agent: string;
  paymentId: BigNumber;
  recipient: string;
}
export type PaymentRecipientSetEvent = TypedEvent<
  [string, BigNumber, string],
  PaymentRecipientSetEventObject
>;

export type PaymentRecipientSetEventFilter =
  TypedEventFilter<PaymentRecipientSetEvent>;

export interface PaymentSkillSetEventObject {
  agent: string;
  paymentId: BigNumber;
  skillId: BigNumber;
}
export type PaymentSkillSetEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PaymentSkillSetEventObject
>;

export type PaymentSkillSetEventFilter = TypedEventFilter<PaymentSkillSetEvent>;

export interface PayoutClaimed_address_uint256_address_uint256_EventObject {
  agent: string;
  fundingPotId: BigNumber;
  token: string;
  amount: BigNumber;
}
export type PayoutClaimed_address_uint256_address_uint256_Event = TypedEvent<
  [string, BigNumber, string, BigNumber],
  PayoutClaimed_address_uint256_address_uint256_EventObject
>;

export type PayoutClaimed_address_uint256_address_uint256_EventFilter =
  TypedEventFilter<PayoutClaimed_address_uint256_address_uint256_Event>;

export interface PayoutClaimed_address_uint256_uint256_address_uint256_EventObject {
  agent: string;
  id: BigNumber;
  slot: BigNumber;
  token: string;
  tokenPayout: BigNumber;
}
export type PayoutClaimed_address_uint256_uint256_address_uint256_Event =
  TypedEvent<
    [string, BigNumber, BigNumber, string, BigNumber],
    PayoutClaimed_address_uint256_uint256_address_uint256_EventObject
  >;

export type PayoutClaimed_address_uint256_uint256_address_uint256_EventFilter =
  TypedEventFilter<PayoutClaimed_address_uint256_uint256_address_uint256_Event>;

export interface RewardPayoutClaimedEventObject {
  rewardPayoutId: BigNumber;
  user: string;
  fee: BigNumber;
  rewardRemainder: BigNumber;
}
export type RewardPayoutClaimedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  RewardPayoutClaimedEventObject
>;

export type RewardPayoutClaimedEventFilter =
  TypedEventFilter<RewardPayoutClaimedEvent>;

export interface RewardPayoutCycleEndedEventObject {
  agent: string;
  rewardPayoutId: BigNumber;
}
export type RewardPayoutCycleEndedEvent = TypedEvent<
  [string, BigNumber],
  RewardPayoutCycleEndedEventObject
>;

export type RewardPayoutCycleEndedEventFilter =
  TypedEventFilter<RewardPayoutCycleEndedEvent>;

export interface RewardPayoutCycleStartedEventObject {
  agent: string;
  rewardPayoutId: BigNumber;
}
export type RewardPayoutCycleStartedEvent = TypedEvent<
  [string, BigNumber],
  RewardPayoutCycleStartedEventObject
>;

export type RewardPayoutCycleStartedEventFilter =
  TypedEventFilter<RewardPayoutCycleStartedEvent>;

export interface StagedPaymentReleasedEventObject {
  expenditureId: BigNumber;
  slot: BigNumber;
}
export type StagedPaymentReleasedEvent = TypedEvent<
  [BigNumber, BigNumber],
  StagedPaymentReleasedEventObject
>;

export type StagedPaymentReleasedEventFilter =
  TypedEventFilter<StagedPaymentReleasedEvent>;

export interface TaskAddedEventObject {
  agent: string;
  taskId: BigNumber;
}
export type TaskAddedEvent = TypedEvent<
  [string, BigNumber],
  TaskAddedEventObject
>;

export type TaskAddedEventFilter = TypedEventFilter<TaskAddedEvent>;

export interface TaskBriefSetEventObject {
  taskId: BigNumber;
  specificationHash: string;
}
export type TaskBriefSetEvent = TypedEvent<
  [BigNumber, string],
  TaskBriefSetEventObject
>;

export type TaskBriefSetEventFilter = TypedEventFilter<TaskBriefSetEvent>;

export interface TaskCanceledEventObject {
  taskId: BigNumber;
}
export type TaskCanceledEvent = TypedEvent<
  [BigNumber],
  TaskCanceledEventObject
>;

export type TaskCanceledEventFilter = TypedEventFilter<TaskCanceledEvent>;

export interface TaskChangedViaSignaturesEventObject {
  reviewerAddresses: string[];
}
export type TaskChangedViaSignaturesEvent = TypedEvent<
  [string[]],
  TaskChangedViaSignaturesEventObject
>;

export type TaskChangedViaSignaturesEventFilter =
  TypedEventFilter<TaskChangedViaSignaturesEvent>;

export interface TaskCompletedEventObject {
  agent: string;
  taskId: BigNumber;
}
export type TaskCompletedEvent = TypedEvent<
  [string, BigNumber],
  TaskCompletedEventObject
>;

export type TaskCompletedEventFilter = TypedEventFilter<TaskCompletedEvent>;

export interface TaskDeliverableSubmittedEventObject {
  agent: string;
  taskId: BigNumber;
  deliverableHash: string;
}
export type TaskDeliverableSubmittedEvent = TypedEvent<
  [string, BigNumber, string],
  TaskDeliverableSubmittedEventObject
>;

export type TaskDeliverableSubmittedEventFilter =
  TypedEventFilter<TaskDeliverableSubmittedEvent>;

export interface TaskDueDateSetEventObject {
  taskId: BigNumber;
  dueDate: BigNumber;
}
export type TaskDueDateSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  TaskDueDateSetEventObject
>;

export type TaskDueDateSetEventFilter = TypedEventFilter<TaskDueDateSetEvent>;

export interface TaskFinalizedEventObject {
  agent: string;
  taskId: BigNumber;
}
export type TaskFinalizedEvent = TypedEvent<
  [string, BigNumber],
  TaskFinalizedEventObject
>;

export type TaskFinalizedEventFilter = TypedEventFilter<TaskFinalizedEvent>;

export interface TaskPayoutSetEventObject {
  taskId: BigNumber;
  role: number;
  token: string;
  amount: BigNumber;
}
export type TaskPayoutSetEvent = TypedEvent<
  [BigNumber, number, string, BigNumber],
  TaskPayoutSetEventObject
>;

export type TaskPayoutSetEventFilter = TypedEventFilter<TaskPayoutSetEvent>;

export interface TaskRoleUserSetEventObject {
  taskId: BigNumber;
  role: number;
  user: string;
}
export type TaskRoleUserSetEvent = TypedEvent<
  [BigNumber, number, string],
  TaskRoleUserSetEventObject
>;

export type TaskRoleUserSetEventFilter = TypedEventFilter<TaskRoleUserSetEvent>;

export interface TaskSkillSetEventObject {
  taskId: BigNumber;
  skillId: BigNumber;
}
export type TaskSkillSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  TaskSkillSetEventObject
>;

export type TaskSkillSetEventFilter = TypedEventFilter<TaskSkillSetEvent>;

export interface TaskWorkRatingRevealedEventObject {
  agent: string;
  taskId: BigNumber;
  role: number;
  rating: number;
}
export type TaskWorkRatingRevealedEvent = TypedEvent<
  [string, BigNumber, number, number],
  TaskWorkRatingRevealedEventObject
>;

export type TaskWorkRatingRevealedEventFilter =
  TypedEventFilter<TaskWorkRatingRevealedEvent>;

export interface TokenUnlockedEventObject {
  agent: string;
}
export type TokenUnlockedEvent = TypedEvent<[string], TokenUnlockedEventObject>;

export type TokenUnlockedEventFilter = TypedEventFilter<TokenUnlockedEvent>;

export interface TokensBurnedEventObject {
  agent: string;
  token: string;
  amount: BigNumber;
}
export type TokensBurnedEvent = TypedEvent<
  [string, string, BigNumber],
  TokensBurnedEventObject
>;

export type TokensBurnedEventFilter = TypedEventFilter<TokensBurnedEvent>;

export interface TokensMintedEventObject {
  agent: string;
  who: string;
  amount: BigNumber;
}
export type TokensMintedEvent = TypedEvent<
  [string, string, BigNumber],
  TokensMintedEventObject
>;

export type TokensMintedEventFilter = TypedEventFilter<TokensMintedEvent>;

export interface StagedExpenditureEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StagedExpenditureEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "Annotation(address,bytes32,string)"(
      agent?: string | null,
      txHash?: BytesLike | null,
      metadata?: null
    ): AnnotationEventFilter;
    Annotation(
      agent?: string | null,
      txHash?: BytesLike | null,
      metadata?: null
    ): AnnotationEventFilter;

    "ArbitraryReputationUpdate(address,address,uint256,int256)"(
      agent?: null,
      user?: null,
      skillId?: null,
      amount?: null
    ): ArbitraryReputationUpdateEventFilter;
    ArbitraryReputationUpdate(
      agent?: null,
      user?: null,
      skillId?: null,
      amount?: null
    ): ArbitraryReputationUpdateEventFilter;

    "ArbitraryTransaction(address,bytes,bool)"(
      target?: null,
      data?: null,
      success?: null
    ): ArbitraryTransactionEventFilter;
    ArbitraryTransaction(
      target?: null,
      data?: null,
      success?: null
    ): ArbitraryTransactionEventFilter;

    "ColonyBootstrapped(address,address[],int256[])"(
      agent?: null,
      users?: null,
      amounts?: null
    ): ColonyBootstrappedEventFilter;
    ColonyBootstrapped(
      agent?: null,
      users?: null,
      amounts?: null
    ): ColonyBootstrappedEventFilter;

    "ColonyFundsClaimed(address,address,uint256,uint256)"(
      agent?: null,
      token?: null,
      fee?: null,
      payoutRemainder?: null
    ): ColonyFundsClaimedEventFilter;
    ColonyFundsClaimed(
      agent?: null,
      token?: null,
      fee?: null,
      payoutRemainder?: null
    ): ColonyFundsClaimedEventFilter;

    "ColonyFundsMovedBetweenFundingPots(address,uint256,uint256,uint256,address)"(
      agent?: null,
      fromPot?: BigNumberish | null,
      toPot?: BigNumberish | null,
      amount?: null,
      token?: null
    ): ColonyFundsMovedBetweenFundingPotsEventFilter;
    ColonyFundsMovedBetweenFundingPots(
      agent?: null,
      fromPot?: BigNumberish | null,
      toPot?: BigNumberish | null,
      amount?: null,
      token?: null
    ): ColonyFundsMovedBetweenFundingPotsEventFilter;

    "ColonyInitialised(address,address,address)"(
      agent?: null,
      colonyNetwork?: null,
      token?: null
    ): ColonyInitialisedEventFilter;
    ColonyInitialised(
      agent?: null,
      colonyNetwork?: null,
      token?: null
    ): ColonyInitialisedEventFilter;

    "ColonyMetadata(address,string)"(
      agent?: null,
      metadata?: null
    ): ColonyMetadataEventFilter;
    ColonyMetadata(agent?: null, metadata?: null): ColonyMetadataEventFilter;

    "ColonyMetadataDelta(address,string)"(
      agent?: null,
      metadata?: null
    ): ColonyMetadataDeltaEventFilter;
    ColonyMetadataDelta(
      agent?: null,
      metadata?: null
    ): ColonyMetadataDeltaEventFilter;

    "ColonyRewardInverseSet(address,uint256)"(
      agent?: null,
      rewardInverse?: null
    ): ColonyRewardInverseSetEventFilter;
    ColonyRewardInverseSet(
      agent?: null,
      rewardInverse?: null
    ): ColonyRewardInverseSetEventFilter;

    "ColonyRoleSet(address,address,uint256,uint8,bool)"(
      agent?: null,
      user?: string | null,
      domainId?: BigNumberish | null,
      role?: BigNumberish | null,
      setTo?: null
    ): ColonyRoleSetEventFilter;
    ColonyRoleSet(
      agent?: null,
      user?: string | null,
      domainId?: BigNumberish | null,
      role?: BigNumberish | null,
      setTo?: null
    ): ColonyRoleSetEventFilter;

    "ColonyUpgraded(address,uint256,uint256)"(
      agent?: null,
      oldVersion?: null,
      newVersion?: null
    ): ColonyUpgradedEventFilter;
    ColonyUpgraded(
      agent?: null,
      oldVersion?: null,
      newVersion?: null
    ): ColonyUpgradedEventFilter;

    "DomainAdded(address,uint256)"(
      agent?: null,
      domainId?: null
    ): DomainAddedEventFilter;
    DomainAdded(agent?: null, domainId?: null): DomainAddedEventFilter;

    "DomainDeprecated(address,uint256,bool)"(
      agent?: null,
      domainId?: BigNumberish | null,
      deprecated?: null
    ): DomainDeprecatedEventFilter;
    DomainDeprecated(
      agent?: null,
      domainId?: BigNumberish | null,
      deprecated?: null
    ): DomainDeprecatedEventFilter;

    "DomainMetadata(address,uint256,string)"(
      agent?: null,
      domainId?: BigNumberish | null,
      metadata?: null
    ): DomainMetadataEventFilter;
    DomainMetadata(
      agent?: null,
      domainId?: BigNumberish | null,
      metadata?: null
    ): DomainMetadataEventFilter;

    "ExpenditureAdded(address,uint256)"(
      agent?: null,
      expenditureId?: null
    ): ExpenditureAddedEventFilter;
    ExpenditureAdded(
      agent?: null,
      expenditureId?: null
    ): ExpenditureAddedEventFilter;

    "ExpenditureCancelled(address,uint256)"(
      agent?: null,
      expenditureId?: BigNumberish | null
    ): ExpenditureCancelledEventFilter;
    ExpenditureCancelled(
      agent?: null,
      expenditureId?: BigNumberish | null
    ): ExpenditureCancelledEventFilter;

    "ExpenditureClaimDelaySet(address,uint256,uint256,uint256)"(
      agent?: null,
      expenditureId?: BigNumberish | null,
      slot?: BigNumberish | null,
      claimDelay?: null
    ): ExpenditureClaimDelaySetEventFilter;
    ExpenditureClaimDelaySet(
      agent?: null,
      expenditureId?: BigNumberish | null,
      slot?: BigNumberish | null,
      claimDelay?: null
    ): ExpenditureClaimDelaySetEventFilter;

    "ExpenditureFinalized(address,uint256)"(
      agent?: null,
      expenditureId?: BigNumberish | null
    ): ExpenditureFinalizedEventFilter;
    ExpenditureFinalized(
      agent?: null,
      expenditureId?: BigNumberish | null
    ): ExpenditureFinalizedEventFilter;

    "ExpenditureGlobalClaimDelaySet(address,uint256)"(
      agent?: null,
      globalClaimDelay?: null
    ): ExpenditureGlobalClaimDelaySetEventFilter;
    ExpenditureGlobalClaimDelaySet(
      agent?: null,
      globalClaimDelay?: null
    ): ExpenditureGlobalClaimDelaySetEventFilter;

    "ExpenditureLocked(address,uint256)"(
      agent?: null,
      expenditureId?: BigNumberish | null
    ): ExpenditureLockedEventFilter;
    ExpenditureLocked(
      agent?: null,
      expenditureId?: BigNumberish | null
    ): ExpenditureLockedEventFilter;

    "ExpenditureMadeStaged(uint256,bool)"(
      expenditureId?: BigNumberish | null,
      staged?: null
    ): ExpenditureMadeStagedEventFilter;
    ExpenditureMadeStaged(
      expenditureId?: BigNumberish | null,
      staged?: null
    ): ExpenditureMadeStagedEventFilter;

    "ExpenditureMetadataSet(address,uint256,string)"(
      agent?: null,
      expenditureId?: BigNumberish | null,
      metadata?: null
    ): ExpenditureMetadataSetEventFilter;
    ExpenditureMetadataSet(
      agent?: null,
      expenditureId?: BigNumberish | null,
      metadata?: null
    ): ExpenditureMetadataSetEventFilter;

    "ExpenditurePayoutModifierSet(address,uint256,uint256,int256)"(
      agent?: null,
      expenditureId?: BigNumberish | null,
      slot?: BigNumberish | null,
      payoutModifier?: null
    ): ExpenditurePayoutModifierSetEventFilter;
    ExpenditurePayoutModifierSet(
      agent?: null,
      expenditureId?: BigNumberish | null,
      slot?: BigNumberish | null,
      payoutModifier?: null
    ): ExpenditurePayoutModifierSetEventFilter;

    "ExpenditurePayoutSet(address,uint256,uint256,address,uint256)"(
      agent?: null,
      expenditureId?: BigNumberish | null,
      slot?: BigNumberish | null,
      token?: string | null,
      amount?: null
    ): ExpenditurePayoutSetEventFilter;
    ExpenditurePayoutSet(
      agent?: null,
      expenditureId?: BigNumberish | null,
      slot?: BigNumberish | null,
      token?: string | null,
      amount?: null
    ): ExpenditurePayoutSetEventFilter;

    "ExpenditureRecipientSet(address,uint256,uint256,address)"(
      agent?: null,
      expenditureId?: BigNumberish | null,
      slot?: BigNumberish | null,
      recipient?: string | null
    ): ExpenditureRecipientSetEventFilter;
    ExpenditureRecipientSet(
      agent?: null,
      expenditureId?: BigNumberish | null,
      slot?: BigNumberish | null,
      recipient?: string | null
    ): ExpenditureRecipientSetEventFilter;

    "ExpenditureSkillSet(address,uint256,uint256,uint256)"(
      agent?: null,
      expenditureId?: BigNumberish | null,
      slot?: BigNumberish | null,
      skillId?: BigNumberish | null
    ): ExpenditureSkillSetEventFilter;
    ExpenditureSkillSet(
      agent?: null,
      expenditureId?: BigNumberish | null,
      slot?: BigNumberish | null,
      skillId?: BigNumberish | null
    ): ExpenditureSkillSetEventFilter;

    "ExpenditureStateChanged(address,uint256,uint256,bool[],bytes32[],bytes32)"(
      agent?: null,
      expenditureId?: BigNumberish | null,
      storageSlot?: BigNumberish | null,
      mask?: null,
      keys?: null,
      value?: null
    ): ExpenditureStateChangedEventFilter;
    ExpenditureStateChanged(
      agent?: null,
      expenditureId?: BigNumberish | null,
      storageSlot?: BigNumberish | null,
      mask?: null,
      keys?: null,
      value?: null
    ): ExpenditureStateChangedEventFilter;

    "ExpenditureTransferred(address,uint256,address)"(
      agent?: null,
      expenditureId?: BigNumberish | null,
      owner?: string | null
    ): ExpenditureTransferredEventFilter;
    ExpenditureTransferred(
      agent?: null,
      expenditureId?: BigNumberish | null,
      owner?: string | null
    ): ExpenditureTransferredEventFilter;

    "ExtensionInitialised()"(): ExtensionInitialisedEventFilter;
    ExtensionInitialised(): ExtensionInitialisedEventFilter;

    "FundingPotAdded(uint256)"(fundingPotId?: null): FundingPotAddedEventFilter;
    FundingPotAdded(fundingPotId?: null): FundingPotAddedEventFilter;

    "LocalSkillAdded(address,uint256)"(
      agent?: null,
      localSkillId?: null
    ): LocalSkillAddedEventFilter;
    LocalSkillAdded(
      agent?: null,
      localSkillId?: null
    ): LocalSkillAddedEventFilter;

    "LocalSkillDeprecated(address,uint256,bool)"(
      agent?: null,
      localSkillId?: null,
      deprecated?: null
    ): LocalSkillDeprecatedEventFilter;
    LocalSkillDeprecated(
      agent?: null,
      localSkillId?: null,
      deprecated?: null
    ): LocalSkillDeprecatedEventFilter;

    "LogSetAuthority(address)"(
      authority?: string | null
    ): LogSetAuthorityEventFilter;
    LogSetAuthority(authority?: string | null): LogSetAuthorityEventFilter;

    "LogSetOwner(address)"(owner?: string | null): LogSetOwnerEventFilter;
    LogSetOwner(owner?: string | null): LogSetOwnerEventFilter;

    "MetaTransactionExecuted(address,address,bytes)"(
      user?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;
    MetaTransactionExecuted(
      user?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;

    "PaymentAdded(address,uint256)"(
      agent?: null,
      paymentId?: null
    ): PaymentAddedEventFilter;
    PaymentAdded(agent?: null, paymentId?: null): PaymentAddedEventFilter;

    "PaymentFinalized(address,uint256)"(
      agent?: null,
      paymentId?: BigNumberish | null
    ): PaymentFinalizedEventFilter;
    PaymentFinalized(
      agent?: null,
      paymentId?: BigNumberish | null
    ): PaymentFinalizedEventFilter;

    "PaymentPayoutSet(address,uint256,address,uint256)"(
      agent?: null,
      paymentId?: BigNumberish | null,
      token?: null,
      amount?: null
    ): PaymentPayoutSetEventFilter;
    PaymentPayoutSet(
      agent?: null,
      paymentId?: BigNumberish | null,
      token?: null,
      amount?: null
    ): PaymentPayoutSetEventFilter;

    "PaymentRecipientSet(address,uint256,address)"(
      agent?: null,
      paymentId?: BigNumberish | null,
      recipient?: null
    ): PaymentRecipientSetEventFilter;
    PaymentRecipientSet(
      agent?: null,
      paymentId?: BigNumberish | null,
      recipient?: null
    ): PaymentRecipientSetEventFilter;

    "PaymentSkillSet(address,uint256,uint256)"(
      agent?: null,
      paymentId?: BigNumberish | null,
      skillId?: null
    ): PaymentSkillSetEventFilter;
    PaymentSkillSet(
      agent?: null,
      paymentId?: BigNumberish | null,
      skillId?: null
    ): PaymentSkillSetEventFilter;

    "PayoutClaimed(address,uint256,address,uint256)"(
      agent?: null,
      fundingPotId?: BigNumberish | null,
      token?: null,
      amount?: null
    ): PayoutClaimed_address_uint256_address_uint256_EventFilter;
    "PayoutClaimed(address,uint256,uint256,address,uint256)"(
      agent?: null,
      id?: null,
      slot?: null,
      token?: null,
      tokenPayout?: null
    ): PayoutClaimed_address_uint256_uint256_address_uint256_EventFilter;

    "RewardPayoutClaimed(uint256,address,uint256,uint256)"(
      rewardPayoutId?: null,
      user?: null,
      fee?: null,
      rewardRemainder?: null
    ): RewardPayoutClaimedEventFilter;
    RewardPayoutClaimed(
      rewardPayoutId?: null,
      user?: null,
      fee?: null,
      rewardRemainder?: null
    ): RewardPayoutClaimedEventFilter;

    "RewardPayoutCycleEnded(address,uint256)"(
      agent?: null,
      rewardPayoutId?: null
    ): RewardPayoutCycleEndedEventFilter;
    RewardPayoutCycleEnded(
      agent?: null,
      rewardPayoutId?: null
    ): RewardPayoutCycleEndedEventFilter;

    "RewardPayoutCycleStarted(address,uint256)"(
      agent?: null,
      rewardPayoutId?: null
    ): RewardPayoutCycleStartedEventFilter;
    RewardPayoutCycleStarted(
      agent?: null,
      rewardPayoutId?: null
    ): RewardPayoutCycleStartedEventFilter;

    "StagedPaymentReleased(uint256,uint256)"(
      expenditureId?: BigNumberish | null,
      slot?: null
    ): StagedPaymentReleasedEventFilter;
    StagedPaymentReleased(
      expenditureId?: BigNumberish | null,
      slot?: null
    ): StagedPaymentReleasedEventFilter;

    "TaskAdded(address,uint256)"(
      agent?: null,
      taskId?: null
    ): TaskAddedEventFilter;
    TaskAdded(agent?: null, taskId?: null): TaskAddedEventFilter;

    "TaskBriefSet(uint256,bytes32)"(
      taskId?: BigNumberish | null,
      specificationHash?: null
    ): TaskBriefSetEventFilter;
    TaskBriefSet(
      taskId?: BigNumberish | null,
      specificationHash?: null
    ): TaskBriefSetEventFilter;

    "TaskCanceled(uint256)"(
      taskId?: BigNumberish | null
    ): TaskCanceledEventFilter;
    TaskCanceled(taskId?: BigNumberish | null): TaskCanceledEventFilter;

    "TaskChangedViaSignatures(address[])"(
      reviewerAddresses?: null
    ): TaskChangedViaSignaturesEventFilter;
    TaskChangedViaSignatures(
      reviewerAddresses?: null
    ): TaskChangedViaSignaturesEventFilter;

    "TaskCompleted(address,uint256)"(
      agent?: null,
      taskId?: BigNumberish | null
    ): TaskCompletedEventFilter;
    TaskCompleted(
      agent?: null,
      taskId?: BigNumberish | null
    ): TaskCompletedEventFilter;

    "TaskDeliverableSubmitted(address,uint256,bytes32)"(
      agent?: null,
      taskId?: BigNumberish | null,
      deliverableHash?: null
    ): TaskDeliverableSubmittedEventFilter;
    TaskDeliverableSubmitted(
      agent?: null,
      taskId?: BigNumberish | null,
      deliverableHash?: null
    ): TaskDeliverableSubmittedEventFilter;

    "TaskDueDateSet(uint256,uint256)"(
      taskId?: BigNumberish | null,
      dueDate?: null
    ): TaskDueDateSetEventFilter;
    TaskDueDateSet(
      taskId?: BigNumberish | null,
      dueDate?: null
    ): TaskDueDateSetEventFilter;

    "TaskFinalized(address,uint256)"(
      agent?: null,
      taskId?: BigNumberish | null
    ): TaskFinalizedEventFilter;
    TaskFinalized(
      agent?: null,
      taskId?: BigNumberish | null
    ): TaskFinalizedEventFilter;

    "TaskPayoutSet(uint256,uint8,address,uint256)"(
      taskId?: BigNumberish | null,
      role?: null,
      token?: null,
      amount?: null
    ): TaskPayoutSetEventFilter;
    TaskPayoutSet(
      taskId?: BigNumberish | null,
      role?: null,
      token?: null,
      amount?: null
    ): TaskPayoutSetEventFilter;

    "TaskRoleUserSet(uint256,uint8,address)"(
      taskId?: BigNumberish | null,
      role?: null,
      user?: string | null
    ): TaskRoleUserSetEventFilter;
    TaskRoleUserSet(
      taskId?: BigNumberish | null,
      role?: null,
      user?: string | null
    ): TaskRoleUserSetEventFilter;

    "TaskSkillSet(uint256,uint256)"(
      taskId?: BigNumberish | null,
      skillId?: BigNumberish | null
    ): TaskSkillSetEventFilter;
    TaskSkillSet(
      taskId?: BigNumberish | null,
      skillId?: BigNumberish | null
    ): TaskSkillSetEventFilter;

    "TaskWorkRatingRevealed(address,uint256,uint8,uint8)"(
      agent?: null,
      taskId?: BigNumberish | null,
      role?: null,
      rating?: null
    ): TaskWorkRatingRevealedEventFilter;
    TaskWorkRatingRevealed(
      agent?: null,
      taskId?: BigNumberish | null,
      role?: null,
      rating?: null
    ): TaskWorkRatingRevealedEventFilter;

    "TokenUnlocked(address)"(agent?: null): TokenUnlockedEventFilter;
    TokenUnlocked(agent?: null): TokenUnlockedEventFilter;

    "TokensBurned(address,address,uint256)"(
      agent?: null,
      token?: null,
      amount?: null
    ): TokensBurnedEventFilter;
    TokensBurned(
      agent?: null,
      token?: null,
      amount?: null
    ): TokensBurnedEventFilter;

    "TokensMinted(address,address,uint256)"(
      agent?: null,
      who?: null,
      amount?: null
    ): TokensMintedEventFilter;
    TokensMinted(
      agent?: null,
      who?: null,
      amount?: null
    ): TokensMintedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
