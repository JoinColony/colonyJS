{
    "contractName": "PatriciaTreeNoHash",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "key",
                    "type": "bytes32"
                },
                {
                    "internalType": "bytes",
                    "name": "value",
                    "type": "bytes"
                }
            ],
            "name": "insert",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "key",
                    "type": "bytes32"
                }
            ],
            "name": "getProof",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "branchMask",
                    "type": "uint256"
                },
                {
                    "internalType": "bytes32[]",
                    "name": "_siblings",
                    "type": "bytes32[]"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "key",
                    "type": "bytes32"
                },
                {
                    "internalType": "bytes",
                    "name": "value",
                    "type": "bytes"
                },
                {
                    "internalType": "uint256",
                    "name": "branchMask",
                    "type": "uint256"
                },
                {
                    "internalType": "bytes32[]",
                    "name": "siblings",
                    "type": "bytes32[]"
                }
            ],
            "name": "getImpliedRoot",
            "outputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getRootHash",
            "outputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getRootEdge",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "bytes32",
                            "name": "node",
                            "type": "bytes32"
                        },
                        {
                            "components": [
                                {
                                    "internalType": "bytes32",
                                    "name": "data",
                                    "type": "bytes32"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "length",
                                    "type": "uint256"
                                }
                            ],
                            "internalType": "struct Data.Label",
                            "name": "label",
                            "type": "tuple"
                        }
                    ],
                    "internalType": "struct Data.Edge",
                    "name": "e",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "hash",
                    "type": "bytes32"
                }
            ],
            "name": "getNode",
            "outputs": [
                {
                    "components": [
                        {
                            "components": [
                                {
                                    "internalType": "bytes32",
                                    "name": "node",
                                    "type": "bytes32"
                                },
                                {
                                    "components": [
                                        {
                                            "internalType": "bytes32",
                                            "name": "data",
                                            "type": "bytes32"
                                        },
                                        {
                                            "internalType": "uint256",
                                            "name": "length",
                                            "type": "uint256"
                                        }
                                    ],
                                    "internalType": "struct Data.Label",
                                    "name": "label",
                                    "type": "tuple"
                                }
                            ],
                            "internalType": "struct Data.Edge[2]",
                            "name": "children",
                            "type": "tuple[2]"
                        }
                    ],
                    "internalType": "struct Data.Node",
                    "name": "n",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        }
    ],
    "bytecode": "0x608060405234801561001057600080fd5b5061117a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631b80bb3a1461006757806350c946fe146100915780635d7a8978146100b157806380759f1f146100d1578063a43914da146100d9578063a4f3a603146100ee575b600080fd5b61007a610075366004610dcc565b610103565b6040516100889291906110d3565b60405180910390f35b6100a461009f366004610dcc565b610119565b6040516100889190611095565b6100c46100bf366004610e29565b610130565b6040516100889190610f73565b6100c4610147565b6100e1610156565b6040516100889190611087565b6101016100fc366004610de4565b610166565b005b6000606061011083610176565b91509150915091565b610121610c8b565b61012a82610403565b92915050565b600061013e85858585610492565b95945050505050565b60006101516104b3565b905090565b61015e610ca3565b6101516104b9565b610172600083836104f2565b5050565b600080546060906101a25760405162461bcd60e51b815260040161019990610fb3565b60405180910390fd5b6101aa610cb9565b506040805180820190915283815261010060208201526101c8610ca3565b506040805180820182526001548152815180830190925260025482526003546020838101919091528101919091526101fe610cd0565b6000805b61020a610cb9565b610212610cb9565b60208601516102229088906105aa565b602080890151810151908301519294509092501461023c57fe5b602081015161024c575050610371565b8160200151840193508360ff036001901b891798506001840193506000610271610cb9565b61027a836105d8565b8951600090815260046020526040902091935091506102e8906001849003600281106102a257fe5b6003020160405180604001604052908160008201548152602001600182016040518060400160405290816000820154815260200160018201548152505081525050610632565b6001860195889061010081106102fa57fe5b6020908102919091019190915288516000908152600490915260409020826002811061032257fe5b6003020160405180604001604052908160008201548152602001600182016040518060400160405290816000820154815260200160018201548152505081525050975080985050505050610202565b80156103f9578067ffffffffffffffff8111801561038e57600080fd5b506040519080825280602002602001820160405280156103b8578160200160208202803683370190505b50955060005b818110156103f757838161010081106103d357fe5b60200201518782815181106103e457fe5b60209081029190910101526001016103be565b505b5050505050915091565b61040b610c8b565b6000828152600460209081526040808320815160608101909252909290918391908201908390600290835b82821015610484576040805180820182526003840286018054825282518084019093526001808201548452600290910154602084810191909152808301939093529083529092019101610436565b505050915250909392505050565b6000806104a88686805190602001208686610671565b509695505050505050565b60005490565b6104c1610ca3565b5060408051808201825260015481528151808301909252600254825260035460208381019190915281019190915290565b6104fa610cb9565b5060408051808201909152828152610100602080830191909152825190830120610522610ca3565b8554610537576020810183905281815261057a565b60408051808201825260018801548152815180830190925260028801548252600388015460208381019190915281019190915261057790879085856107f2565b90505b61058381610632565b86558051600187015560209081015180516002880155015160039095019490945550505050565b6105b2610cb9565b6105ba610cb9565b6105cd846105c88686610a20565b610a89565b915091509250929050565b60006105e2610cb9565b60008360200151116106065760405162461bcd60e51b815260040161019990611042565b5050805160408051808201909152825160011b8152602092830151600019019281019290925260ff1c91565b8051602080830151808201519051604051600094610654949093929101610f5d565b604051602081830303815290604052805190602001209050919050565b600061067b610cf0565b610683610cb9565b506040805180820190915286815261010060208201526106a1610ca3565b8681526106ac610cf0565b60005b86518110156107885760006106c389610af0565b60ff169050806001901b19891698506106e88160ff0386610a8990919063ffffffff16565b602086018190529095506000906106fe906105d8565b6020870152905061070e85610632565b84826002811061071a57fe5b6020020152885189906000198582030190811061073357fe5b602002602001015184826001036002811061074a57fe5b602002018181525050836040516020016107649190610f1b565b60408051601f198184030181529190528051602090910120855250506001016106af565b508661079a57602082018390526107db565b60006107a588610af0565b60ff1690506107c08160ff0385610a8990919063ffffffff16565b602085018190529094506107d3906105d8565b602085015250505b6107e482610632565b999098509650505050505050565b6107fa610ca3565b8360200151602001518360200151101561081057fe5b610818610cb9565b610820610cb9565b61082e8587602001516105aa565b9092509050600061083d610cb9565b60008360200151600014156108535750856109fc565b88602001516020015185602001511061096d5761086e610c8b565b8951600090815260048c0160209081526040808320815160608101909252909290918391908201908390600290835b828210156108eb57604080518082018252600384028601805482528251808401909352600180820154845260029091015460208481019190915280830193909352908352909201910161089d565b505050508152505090506108fe856105d8565b82519195509350610922908c90866002811061091657fe5b6020020151858b6107f2565b8151856002811061092f57fe5b602090810291909101919091528a51600090815260048d0190915260408120906109598282610d0e565b50506109658b82610b4f565b9150506109fc565b610976846105d8565b9093509150610983610c8b565b6040805180820190915288815260208101849052815185600281106109a457fe5b602002018190525060405180604001604052808b6000015181526020016109d68c602001518960200151600101610bb5565b905281516001869003600281106109e957fe5b60200201526109f88b82610b4f565b9150505b60405180604001604052808281526020018681525095505050505050949350505050565b6000808260200151846020015110610a3c578260200151610a42565b83602001515b905080610a5357600091505061012a565b82518451186000196101008390031b1680610a705750905061012a565b610a7981610bf7565b60ff0360ff169250505092915050565b610a91610cb9565b610a99610cb9565b83602001518311158015610aaf57506101008311155b610ab557fe5b6020820183905282610aca5760008252610ad9565b835160011960ff8590031b1682525b60208085015184900390820152925190911b825291565b600081610b0f5760405162461bcd60e51b815260040161019990610f7c565b8160805b60018160ff1610610b4857600019600160ff83161b018216610b3d579182019160ff81169190911c905b60011c607f16610b13565b5050919050565b600080610b5b83610c58565b83515160008281526004968701602090815260409091208251815591810151805160018401558101516002830155945185015180516003830155850151805196820196909655949093015160059094019390935550919050565b610bbd610cb9565b8260200151821115610be15760405162461bcd60e51b815260040161019990610ff6565b602080840151839003908201529151901b815290565b600081610c165760405162461bcd60e51b815260040161019990610f7c565b8160805b60018160ff1610610b48578060ff1660018260ff166001901b03901b8216600014610c4d579182019160ff81169190911c905b60011c607f16610c1a565b8051600090610c6d90825b6020020151610632565b8251610c7a906001610c63565b604051602001610654929190610f4f565b6040518060200160405280610c9e610d38565b905290565b604080518082019091526000815260208101610c9e5b604080518082019091526000808252602082015290565b604051806120000160405280610100906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b50600080825560018201819055600282018190556003820181905560048201819055600590910155565b60405180604001604052806002905b610d4f610ca3565b815260200190600190039081610d475790505090565b600082601f830112610d75578081fd5b813567ffffffffffffffff811115610d8957fe5b610d9c601f8201601f1916602001611120565b9150808252836020828501011115610db357600080fd5b8060208401602084013760009082016020015292915050565b600060208284031215610ddd578081fd5b5035919050565b60008060408385031215610df6578081fd5b82359150602083013567ffffffffffffffff811115610e13578182fd5b610e1f85828601610d65565b9150509250929050565b60008060008060808587031215610e3e578182fd5b8435935060208086013567ffffffffffffffff80821115610e5d578485fd5b610e6989838a01610d65565b9550604088013594506060880135915080821115610e85578384fd5b818801915088601f830112610e98578384fd5b813581811115610ea457fe5b8381029150610eb4848301611120565b8181528481019084860184860187018d1015610ece578788fd5b8795505b83861015610ef0578035835260019590950194918601918601610ed2565b50989b979a50959850505050505050565b805182526020908101518051828401520151604090910152565b60008183825b6002811015610f40578151835260209283019290910190600101610f21565b50505060408201905092915050565b918252602082015260400190565b9283526020830191909152604082015260600190565b90815260200190565b6020808252601e908201527f636f6c6f6e792d70617472696369612d747265652d7a65726f2d73656c660000604082015260600190565b60208082526023908201527f636f6c6f6e792d70617472696369612d747265652d7a65726f2d747265652d726040820152621bdbdd60ea1b606082015260800190565b6020808252602c908201527f636f6c6f6e792d70617472696369612d747265652d7072656669782d6c6f6e6760408201526b32b916ba3430b716b9b2b63360a11b606082015260800190565b60208082526025908201527f636f6c6f6e792d70617472696369612d747265652d7a65726f2d73656c662d6c6040820152640cadccee8d60db1b606082015260800190565b6060810161012a8284610f01565b815160c08201908260005b60028110156110ca576110b4828451610f01565b60209290920191606091909101906001016110a0565b50505092915050565b60006040820184835260206040818501528185518084526060860191508287019350845b81811015611113578451835293830193918301916001016110f7565b5090979650505050505050565b60405181810167ffffffffffffffff8111828210171561113c57fe5b60405291905056fea26469706673582212208d86f2a3e1c771d44df76c85ec803b99e6ca027cb70e4aa47e2aa7a63aec35a364736f6c63430007030033",
    "devdoc": {
        "kind": "dev",
        "methods": {
            "getImpliedRoot(bytes32,bytes,uint256,bytes32[])": {
                "returns": {
                    "_0": "rootHash The calculated hash"
                }
            },
            "getProof(bytes32)": {
                "returns": {
                    "_siblings": "Hashes of sibling edges",
                    "branchMask": "Bitmask with high bits at the positions in the `key` where we have branch nodes (bit in key denotes direction)"
                }
            }
        },
        "title": "Patricia tree implementation",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "getImpliedRoot(bytes32,bytes,uint256,bytes32[])": {
                "notice": "Calculates and returns a root hash for the `key`, `value`, `branchMask` and `siblings`"
            },
            "getProof(bytes32)": {
                "notice": "Returns the Merkle-proof for the given `key`"
            },
            "insert(bytes32,bytes)": {
                "notice": "Insert the `key`/`value`in the appropriate place in the tree"
            }
        },
        "notice": "More info at: https://github.com/chriseth/patricia-trie",
        "version": 1
    }
}