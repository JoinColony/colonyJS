{
    "contractName": "PatriciaTree",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "bytes",
                    "name": "key",
                    "type": "bytes"
                },
                {
                    "internalType": "bytes",
                    "name": "value",
                    "type": "bytes"
                }
            ],
            "name": "insert",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes",
                    "name": "key",
                    "type": "bytes"
                }
            ],
            "name": "getProof",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "branchMask",
                    "type": "uint256"
                },
                {
                    "internalType": "bytes32[]",
                    "name": "_siblings",
                    "type": "bytes32[]"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes",
                    "name": "key",
                    "type": "bytes"
                },
                {
                    "internalType": "bytes",
                    "name": "value",
                    "type": "bytes"
                },
                {
                    "internalType": "uint256",
                    "name": "branchMask",
                    "type": "uint256"
                },
                {
                    "internalType": "bytes32[]",
                    "name": "siblings",
                    "type": "bytes32[]"
                }
            ],
            "name": "getImpliedRoot",
            "outputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getRootHash",
            "outputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getRootEdge",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "bytes32",
                            "name": "node",
                            "type": "bytes32"
                        },
                        {
                            "components": [
                                {
                                    "internalType": "bytes32",
                                    "name": "data",
                                    "type": "bytes32"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "length",
                                    "type": "uint256"
                                }
                            ],
                            "internalType": "struct Data.Label",
                            "name": "label",
                            "type": "tuple"
                        }
                    ],
                    "internalType": "struct Data.Edge",
                    "name": "e",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "hash",
                    "type": "bytes32"
                }
            ],
            "name": "getNode",
            "outputs": [
                {
                    "components": [
                        {
                            "components": [
                                {
                                    "internalType": "bytes32",
                                    "name": "node",
                                    "type": "bytes32"
                                },
                                {
                                    "components": [
                                        {
                                            "internalType": "bytes32",
                                            "name": "data",
                                            "type": "bytes32"
                                        },
                                        {
                                            "internalType": "uint256",
                                            "name": "length",
                                            "type": "uint256"
                                        }
                                    ],
                                    "internalType": "struct Data.Label",
                                    "name": "label",
                                    "type": "tuple"
                                }
                            ],
                            "internalType": "struct Data.Edge[2]",
                            "name": "children",
                            "type": "tuple[2]"
                        }
                    ],
                    "internalType": "struct Data.Node",
                    "name": "n",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        }
    ],
    "bytecode": "0x608060405234801561001057600080fd5b506111fa806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806320ba5b601461006757806350c946fe1461007c578063693ac4fb146100a55780637f8b9478146100c657806380759f1f146100e6578063a43914da146100ee575b600080fd5b61007a610075366004610e32565b610103565b005b61008f61008a366004610ddf565b61011b565b60405161009c9190611115565b60405180910390f35b6100b86100b3366004610df7565b610132565b60405161009c929190611153565b6100d96100d4366004610e93565b61014f565b60405161009c9190610ff3565b6100d9610166565b6100f6610175565b60405161009c9190611107565b815160208301206101179060009083610185565b5050565b610123610c9e565b61012c8261023d565b92915050565b6000606061014683805190602001206102cc565b91509150915091565b600061015d85858585610559565b95945050505050565b6000610170610581565b905090565b61017d610cb6565b610170610587565b61018d610ccc565b50604080518082019091528281526101006020808301919091528251908301206101b5610cb6565b85546101ca576020810183905281815261020d565b60408051808201825260018801548152815180830190925260028801548252600388015460208381019190915281019190915261020a90879085856105c0565b90505b610216816107ee565b86558051600187015560209081015180516002880155015160039095019490945550505050565b610245610c9e565b6000828152600460209081526040808320815160608101909252909290918391908201908390600290835b828210156102be576040805180820182526003840286018054825282518084019093526001808201548452600290910154602084810191909152808301939093529083529092019101610270565b505050915250909392505050565b600080546060906102f85760405162461bcd60e51b81526004016102ef90611033565b60405180910390fd5b610300610ccc565b5060408051808201909152838152610100602082015261031e610cb6565b50604080518082018252600154815281518083019092526002548252600354602083810191909152810191909152610354610ce3565b6000805b610360610ccc565b610368610ccc565b602086015161037890889061082d565b602080890151810151908301519294509092501461039257fe5b60208101516103a25750506104c7565b8160200151840193508360ff036001901b8917985060018401935060006103c7610ccc565b6103d08361085b565b89516000908152600460205260409020919350915061043e906001849003600281106103f857fe5b60030201604051806040016040529081600082015481526020016001820160405180604001604052908160008201548152602001600182015481525050815250506107ee565b60018601958890610100811061045057fe5b6020908102919091019190915288516000908152600490915260409020826002811061047857fe5b6003020160405180604001604052908160008201548152602001600182016040518060400160405290816000820154815260200160018201548152505081525050975080985050505050610358565b801561054f578067ffffffffffffffff811180156104e457600080fd5b5060405190808252806020026020018201604052801561050e578160200160208202803683370190505b50955060005b8181101561054d578381610100811061052957fe5b602002015187828151811061053a57fe5b6020908102919091010152600101610514565b505b5050505050915091565b6000806105768680519060200120868051906020012086866108b5565b509695505050505050565b60005490565b61058f610cb6565b5060408051808201825260015481528151808301909252600254825260035460208381019190915281019190915290565b6105c8610cb6565b836020015160200151836020015110156105de57fe5b6105e6610ccc565b6105ee610ccc565b6105fc85876020015161082d565b9092509050600061060b610ccc565b60008360200151600014156106215750856107ca565b88602001516020015185602001511061073b5761063c610c9e565b8951600090815260048c0160209081526040808320815160608101909252909290918391908201908390600290835b828210156106b957604080518082018252600384028601805482528251808401909352600180820154845260029091015460208481019190915280830193909352908352909201910161066b565b505050508152505090506106cc8561085b565b825191955093506106f0908c9086600281106106e457fe5b6020020151858b6105c0565b815185600281106106fd57fe5b602090810291909101919091528a51600090815260048d0190915260408120906107278282610d03565b50506107338b82610a36565b9150506107ca565b6107448461085b565b9093509150610751610c9e565b60408051808201909152888152602081018490528151856002811061077257fe5b602002018190525060405180604001604052808b6000015181526020016107a48c602001518960200151600101610a99565b905281516001869003600281106107b757fe5b60200201526107c68b82610a36565b9150505b60405180604001604052808281526020018681525095505050505050949350505050565b8051602080830151808201519051604051600094610810949093929101610fdd565b604051602081830303815290604052805190602001209050919050565b610835610ccc565b61083d610ccc565b6108508461084b8686610adb565b610b44565b915091509250929050565b6000610865610ccc565b60008360200151116108895760405162461bcd60e51b81526004016102ef906110c2565b5050805160408051808201909152825160011b8152602092830151600019019281019290925260ff1c91565b60006108bf610d2d565b6108c7610ccc565b506040805180820190915286815261010060208201526108e5610cb6565b8681526108f0610d2d565b60005b86518110156109cc57600061090789610bab565b60ff169050806001901b198916985061092c8160ff0386610b4490919063ffffffff16565b602086018190529095506000906109429061085b565b60208701529050610952856107ee565b84826002811061095e57fe5b6020020152885189906000198582030190811061097757fe5b602002602001015184826001036002811061098e57fe5b602002018181525050836040516020016109a89190610f9b565b60408051601f198184030181529190528051602090910120855250506001016108f3565b50866109de5760208201839052610a1f565b60006109e988610bab565b60ff169050610a048160ff0385610b4490919063ffffffff16565b60208501819052909450610a179061085b565b602085015250505b610a28826107ee565b999098509650505050505050565b600080610a4283610c0a565b83515160008281526004878101602090815260409092208351815592820151805160018501558201516002840155865182015180516003850155820151805191840191909155015160059091015591505092915050565b610aa1610ccc565b8260200151821115610ac55760405162461bcd60e51b81526004016102ef90611076565b602080840151839003908201529151901b815290565b6000808260200151846020015110610af7578260200151610afd565b83602001515b905080610b0e57600091505061012c565b82518451186000196101008390031b1680610b2b5750905061012c565b610b3481610c3d565b60ff0360ff169250505092915050565b610b4c610ccc565b610b54610ccc565b83602001518311158015610b6a57506101008311155b610b7057fe5b6020820183905282610b855760008252610b94565b835160011960ff8590031b1682525b60208085015184900390820152925190911b825291565b600081610bca5760405162461bcd60e51b81526004016102ef90610ffc565b8160805b60018160ff1610610c0357600019600160ff83161b018216610bf8579182019160ff81169190911c905b60011c607f16610bce565b5050919050565b8051600090610c1f90825b60200201516107ee565b8251610c2c906001610c15565b604051602001610810929190610fcf565b600081610c5c5760405162461bcd60e51b81526004016102ef90610ffc565b8160805b60018160ff1610610c03578060ff1660018260ff166001901b03901b8216600014610c93579182019160ff81169190911c905b60011c607f16610c60565b6040518060200160405280610cb1610d4b565b905290565b604080518082019091526000815260208101610cb15b604080518082019091526000808252602082015290565b604051806120000160405280610100906020820280368337509192915050565b50600080825560018201819055600282018190556003820181905560048201819055600590910155565b60405180604001604052806002906020820280368337509192915050565b60405180604001604052806002905b610d62610cb6565b815260200190600190039081610d5a5790505090565b600082601f830112610d88578081fd5b813567ffffffffffffffff811115610d9c57fe5b610daf601f8201601f19166020016111a0565b9150808252836020828501011115610dc657600080fd5b8060208401602084013760009082016020015292915050565b600060208284031215610df0578081fd5b5035919050565b600060208284031215610e08578081fd5b813567ffffffffffffffff811115610e1e578182fd5b610e2a84828501610d78565b949350505050565b60008060408385031215610e44578081fd5b823567ffffffffffffffff80821115610e5b578283fd5b610e6786838701610d78565b93506020850135915080821115610e7c578283fd5b50610e8985828601610d78565b9150509250929050565b60008060008060808587031215610ea8578182fd5b843567ffffffffffffffff80821115610ebf578384fd5b610ecb88838901610d78565b9550602091508187013581811115610ee1578485fd5b610eed89828a01610d78565b95505060408701359350606087013581811115610f08578384fd5b8701601f81018913610f18578384fd5b803582811115610f2457fe5b8381029250610f348484016111a0565b8181528481019083860185850187018d1015610f4e578788fd5b8795505b83861015610f70578035835260019590950194918601918601610f52565b50989b979a50959850505050505050565b805182526020908101518051828401520151604090910152565b60008183825b6002811015610fc0578151835260209283019290910190600101610fa1565b50505060408201905092915050565b918252602082015260400190565b9283526020830191909152604082015260600190565b90815260200190565b6020808252601e908201527f636f6c6f6e792d70617472696369612d747265652d7a65726f2d73656c660000604082015260600190565b60208082526023908201527f636f6c6f6e792d70617472696369612d747265652d7a65726f2d747265652d726040820152621bdbdd60ea1b606082015260800190565b6020808252602c908201527f636f6c6f6e792d70617472696369612d747265652d7072656669782d6c6f6e6760408201526b32b916ba3430b716b9b2b63360a11b606082015260800190565b60208082526025908201527f636f6c6f6e792d70617472696369612d747265652d7a65726f2d73656c662d6c6040820152640cadccee8d60db1b606082015260800190565b6060810161012c8284610f81565b815160c08201908260005b600281101561114a57611134828451610f81565b6020929092019160609190910190600101611120565b50505092915050565b60006040820184835260206040818501528185518084526060860191508287019350845b8181101561119357845183529383019391830191600101611177565b5090979650505050505050565b60405181810167ffffffffffffffff811182821017156111bc57fe5b60405291905056fea26469706673582212201bda87df8912fbb49c5750603ff0638e30362218c104699841bfb14c7919251364736f6c63430007030033",
    "devdoc": {
        "kind": "dev",
        "methods": {
            "getImpliedRoot(bytes,bytes,uint256,bytes32[])": {
                "returns": {
                    "_0": "rootHash The calculated hash"
                }
            },
            "getProof(bytes)": {
                "returns": {
                    "_siblings": "Hashes of sibling edges",
                    "branchMask": "Bitmask with high bits at the positions in the `key` where we have branch nodes (bit in key denotes direction)"
                }
            }
        },
        "title": "Patricia tree implementation",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "getImpliedRoot(bytes,bytes,uint256,bytes32[])": {
                "notice": "Calculates and returns a root hash for the `key`, `value`, `branchMask` and `siblings`"
            },
            "getProof(bytes)": {
                "notice": "Returns the Merkle-proof for the given `key`"
            },
            "insert(bytes,bytes)": {
                "notice": "Insert the `key`/`value`in the appropriate place in the tree"
            }
        },
        "notice": "More info at: https://github.com/chriseth/patricia-trie",
        "version": 1
    }
}