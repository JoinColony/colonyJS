/*
 * OneTxPayment Client Version 3 autogenerated by
 * @colony/colony-js version v4.1.2 from colonyNetwork tag 'flwss'
 *
 * Feel free to modify as needed!
 */

/* eslint-disable @typescript-eslint/no-explicit-any */

import { ClientType } from '../../../../constants';
import { OneTxPayment__factory as OneTxPaymentFactory } from '../../../../contracts/extensions/oneTxPayment/3/factories/OneTxPayment__factory';
import { OneTxPayment } from '../../../../contracts/extensions/oneTxPayment/3/OneTxPayment';
import { ExtendedIColony } from '../../../../clients/Colony/extensions/commonExtensions';

import * as currentVersionAddons from './OneTxPaymentClientAddons';
import * as version1Addons from '../1/OneTxPaymentClientAddons';
import * as version2Addons from '../2/OneTxPaymentClientAddons';

import * as currentVersionEncodedInterfaces from './OneTxPaymentClientEncodeInterfaces';

type OneTxPaymentEstimate = OneTxPayment['estimate'];
interface OneTxPaymentEstimateWithAddons extends OneTxPaymentEstimate {
  /*
   * @TODO These needs to be specifically determined once we can integrate
   * static code analysis into this lib
   */
  [key: string]: any;
}

export interface OneTxPaymentClient extends OneTxPayment {
  clientType: ClientType.OneTxPaymentClient;
  estimate: OneTxPaymentEstimateWithAddons;
  /*
   * @TODO These needs to be specifically determined once we can integrate
   * static code analysis into this lib
   */
  [key: string]: any;
}

const getOneTxPaymentClient = (
  address: string,
  colonyClient: ExtendedIColony,
): OneTxPaymentClient => {
  const oneTxPaymentClient = OneTxPaymentFactory.connect(
    address,
    colonyClient.signer || colonyClient.provider,
  ) as OneTxPaymentClient;
  oneTxPaymentClient.clientType = ClientType.OneTxPaymentClient;

  const addons = {
    ...version1Addons.getOneTxPaymentClientAddons(
      oneTxPaymentClient,
      colonyClient,
    ),
    ...version2Addons.getOneTxPaymentClientAddons(
      oneTxPaymentClient,
      colonyClient,
    ),
    ...currentVersionAddons.getOneTxPaymentClientAddons(
      oneTxPaymentClient,
      colonyClient,
    ),
  };
  const addonsEstimate = {
    ...version1Addons.getOneTxPaymentClientEstimateAddons(
      oneTxPaymentClient,
      colonyClient,
    ),
    ...version2Addons.getOneTxPaymentClientEstimateAddons(
      oneTxPaymentClient,
      colonyClient,
    ),
    ...currentVersionAddons.getOneTxPaymentClientEstimateAddons(
      oneTxPaymentClient,
      colonyClient,
    ),
  };

  const encodedInterfaces = {
    ...currentVersionEncodedInterfaces.getOneTxPaymentClientEncodeInterfaces(
      oneTxPaymentClient,
      colonyClient,
    ),
  };

  Object.keys(addons).map((addonName) => {
    oneTxPaymentClient[addonName] = addons[addonName];
    return null;
  });

  Object.keys(addonsEstimate).map((addonName) => {
    oneTxPaymentClient.estimate[addonName] = addonsEstimate[addonName];
    return null;
  });

  Object.keys(encodedInterfaces).map((interfaceName) => {
    /*
     * @NOTE We're adding new interfaces to the functions list that the client
     * implicitly doesn't know about
     */
    // @ts-ignore
    oneTxPaymentClient.interface.functions[interfaceName] = {
      encode: encodedInterfaces[interfaceName],
    };
    return null;
  });

  return oneTxPaymentClient;
};

export default getOneTxPaymentClient;

/* eslint-enable */
