/*
 * CoinMachine Client Version 5 autogenerated by
 * @colony/colony-js version v4.1.2 from colonyNetwork tag 'flwss'
 *
 * Feel free to modify as needed!
 */

/* eslint-disable @typescript-eslint/no-explicit-any */

import { ClientType } from '../../../../constants';
import { CoinMachine__factory as CoinMachineFactory } from '../../../../contracts/extensions/coinMachine/5/factories/CoinMachine__factory';
import { CoinMachine } from '../../../../contracts/extensions/coinMachine/5/CoinMachine';
import { ExtendedIColony } from '../../../../clients/Colony/extensions/commonExtensions';

import * as currentVersion from './CoinMachineClientAddons';
import * as version1 from '../1/CoinMachineClientAddons';
import * as version2 from '../2/CoinMachineClientAddons';
import * as version3 from '../3/CoinMachineClientAddons';
import * as version4 from '../4/CoinMachineClientAddons';
import { CoinMachineClient as CoinMachineClientV1 } from '../1/CoinMachineClient';
import { CoinMachineClient as CoinMachineClientV2 } from '../2/CoinMachineClient';
import { CoinMachineClient as CoinMachineClientV3 } from '../3/CoinMachineClient';
import { CoinMachineClient as CoinMachineClientV4 } from '../4/CoinMachineClient';

type CoinMachineEstimate = CoinMachine['estimate'];
interface CoinMachineEstimateWithAddons extends CoinMachineEstimate {
  /*
   * @TODO These needs to be specifically determined once we can integrate
   * static code analysis into this lib
   */
  [key: string]: any;
}

export interface CoinMachineClient extends CoinMachine {
  clientType: ClientType.CoinMachineClient;
  estimate: CoinMachineEstimateWithAddons;
  /*
   * @TODO These needs to be specifically determined once we can integrate
   * static code analysis into this lib
   */
  [key: string]: any;
}

const getCoinMachineClient = (
  address: string,
  colonyClient: ExtendedIColony,
): CoinMachineClient => {
  const coinMachineClient = CoinMachineFactory.connect(
    address,
    colonyClient.signer || colonyClient.provider,
  ) as CoinMachineClient;
  coinMachineClient.clientType = ClientType.CoinMachineClient;

  const addons = {
    ...version1.getCoinMachineClientAddons(
      (coinMachineClient as unknown) as CoinMachineClientV1,
      colonyClient,
    ),
    ...version2.getCoinMachineClientAddons(
      (coinMachineClient as unknown) as CoinMachineClientV2,
      colonyClient,
    ),
    ...version3.getCoinMachineClientAddons(
      (coinMachineClient as unknown) as CoinMachineClientV3,
      colonyClient,
    ),
    ...version4.getCoinMachineClientAddons(
      (coinMachineClient as unknown) as CoinMachineClientV4,
      colonyClient,
    ),
    ...currentVersion.getCoinMachineClientAddons(
      coinMachineClient,
      colonyClient,
    ),
  };
  const addonsEstimate = {
    ...version1.getCoinMachineClientEstimateAddons(
      (coinMachineClient as unknown) as CoinMachineClientV1,
      colonyClient,
    ),
    ...version2.getCoinMachineClientEstimateAddons(
      (coinMachineClient as unknown) as CoinMachineClientV2,
      colonyClient,
    ),
    ...version3.getCoinMachineClientEstimateAddons(
      (coinMachineClient as unknown) as CoinMachineClientV3,
      colonyClient,
    ),
    ...version4.getCoinMachineClientEstimateAddons(
      (coinMachineClient as unknown) as CoinMachineClientV4,
      colonyClient,
    ),
    ...currentVersion.getCoinMachineClientEstimateAddons(
      coinMachineClient,
      colonyClient,
    ),
  };

  Object.keys(addons).map((addonName) => {
    coinMachineClient[addonName] = addons[addonName];
    return null;
  });

  Object.keys(addonsEstimate).map((addonName) => {
    coinMachineClient.estimate[addonName] = addonsEstimate[addonName];
    return null;
  });

  return coinMachineClient;
};

export default getCoinMachineClient;

/* eslint-enable */
