/*
 * CoinMachine Client Version 3 autogenerated by
 * @colony/colony-js version v4.2.0-experimental.4 from colonyNetwork tag 'elwss-90-g2b9db0d1'
 *
 * Feel free to modify as needed!
 */

/* eslint-disable @typescript-eslint/no-explicit-any */

import { ClientType } from '../../../../constants';
import { CoinMachine__factory as CoinMachineFactory } from '../../../../contracts/extensions/coinMachine/3/factories/CoinMachine__factory';
import { CoinMachine } from '../../../../contracts/extensions/coinMachine/3/CoinMachine';
import { ExtendedIColony } from '../../../../clients/Colony/extensions/commonExtensions';

import * as currentVersion from './CoinMachineClientAddons';
import * as version1 from '../1/CoinMachineClientAddons';
import { CoinMachineClient as CoinMachineClientV1 } from '../1/CoinMachineClient';
import * as version2 from '../2/CoinMachineClientAddons';

type CoinMachineEstimate = CoinMachine['estimate'];
interface CoinMachineEstimateWithAddons extends CoinMachineEstimate {
  /*
   * @TODO These needs to be specifically determined once we can integrate
   * static code analysis into this lib
   */
  [key: string]: any;
}

export interface CoinMachineClient extends CoinMachine {
  clientType: ClientType.CoinMachineClient;
  estimate: CoinMachineEstimateWithAddons;
  /*
   * @TODO These needs to be specifically determined once we can integrate
   * static code analysis into this lib
   */
  [key: string]: any;
}

const getCoinMachineClient = (
  address: string,
  colonyClient: ExtendedIColony,
): CoinMachineClient => {
  const coinMachineClient = CoinMachineFactory.connect(
    address,
    colonyClient.signer || colonyClient.provider,
  ) as CoinMachineClient;
  coinMachineClient.clientType = ClientType.CoinMachineClient;

  const addons = {
    ...currentVersion.getCoinMachineClientAddons(
      coinMachineClient,
      colonyClient,
    ),
    ...version1.getCoinMachineClientAddons(
      (coinMachineClient as unknown) as CoinMachineClientV1,
      colonyClient,
    ),
    ...version2.getCoinMachineClientAddons(coinMachineClient, colonyClient),
  };
  const addonsEstimate = {
    ...currentVersion.getCoinMachineClientEstimateAddons(
      coinMachineClient,
      colonyClient,
    ),
    ...version1.getCoinMachineClientEstimateAddons(
      (coinMachineClient as unknown) as CoinMachineClientV1,
      colonyClient,
    ),
    ...version2.getCoinMachineClientEstimateAddons(
      coinMachineClient,
      colonyClient,
    ),
  };

  Object.keys(addons).map((addonName) => {
    coinMachineClient[addonName] = addons[addonName];
    return null;
  });

  Object.keys(addonsEstimate).map((addonName) => {
    coinMachineClient.estimate[addonName] = addonsEstimate[addonName];
    return null;
  });

  return coinMachineClient;
};

export default getCoinMachineClient;

/* eslint-enable */
