/*
 * VotingReputation Client Version 2 Addons autogenerated by
 * @colony/colony-js version 4.0.0-beta.1 from colonyNetwork tag 'lwss-18-g840e378c'
 *
 * Feel free to modify as needed!
 */

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any */

import { ContractTransaction } from 'ethers';
import { BigNumberish, BigNumber, Arrayish, bigNumberify } from 'ethers/utils';
import { MaxUint256 } from 'ethers/constants';

import {
  ExtendedIColony,
  getPermissionProofs,
  getChildIndex,
} from '../../../Colony/extensions/commonExtensions';
import { TransactionOverrides } from '../../../../contracts/6';
import { ColonyRole } from '../../../../constants';

import { VotingReputationClient } from './VotingReputationClient';

/*
 * Extra client methods
 */
export const getVotingReputationClientAddons = (
  votingReputationClient: VotingReputationClient,
  colonyClient: ExtendedIColony,
): Record<string, any> => ({
  createDomainMotionWithProofs: async (
    _domainId: BigNumberish, // Domain in which the voting will take place in
    _action: Arrayish,
    _key: Arrayish,
    _value: Arrayish,
    _branchMask: BigNumberish,
    _siblings: Arrayish[],
    overrides?: TransactionOverrides,
  ): Promise<ContractTransaction> => {
    let childSkillIdex = MaxUint256;
    const decodedDomain = bigNumberify(_action.toString().slice(10, 74)); // Domain in which the action is going to take place;
    if (decodedDomain.toNumber() !== bigNumberify(_domainId).toNumber()) {
      const domainSkillIdIndex = await getChildIndex(
        colonyClient,
        _domainId,
        decodedDomain.toNumber(),
      );
      if (domainSkillIdIndex.toNumber() !== -1) {
        childSkillIdex = bigNumberify(domainSkillIdIndex);
      } else {
        throw new Error('Child skill index could not be found');
      }
    }
    return votingReputationClient.createDomainMotion(
      _domainId,
      childSkillIdex,
      _action,
      _key,
      _value,
      _branchMask,
      _siblings,
      overrides,
    );
  },
  stakeMotionWithProofs: async (
    _motionId: BigNumberish,
    _vote: BigNumberish,
    _amount: BigNumberish,
    _key: Arrayish,
    _value: Arrayish,
    _branchMask: BigNumberish,
    _siblings: Arrayish[],
    overrides?: TransactionOverrides,
  ): Promise<ContractTransaction> => {
    const { domainId } = await votingReputationClient.getMotion(_motionId);
    const [permissionDomainId, childSkillIndex] = await getPermissionProofs(
      colonyClient,
      domainId,
      ColonyRole.Arbitration,
      votingReputationClient.address,
    );
    return votingReputationClient.stakeMotion(
      _motionId,
      permissionDomainId,
      childSkillIndex,
      _vote,
      _amount,
      _key,
      _value,
      _branchMask,
      _siblings,
      overrides,
    );
  },
});

/*
 * Extra client methods estimates
 *
 * These are needed! Don't skip them!
 */
export const getVotingReputationClientEstimateAddons = (
  votingReputationClient: VotingReputationClient,
  colonyClient: ExtendedIColony,
): Record<string, any> => ({
  createDomainMotionWithProofs: async (
    _domainId: BigNumberish, // Domain in which the voting will take place in
    _action: Arrayish,
    _key: Arrayish,
    _value: Arrayish,
    _branchMask: BigNumberish,
    _siblings: Arrayish[],
  ): Promise<BigNumber> => {
    let childSkillIdex = MaxUint256;
    const decodedDomain = bigNumberify(_action.toString().slice(10, 74)); // Domain in which the action is going to take place;
    if (decodedDomain.toNumber() !== bigNumberify(_domainId).toNumber()) {
      const domainSkillIdIndex = await getChildIndex(
        colonyClient,
        _domainId,
        decodedDomain.toNumber(),
      );
      if (domainSkillIdIndex.toNumber() !== -1) {
        childSkillIdex = bigNumberify(domainSkillIdIndex);
      } else {
        throw new Error('Child skill index could not be found');
      }
    }
    return votingReputationClient.estimate.createDomainMotion(
      _domainId,
      childSkillIdex,
      _action,
      _key,
      _value,
      _branchMask,
      _siblings,
    );
  },
  stakeMotionWithProofs: async (
    _motionId: BigNumberish,
    _vote: BigNumberish,
    _amount: BigNumberish,
    _key: Arrayish,
    _value: Arrayish,
    _branchMask: BigNumberish,
    _siblings: Arrayish[],
  ): Promise<BigNumber> => {
    const { domainId } = await votingReputationClient.getMotion(_motionId);
    const [permissionDomainId, childSkillIndex] = await getPermissionProofs(
      colonyClient,
      domainId,
      ColonyRole.Arbitration,
      votingReputationClient.address,
    );
    return votingReputationClient.estimate.stakeMotion(
      _motionId,
      permissionDomainId,
      childSkillIndex,
      _vote,
      _amount,
      _key,
      _value,
      _branchMask,
      _siblings,
    );
  },
});

/* eslint-enable */
