/*
 * VotingReputation Client Version 2 Addons autogenerated by
 * @colony/colony-js version 4.0.0-beta.1 from colonyNetwork tag 'lwss-18-g840e378c'
 *
 * Feel free to modify as needed!
 */

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any */

import { ContractTransaction } from 'ethers';
import { BigNumberish, BigNumber, Arrayish } from 'ethers/utils';

import { ExtendedIColony } from '../../../../clients/Colony/extensions/commonExtensions';
import { ROOT_DOMAIN_ID } from '../../../../constants';

import { VotingReputationClient } from './VotingReputationClient';

/*
 * Extra client methods
 */
export const getVotingReputationClientAddons = (
  votingReputationClient: VotingReputationClient,
  colonyClient: ExtendedIColony,
): Record<string, any> => ({
  /*
   * @NOTE That this assumes that the domain is **always** as descendent of ROOT
   * This means that once we introduce multi-nested domains, this will have to change
   */
  createDomainMotionWithProofs: async (
    _domainId: BigNumberish,
    _action: Arrayish,
    _key: Arrayish,
    _value: Arrayish,
    _branchMask: BigNumberish,
    _siblings: Arrayish[],
  ): Promise<ContractTransaction> => {
    const { networkClient } = colonyClient;
    const { skillId: rootSkillId } = await colonyClient.getDomain(
      ROOT_DOMAIN_ID,
    );
    const { skillId } = await colonyClient.getDomain(_domainId);
    const { children: childrenSkills } = await networkClient.getSkill(
      rootSkillId,
    );
    const domainSkillIdIndex = childrenSkills.findIndex(
      (childSkill) => childSkill.toNumber() === skillId.toNumber(),
    );
    if (domainSkillIdIndex === -1) {
      throw new Error();
    }
    return votingReputationClient.createDomainMotion(
      _domainId,
      new BigNumber(domainSkillIdIndex),
      _action,
      _key,
      _value,
      _branchMask,
      _siblings,
    );
  },
});

/*
 * Extra client methods estimates
 *
 * These are needed! Don't skip them!
 */
export const getVotingReputationClientEstimateAddons = (
  votingReputationClient: VotingReputationClient,
  colonyClient: ExtendedIColony,
): Record<string, any> => ({
  createDomainMotionWithProofs: async (
    _domainId: BigNumberish,
    _action: Arrayish,
    _key: Arrayish,
    _value: Arrayish,
    _branchMask: BigNumberish,
    _siblings: Arrayish[],
  ): Promise<BigNumber> => {
    const { networkClient } = colonyClient;
    const { skillId: rootSkillId } = await colonyClient.getDomain(
      ROOT_DOMAIN_ID,
    );
    const { skillId } = await colonyClient.getDomain(_domainId);
    const { children: childrenSkills } = await networkClient.getSkill(
      rootSkillId,
    );
    const domainSkillIdIndex = childrenSkills.findIndex(
      (childSkill) => childSkill.toNumber() === skillId.toNumber(),
    );
    if (domainSkillIdIndex === -1) {
      throw new Error();
    }
    return votingReputationClient.estimate.createDomainMotion(
      _domainId,
      new BigNumber(domainSkillIdIndex),
      _action,
      _key,
      _value,
      _branchMask,
      _siblings,
    );
  },
});

/* eslint-enable */
