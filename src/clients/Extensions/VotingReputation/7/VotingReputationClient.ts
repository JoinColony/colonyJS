/*
 * VotingReputation Client Version 7 autogenerated by
 * @colony/colony-js version v4.2.1-beta.3 from colonyNetwork tag 'flwss-294-g2bf113ff'
 *
 * Feel free to modify as needed!
 */

/* eslint-disable @typescript-eslint/no-explicit-any */

import { ClientType } from '../../../../constants';
import { VotingReputation__factory as VotingReputationFactory } from '../../../../contracts/extensions/votingReputation/7/factories/VotingReputation__factory';
import { VotingReputation } from '../../../../contracts/extensions/votingReputation/7/VotingReputation';
import { ExtendedIColony } from '../../../../clients/Colony/extensions/commonExtensions';

import * as currentVersionAddons from './VotingReputationClientAddons';
import * as version1Addons from '../1/VotingReputationClientAddons';
import * as version2Addons from '../2/VotingReputationClientAddons';
import * as version3Addons from '../3/VotingReputationClientAddons';
import * as version4Addons from '../4/VotingReputationClientAddons';
import * as version5Addons from '../5/VotingReputationClientAddons';
import * as version6Addons from '../6/VotingReputationClientAddons';

import * as currentVersionEncodedInterfaces from './VotingReputationClientEncodeInterfaces';
import * as version4EncodedInterfaces from '../4/VotingReputationClientEncodeInterfaces';
import * as version5EncodedInterfaces from '../5/VotingReputationClientEncodeInterfaces';
import * as version6EncodedInterfaces from '../6/VotingReputationClientEncodeInterfaces';

type VotingReputationEstimate = VotingReputation['estimate'];
interface VotingReputationEstimateWithAddons extends VotingReputationEstimate {
  /*
   * @TODO These needs to be specifically determined once we can integrate
   * static code analysis into this lib
   */
  [key: string]: any;
}

export interface VotingReputationClient extends VotingReputation {
  clientType: ClientType.VotingReputationClient;
  estimate: VotingReputationEstimateWithAddons;
  /*
   * @TODO These needs to be specifically determined once we can integrate
   * static code analysis into this lib
   */
  [key: string]: any;
}

const getVotingReputationClient = (
  address: string,
  colonyClient: ExtendedIColony,
): VotingReputationClient => {
  const votingReputationClient = VotingReputationFactory.connect(
    address,
    colonyClient.signer || colonyClient.provider,
  ) as VotingReputationClient;
  votingReputationClient.clientType = ClientType.VotingReputationClient;

  const addons = {
    ...version1Addons.getVotingReputationClientAddons(
      votingReputationClient,
      colonyClient,
    ),
    ...version2Addons.getVotingReputationClientAddons(
      votingReputationClient,
      colonyClient,
    ),
    ...version3Addons.getVotingReputationClientAddons(
      votingReputationClient,
      colonyClient,
    ),
    ...version4Addons.getVotingReputationClientAddons(
      votingReputationClient,
      colonyClient,
    ),
    ...version5Addons.getVotingReputationClientAddons(
      votingReputationClient,
      colonyClient,
    ),
    ...version6Addons.getVotingReputationClientAddons(
      votingReputationClient,
      colonyClient,
    ),
    ...currentVersionAddons.getVotingReputationClientAddons(
      votingReputationClient,
      colonyClient,
    ),
  };
  const addonsEstimate = {
    ...version1Addons.getVotingReputationClientEstimateAddons(
      votingReputationClient,
      colonyClient,
    ),
    ...version2Addons.getVotingReputationClientEstimateAddons(
      votingReputationClient,
      colonyClient,
    ),
    ...version3Addons.getVotingReputationClientEstimateAddons(
      votingReputationClient,
      colonyClient,
    ),
    ...version4Addons.getVotingReputationClientEstimateAddons(
      votingReputationClient,
      colonyClient,
    ),
    ...version5Addons.getVotingReputationClientEstimateAddons(
      votingReputationClient,
      colonyClient,
    ),
    ...version6Addons.getVotingReputationClientEstimateAddons(
      votingReputationClient,
      colonyClient,
    ),
    ...currentVersionAddons.getVotingReputationClientEstimateAddons(
      votingReputationClient,
      colonyClient,
    ),
  };

  const encodedInterfaces = {
    ...version4EncodedInterfaces.getVotingReputationClientEncodeInterfaces(
      votingReputationClient,
      colonyClient,
    ),
    ...version5EncodedInterfaces.getVotingReputationClientEncodeInterfaces(
      votingReputationClient,
      colonyClient,
    ),
    ...version6EncodedInterfaces.getVotingReputationClientEncodeInterfaces(
      votingReputationClient,
      colonyClient,
    ),
    // eslint-disable-next-line max-len
    ...currentVersionEncodedInterfaces.getVotingReputationClientEncodeInterfaces(
      votingReputationClient,
      colonyClient,
    ),
  };

  Object.keys(addons).map((addonName) => {
    votingReputationClient[addonName] = addons[addonName];
    return null;
  });

  Object.keys(addonsEstimate).map((addonName) => {
    votingReputationClient.estimate[addonName] = addonsEstimate[addonName];
    return null;
  });

  Object.keys(encodedInterfaces).map((interfaceName) => {
    /*
     * @NOTE We're adding new interfaces to the functions list that the client
     * implicitly doesn't know about
     */
    // @ts-ignore
    votingReputationClient.interface.functions[interfaceName] = {
      encode: encodedInterfaces[interfaceName],
    };
    return null;
  });

  return votingReputationClient;
};

export default getVotingReputationClient;

/* eslint-enable */
